nが5の倍数か確認する	n % 5 == 0
option: 赤にフォントの色を設定する	color = 'red'
カラムを十の位で丸める	ds.round(-1)
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
横棒グラフをライトスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
折れ線グラフの色をフォレストグリーンにセットする	plt.plot(データ列x, データ列y, color='forestgreen')
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
リストの長さだけ繰り返す	range(len(aList))
option: 先頭のカラムを行にする	index_col = 0
プラットフォームの符号付き整数の最大値	sys.maxsize
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ファイルがあるかどうか確認する	os.path.exists(filepath)
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームのカラムの値が未入力値かどうか	df[col].isna()
ティール色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
日付データが日曜日か調べる	aDate.weekday() == 6
オブジェクトがタプルかどうか調べる	isinstance(obj, tuple)
実行時に標準出力がパイプ	not sys.stdout.isatty()
線を色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
空の両端キュー	collections.deque()
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
正規分布にしたがってデータ列の値が発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフを用いてリストを描画する	plt.plot(データ列x, データ列y)
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
データ列は何時か確認する	ds.dt.hour
配列をn個にビンニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
三つの実行結果を順に出力する	print(value, value2, value3)
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
データ列を1000の位で丸める	ds.round(-3)
option: グラフの色を濃い青に変更する	color = 'darkblue'
カラムはどの程度、分散しているか見る	ds.var()
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのn行目以降抽出する	df[n:]
nを切り捨てながらn2分の一にする	n //= n2
２つの列でデータフレームをソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
グラフの色をパステル調にする	sns.set(pallete='pastel')
文字列をカンマで区切って、列挙する	s.split(',')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
nはn2と等しい	n == n2
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
グラフの横軸を対数に変更する	plt.xscale('log')
列'A'と列'B'をキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
n個の整数リスト	list(range(n))
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
線グラフを深紅色を使って描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列がリストに含まれるか調べる	element in aList
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
FIXME	np.linalg.eig(aArray)
黒い上三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
改行で区切って2つの文字列をプリントする	print(value, value2, sep='\n')
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ファイルが存在するか調べる	os.path.exists(filepath)
ユークリッド距離を算出する	math.dist(point, point2)
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
グリッド線を白くする	plt.grid(color='w')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
スクリプトの名前	sys.argv[0]
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
カウンタの項目一覧	aCounter.keys()
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
配列の列ごとの合計値	np.sum(aArray, axis=0)
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
タプルから項目名の値を見る	aDict.get(key)
書き込むCSVファイルの小数点以下の桁数を増やす	df.to_csv(filename, float_format='%.3f')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図をrgbのダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
タプル中の文字列が最初に見つかるインデックス	aTuple.index(element)
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
数式の変数を数式で置き換える	e.subs(z, e2)
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
データ列の分散	ds.var()
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
表データを列ごとにグループ化し、、それぞれのグループごとの最大値を計算する	df.groupby(column).max()
option: シスル色を使用する	color = 'thistle'
列を文字列に変換して、タブによって連結する	'\t'.join(map(str, iterable))
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
データフレームの列で文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
option: フォントの色をティールにセットする	color = 'teal'
リストと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
rgbの三角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ファイルから1文字、読み込む	f.read(1)
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
変数を定義する	x = n
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
タプルの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームを各列毎にグループ化し、列の分散を求める	df.groupby(column)[column2].var()
option: 読み込まない列番号をnamesで指定する	skiprows = names
タイムスタンプをインポートする	import time
option: ブランチドアーモンドにフォントの色を設定する	color = 'blanchedalmond'
マッピングの項目名を要素に設定する	aDict[key] = element
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: スレートブルー色を使う	color = 'slateblue'
実数の床	math.floor(x)
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
option: 色をパープルに設定する	color = 'purple'
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
リストから文字列を除く	aList.remove(element)
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフの左三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
列の値としてデータフレームをグループ化し、各グループごとの件数を知る	df.groupby(column).size()
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
二つのリストから辞書	dict(zip(aList, aList2))
1からnまでの整数列	list(range(1, n+1))
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
option: 色を青紫に設定する	color = 'violet'
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列中から部分文字列を探す	s.find(sub)
文字列から部分文字列を全て除去する	s.replace(sub, '')
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
縦軸の目盛を表示しない	plt.yticks([])
リストをn回、結合する	aList * n
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
オプションで、標準出力を出力先にする	file = sys.stdout
データ列のUNIX秒からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
整数nを八進文字列に変換する	oct(n)[2:]
グラフを全般的に暗くする	sns.set(pallete='dark')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
option: サドルブラウン色を使う	color = 'saddlebrown'
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
縦棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
option: ミディアムターコイズを使用する	color = 'mediumturquoise'
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
カテゴリ別でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームをサンプリングする	df.sample()
ファイルパスを文字列の示すエンコーディングを使って書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
ケンドール順位相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='kendall')
文字列中にひとつでも非アスキー文字があるか調べる	any(not c.isascii() for c in s)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
実数の指数	math.frexp(x)[1]
option: 色をライトスレイグレーに指定する	color = 'lightslategray'
連続した行列の作成する	np.arange(開始値, 終了値, 等差)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
折れ線グラフを▽印で描画する	plt.plot(データ列x, データ列y, marker='v')
図の縦横を変更する	plt.figure(figsize=(横幅, 高さ))
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
グラフの描画でパステル調にパレットを使用する	sns.set(pallete='pastel')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
ふたつの集合の差集合を使う	aSet.difference(aSet2)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
Pandasで、データ列をフォーマットで日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
空白	' '
nが3で割り切れるか調べる	n % 3 == 0
文字列を部分文字列で分けた場合の後半の文字列を取り出す	s.partition(sub)[-1]
ファイルパスを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
リストとリストの散布図を描画してダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
本日の曜日を整数で見る	datetime.datetime.today().weekday()
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
コマンド引数のリスト	sys.argv[1:]
辞書からキーの値	aDict.get(key)
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: クリムゾン色を使う	color = 'crimson'
天井を求める	math.ceil(x)
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームの行を範囲指定して抽出する	df[start:end]
グラフの見栄えを良くする	import seaborn as sns
列によってデータフレームを並べ直して下位を取り出す	df.sort_values(columns).tail(n)
要素が全て1のベクトルを作る	np.ones(要素数, dtype=np.int)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
タプルのオブジェクトが最初に見つかる位置	aTuple.index(element)
nにn2を加える	n + n2
モカシンにヒストグラムの色を変更する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
リストの全要素をクリアにする	aList.clear()
データ列の折れ線グラフを描画し、、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
タプルを展開してプリントする	print(*aTuple)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームを複数の列によってまとめたグループを使う	df.groupby(columns)
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
破線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ダークレッドにグラフの色を設定する	color = 'darkred'
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームを丸める	df.round()
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
プログラムの実行を異常終了する	sys.exit(1)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
2つの値を文字列で区切ってプリントする	print(value, value2, sep=s)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
nの三乗	n ** 3
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
プログラムのファイルの名前を知る	sys.argv[0]
自然数の階乗	math.factorial(n)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
インディゴ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図の▲マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
option: グラフの色をスラグレーに設定する	color = 'slategrey'
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
データ列のメディアン	ds.median()
option: スラグレー色を使用する	color = 'slategray'
データフレームのリストカラムの欠損値を最小値に指定する	df[aList].fillna(df[aList].min())
option: グラフの色をモカシンに設定する	color = 'moccasin'
マッピングの浅いコピーを作る	aDict.copy()
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
カテゴリ別でグループ化して、に箱ひげ図としてデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: グラフの色をリネンに設定する	color = 'linen'
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
タプルの先頭のn要素を取り除く	aTuple[n:]
真	True
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
見やすいグラフを使う	import seaborn as sns
タプルの末尾を求める	aTuple[-1]
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか調べる	df[aList].kurt()
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
データフレームの列を丸めて、整数型にする	df[col].round().astype(int)
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
サーモン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームからカラムを一つ選択する	df[[column]]
集合からエラーなく要素を除く	aSet.discard(element)
データ列を円グラフにする	plt.pie(データ列, startangle=90)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
option: シアン色を用いる	color = 'cyan'
文字列はリストに含まれるか確認する	element in aList
日付時刻データの日数を使う	aDatetime.day
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
nが5で割り切れるか	n % 5 == 0
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
線を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
SJISでJSONLファイルにデータフレームを書き込む	df.to_csv(filename, encoding='shift_jis')
1からNまでのベクトル	np.arange(1, N+1)
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
空の勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
列のNaNを最小値に変更する	ds.fillna(ds.min())
option: カンマをセパレータで使う	sep = ','
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
シーケンスを集合に変換する	set(iterable)
要素が集合に含まれるか調べる	element in aSet
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
配列とデータ列について散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
２つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
二つのデータフレームを列'A'と列'B'をキーとして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
キーがマップにある	key not in aDict
赤い丸マーカーをイテラブルとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
無限にカウントアップする	itertools.count()
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
回帰分析をスタッキングでする	sklearn.ensemble.StackingRegressor()
option: マーカーを右三角に変更する	marker = '>'
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
リストの中の最小値	min(aList)
option: n番目のカラムをインデックスに設定する	index_col = n
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ファイルパスを開いて]、追加ストリームを使う	open(filepath, mode='a')
リストと数列の散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
nが5で割り切れるか調べる	n % 5 == 0
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
バイトオーダを調べる	sys.byteorder
折れ線グラフにポイント印を使用する	plt.plot(データ列x, データ列y, marker='.')
データフレームを列名リストで整列する	df.sort_values(by=column)
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームの列の文字列が文字列が含まれるデータを取り出す	df[df[column].str.contains(s)]
データフレームのリストカラムの中にあると日付データの合計を数える	df[aList].isin([value, value2]).sum()
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
option: データ型を指定する	dtype = np.int
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
option: 色をロイヤルブルーに設定する	color = 'royalblue'
文字列の中のパターンによる全てのマッチを求める	re.findall(pattern, s)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
エクセルデータファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
2つの浮動小数点数が近似値	math.isclose(x, x2)
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: グラフの色をダークグレーに設定する	color = 'darkgray'
option: グラフの色をマゼンタに設定する	color = 'magenta'
option: カーキ色を使う	color = 'khaki'
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
最初の部分文字列で文字列を二分し、前半の文字列を使う	s.partition(sub)[0]
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの列の名前の一覧を使う	df.columns
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
ライトスレイグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
行列が何のデータ型か調べる	aArray.dtype()
線グラフの色をアクアマリンにセットする	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのリスト列の第二四分位数	df[aList].median()
文字列が文字列リストにあるか調べる	s in aStringList
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
option: ミディアムパープル色を使う	color = 'mediumpurple'
option: 複数行に対応する	flag = re.MULTILINE
数式のパラメータにnを代入する	e.subs(z, n)
データフレームのカラムの文字列を未入力値にする	df[col].replace(s, np.nan)
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データ列の文字列をNaNにする	ds.replace(s, np.nan)
リストとリストについて散布図を描き、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: グラフの色を青紫に設定する	color = 'violet'
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
グラフを論文用に設定する	sns.set(context='paper')
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
変数がマイナス無限大に近づくときの数値の極限値を計算する	sympy.limit(e, z, -oo)
棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
列の値が欠損値か確認する	ds.isna()
サブセットか調べる	aSet.issubset(aSet2)
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームをJSONLファイルにタブ区切りで保存する	df.to_csv(filename, sep='\t')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
グラフをデフォルトでいい感じに指定する	sns.set()
未定値	None
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
option: マゼンタを使用する	color = 'magenta'
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを列名リストによって並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
三二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
データフレームのそれぞれのグループ毎の合計	df.groupby(column).sum()
ヒストグラムの色をダークマゼンタにセットする	plt.hist(データ列, color='darkmagenta')
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームから破壊的に重複を消す	df.drop_duplicates(inplace=True)
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: オリーブにグラフの色を設定する	color = 'olive'
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
整数の最大公約数	math.gcd(n, n2)
option: ライム色を使用する	color = 'lime'
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームの相関行列ケンドール順位相関係数として	df.corr(method='kendall')
横軸の目盛を対数に変更する	plt.xscale('log')
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
カウンタを低頻度な方からリストとして得る	aCounter.most_common()[::-1]
データフレームの指定された列を配列に変換する	df[column].values
列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
データフレームの中に存在する日付データの数を数える	df.isin([value]).sum()
n個にリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ビン数nでリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
列によってデータフレームをソートし、、更新する	df.sort_values(by=column, inplace=True)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
変数を青色にする	f'\033[34m{value}\033[0m'
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
データフレームのリストカラムの平均値	df[aList].mean()
最頻値でデータフレームのNaNを埋める	df.fillna(df.mode().iloc[0])
実線にヒストグラムを指定する	plt.hist(データ列, linestyle='solid')
行列の最大値	np.max(aArray)
イテラブルと配列について散布図を描画し、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
文字列を最後の部分文字列で二分し、後半の文字列を求める	s.rpartition(sub)[-1]
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
色付きの一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
小数点数の双曲線正接	math.tanh(x)
分子割る分母	fractions.Fraction(分子, 分母)
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
赤にヒストグラムの色を指定する	plt.hist(データ列, color='red')
データ列の各値の出現回数を求める	ds.value_counts()
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
空の辞書を作る	{}
リストとリストについて散布図を描き、、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
オーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームのカラムの最頻値	df[col].mode()
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
PandasでUNIX時間の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
option: ダークサーモン色を用いる	color = 'darksalmon'
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
日付データをタプルに変換する	aDate.timetuple()
データフレームのカラムの未入力値を最小値で置換する	df[col].fillna(df[col].min())
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
カウンタをマッピングから作成する	collections.Counter(aDict)
データフレームのどの値が頻出か見る	df.mode()
データフレームをエクセルファイルファイルでJSONLファイルに書き込む	df.to_excel(filename)
option: グラフの色をゴールドに設定する	color = 'gold'
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
オブジェクトはバイト列型	isinstance(obj, bytes)
データフレームとデータフレームの列を連結する	pd.concat([df, ds], axis=1)
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
空列	[]
ダークブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
円周率	math.pi
nマイナスn2	n - n2
オレンジレッドにヒストグラムの色を指定する	plt.hist(データ列, color='orangered')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
数列とリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
タプルとタプルを連結する	aTuple + aTuple2
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
最大長nの両端キューを作る	collections.deque(maxlen=n)
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームからカラムを３つ選択する	df[[column, column2, column3]]
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
キーがマッピング上で定義済みか調べる	key in aDict
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
赤い下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
行列の行列式	np.linalg.det(aArray)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
ダークグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームの中の欠損値の個数をカウントする	df.isna().sum()
ラインを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
データフレームの列がx以下のデータを抽出する	df[df[column] <= x]
多次元データをSVDを用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
Pandasで、dateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データ列の第三四分位数	ds.quantile(0.75)
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データ列の歪度	ds.kurt()
グラフを描く準備をする	import matplotlib.pyplot as plt
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
マップから項目名で指定された項目を取り出す	aDict.pop(key)
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの中の列を等量で分割数nでビン分割する	pd.qcut(df[col], n)
辞書をコピーする	aDict.copy()
散布図に四角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='s')
データ列の偏りを対数変換する	np.log(データ列)
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列をカンマによって区切り、列挙する	s.split(',')
CSVファイルファイル名がか	filename.endswith('.csv')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ファイルからファイル名を使う	os.path.basename(filepath)
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
計算機イプシロン	sys.float_info.epsilon
リストの末尾のn要素を捨てる	aList[:-n]
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
等間隔でリストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
プロット中のフォントを設定する	sns.set(font=フォント名)
'A'列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
option: 読み込まないフッタをnに設定する	skipfooter = n
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
データフレームを各列毎にグループ化し、、列の分散を求める	df.groupby(column)[column2].var()
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
ファイルパスをオープンする]	open(filepath)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームを列によってグループ化してそれぞれのグループごとの合計を求める	df.groupby(column).sum()
option: グラフの色をグレーに設定する	color = 'grey'
アルファベットを全部使う	string.ascii_letters
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
スノー色としてヒストグラムを描画する	plt.hist(データ列, color='snow')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
option: ピーチパフ色を使う	color = 'peachpuff'
データフレームを列によってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
行列の列ごとの最大値	np.max(aArray, axis=0)
両端キューのn番目に要素を追加する	deq.insert(n, element)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
リストにリストを加えて拡張する	aList.extend(aList2)
サーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列がタプルの要素でないか調べる	element not in aTuple
ふたつの辞書を合体する	aDict | aDict2
データフレームを二つのカラムを用いてによって降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
データフレームのカラムの分	df[col].dt.minute
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
横軸の目盛りを非表示にする	plt.xticks([])
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
辞書のキーとその値をペアとして取り出す	aDict.items()
コレクションを使う	import collections
列'A'と列'B'をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
配列とイテラブルについて散布図を描画し、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
散布図をrgbの左三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
辞書の項目数を参照する	len(aDict)
淡い茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
グリッドを実線にする	plt.grid(linestyle='solid')
eの小数点数乗	math.exp(x)
タプルの中の最小値	min(aTuple)
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
範囲から配列	np.linspace(最小値, 最大値, 要素数)
本日の日付時刻	datetime.datetime.today()
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: グリーンイエローを使用する	color = 'greenyellow'
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
両端キューをデキューする	deq.popleft()
データ列の折れ線グラフを四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
option: 茶色色を使う	color = 'brown'
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
イテラブルを変更不能な集合に変換する	frozenset(iterable)
option: ボックスチャートに平均を加える	showmeans = False
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
２つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
実数以下の最大の整数	math.floor(x)
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
option: 印を▽に変更する	marker = 'v'
両端キューをタプルに変換する	tuple(deq)
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
データフレームを'A'列によって整列する	df.sort_values(by='A')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
文字列の左側からタブを取り除く	s.lstrip('\t')
文字列を部分文字列で分けた場合の後半の文字列	s.partition(sub)[-1]
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: ビスク色を使う	color = 'bisque'
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
スライドにグラフの使途を設定する	sns.set(context='talk')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
現在が日曜日	datetime.datetime.today().weekday() == 6
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
グリッド線を青くする	plt.grid(color='b')
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
部分文字列が文字列中に含まれないか調べる	sub not in s
データフレームの列の未入力値を中央値で置換する	df[col].fillna(df[col].median())
配列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
オブジェクトが辞書クラスか調べる	isinstance(obj, dict)
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームの列はどれだけ分散しているか見る	df[col].var()
データ列を円プロットにする	plt.pie(データ列, startangle=90)
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
余弦	math.cos(x)
ファイルパスから拡張子付きのファイル名を見る	os.path.basename(filepath)
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
全ての数字	string.digits
文字列を空白で末尾から分割する	s.rsplit()
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
グラフの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
nからn2までのstepごとによるスライス	slice(n, n2, step)
データフレームの２つの列を並べて箱ひげ図で図示する	plt.boxplot([df['カラム'], df['カラム']])
現在の曜日を整数で求める	datetime.datetime.today().weekday()
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
数列とリストについて散布図を描画して、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
option: グリーンイエローを使う	color = 'greenyellow'
文字列を文字リストに変換する	list(s)
スクリプトのファイル名	sys.argv[0]
日付データが日付データより後ろか調べる	aDate > aDate2
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
列の組み合せ	itertools.combinations(iterable, n)
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列をゼロ埋めする	s.zfill(文字列幅)
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図を大バツマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='X')
option: ダークシアンを使用する	color = 'darkcyan'
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
モジュールを検索するパス	sys.path
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
回帰分析をスタッキングを用いて行う	sklearn.ensemble.StackingRegressor()
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
標準入力	sys.stdin
日付データが月曜日か調べる	aDate.weekday() == 0
option: グラフの色をトマトに設定する	color = 'tomato'
ゴールド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
xでデータフレームのリスト列のNaNを置換する	df[aList].fillna(x)
ライトスチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームのメディアン	df.median()
赤い実線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
カラーバーを描画する	plt.colorbar()
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
option: シアン色を使う	color = 'cyan'
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
部分文字列	sub in s
標準入力から1文字だけ読む	sys.stdin.read(1)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
整数nの16進文字列	hex(n)[2:]
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
リストをn倍する	aList * n
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
リストをビン数nでビンニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
リストとリストについて散布図を描画し、、マーカーを菱形に指定する	plt.plot(データ列x, データ列y, marker='D')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
文字列の両端から空白を取り除く	s.strip()
リストとリストの散布図をプロットしてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
主成分分析を用いて多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
option: 色の透明度を設定する	alpha = 0.5
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ふたつのリストの積集合	list(set(aList) & set(aList2))
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
タプルの中の最大値	max(aTuple)
option: ライトブルー色を使う	color = 'lightblue'
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: 色をホワイトに設定する	color = 'white'
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
整数最小公倍数	math.lcm(n, n2)
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図をrgbのバツマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をブラックに設定する	color = 'black'
option: ピンク色を使う	color = 'pink'
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
実数が負の数か調べる	x < 0
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
黒いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
グラフを画面に設定する	sns.set(context='notebook')
option: 星マーカーを使う	marker = '*'
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
データフレームの列の値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データ列を用いる	import pandas as pd
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
棒グラフをやわらかい青色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
両端キューの左に要素を入れる	deq.appendleft(element)
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
アイボリー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
上限から下限までの区間でヒストグラムを描く	plt.hist(データ列, range=(start, end))
リストとリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
現在をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
日付時刻データが何年か知る	aDatetime.year
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームから重複するデータを削除する	df.drop_duplicates()
データフレームの未入力値をxに指定する	df.fillna(x)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
option: 色を深紅に設定する	color = 'crimson'
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
文字列をシンボルに変換する	sympy.Symbol(s)
実行結果をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
辞書に項目名ワード引数として更新する	aDict.update(**kwargs)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
文字列を末尾から空白で区切る	s.rsplit()
メディアンでデータフレームの欠損値を補う	df.fillna(df.median())
option: フォントの色をターコイズに指定する	color = 'turquoise'
コマンド引数の一覧を	sys.argv[1:]
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
nが何桁か	len(str(n))
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
二つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ダークオレンジ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
'A'列によってデータフレームをソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
文字列がタプルに含まれるか調べる	element in aTuple
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
整数nの十六進表現	hex(n)
イテラブルを累加した列	itertools.accumulate(iterable)
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
文字列を改行で分割し文字列リストにする	s.splitlines()
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
option: サドルブラウン色を用いる	color = 'saddlebrown'
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
エクセルファイルファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
文字列全体を正規表現にケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
コマンドの第2引数を知る	sys.argv[1]
ミディアムパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
配列の最大値	np.max(aArray)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
xが1もしくは2か調べる	x == 1 or x == 2
データフレームのn行より前抽出する	df[:n]
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
データフレームの未入力値を平均値に変更する	df.fillna(df.mean())
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図の▲印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
オレンジにヒストグラムの色を指定する	plt.hist(データ列, color='orange')
ヒストグラムの色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
データフレームの列が文字列で終わるデータを選択する	df[df[column].str.endswith(s)]
黒いダイアモンドマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
グラフを綺麗にする	import seaborn as sns
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
nが一桁の数か	0 <= n <= 9
option: スプリンググリーンにグラフの色を指定する	color = 'springgreen'
カラーバーを水平で描く	plt.colorbar(orientation='horizontal')
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの中の列をビン数nを使ってビン分割する	pd.cut(df[col], n)
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
xでデータフレームの列の欠損値を埋める	df[col].fillna(x)
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: グラフの色を茶色に設定する	color = 'brown'
リストとデータ列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
辞書を浅くコピーする	dict(aDict)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
option: ダイアモンドマーカーを使う	marker = 'D'
折れ線グラフの色をオリーブにセットする	plt.plot(データ列x, データ列y, color='olive')
option: どのカラムもインデックスに設定しない	index_col = None
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの最後n行を取り出す	df.tail(n)
列を出現回数して、カウンタを更新する	aCounter.update(iterable)
文字列の中でケースを無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
変数について数式の積分を行う	sympy.integrate(e, z)
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
キューをリストにする	list(deq)
整数を十六進表記の文字列に変換する	x.hex()
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
ファイルに文字列を書き込む	f.write(s)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
リストの値のみ表示する	print(*aList)
数式の変数に数式を代入する	e.subs(z, e2)
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
リストと配列について散布図を描いて、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
行列の列ごとの最大値を使う	np.max(aArray, axis=0)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
整数nを十六進数表現に変換する	hex(n)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
配列のユニークな要素とそのインデックスを使う	u, indices = np.unique(aArray, return_index=True)
アクア色を用いてヒストグラムを描画する	plt.hist(データ列, color='aqua')
データフレームの列のpercentパーセンタイルを求める	df[col].quantile(percent/100)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
n番目のシートをファイルの読み込む	pd.read_excel(filename, sheet_name=n)
ゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
リストとデータ列について散布図を描画し、、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
二つの集合の差	aSet.difference(aSet2)
データ列が何秒か見る	ds.dt.second
predicateFuncがtrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
カウンタを辞書として更新する	aCounter.update(aDict)
データフレームのカラムが何秒か見る	df[col].dt.second
数列とリストについて散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
カウンタ間で和集合	aCounter | aCounter2
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
スプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
集合の全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
option: 色を珊瑚にする	color = 'coral'
option: 右三角印を用いる	marker = '>'
黒い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列中にひとつでも非大文字がある	any(not c.isupper() for c in s)
option: グラフの色を青に設定する	color = 'blue'
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
nが奇数か確認する	n % 2 == 1
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
黒い下三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとリストについて散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
破壊的にデータフレームを小さい順に'A'列と'B'列によって整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
浮動小数点数を十六進表記の文字列に変換する	x.hex()
両端キューのstart番目からend番目までの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
タプルの要素を小さい方からソートする	sorted(aTuple, reverse=True)
文字列の末尾が部分文字列か調べる	s.endswith(sub)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームのカラムの中にある文字列の合計を求める	df[col].isin([value]).sum()
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列中に部分文字列があるか	sub in s
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
実数の床数を算出する	math.floor(x)
option: オリベドラブを使う	color = 'olivedrab'
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
日付データが何年か知る	aDate.year
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
データフレームを散布図で可視化し、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ボックスチャートに簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
文字列が全て英数字か調べる	s.isalnum()
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
option: ダークスラテグレーにフォントの色を変更する	color = 'darkslategray'
オプションでファイルを使う	file = sys.open(filename, 'w')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: グラフの色をシアンに設定する	color = 'cyan'
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図を深紅色を用いて描画する	plt.scatter(データ列x, データ列y, color='crimson')
降順にデータフレームを複数の列によってによってソートする	df.sort_values(by=column, ascending=False)
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
option: ミディアムスレートブルーにグラフの色を指定する	color = 'mediumslateblue'
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームのカラムの年	df[col].dt.year
データフレームの列を折れ線プロットを使って可視化する	plt.plot(df[column], df[column])
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
イテラブルとリストについての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
シーケンスから重複なく、n個選ぶ	random.sample(iterable, k=n)
既存のファイルパスをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ファイルパスからのストリームを使う	open(filepath)
正則化付き線形モデルを用意する	model = sklearn.linear_model.ElasticNet()
日付時刻データをタプルにする	aDatetime.timetuple()
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
全要素を０で初期化した行列	np.zeros(行数, 列数)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
インディアンレッドにヒストグラムの色を指定する	plt.hist(データ列, color='indianred')
配列の各要素の最大公約数	np.gcd(aArray, aArray2)
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
option: ダークオリーブグリーンを使用する	color = 'darkolivegreen'
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
文字列タブ区切りのファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
文字列をカンマによって区切って、列挙する	s.split(',')
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
option: トマトを使う	color = 'tomato'
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
線形回帰モデルのバイアス	model.intercept_
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
整数nがセットのどれかか	n in aSet
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
文字列の終了位置以前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
文字列がタプルの要素	element in aTuple
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: グラフの色をスラグレーにする	color = 'slategray'
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
整数nのビット長	n.bit_length()
整数nがセットのいづれかか調べる	n in aSet
部分文字列で最後から文字列を分割する	s.rsplit(sub)
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
日付データの曜日を整数で使う	aDate.weekday()
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
日付データが日付データより後ろかどうかテストする	aDate > aDate2
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
列を等間隔でn個にビン分割する	pd.cut(ds, n)
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
乱数で要素を埋めた配列を作る	np.random.random(N)
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
イテラブルを集合に追加更新する	aSet.update(iterable)
xとyの商と余りを同時に求める	divmod(x, y)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
２つのデータフレームを列をキーとして結合する	pd.merge(df, df2, on=column)
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
option: ダークシアグリーン色を使う	color = 'darkseagreen'
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
Pandasのバージョンを調べる	print(pd.__version__)
ピアソン相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
英字を全部使う	string.ascii_letters
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
横棒プロットをプロットして、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
オブジェクトをイテラブルに変換する	iter(obj)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
２つ並べてデータ列を柱状グラフにする	plt.hist([データ列, データ列], color=['b', 'r'])
t分布型確率的近傍埋め込み法として淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
option: ディムグレー色を使う	color = 'dimgrey'
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
option: 大バツマーカーを使う	marker = 'X'
プロットの描画でパステル調に色を使用する	sns.set(pallete='pastel')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
横方向に三つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームから最後の列を除く	df[df.columns[:-1]]
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
両端キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
青い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列をプリントする	print(value)
データ列を丸めて、整数型にする	ds.round().astype(int)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
リストの先頭	aList[0]
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
線グラフの色をトマトにセットする	plt.plot(データ列x, データ列y, color='tomato')
データ列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
イテラブルとリストについて散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
データフレームのカラムで文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
分類モデルを訓練する	model.fit(説明変数, 目的変数)
高頻出方からカウンタを列挙する	aCounter.most_common()
option: グラフの色をカデットブルーに指定する	color = 'cadetblue'
データ列のNaNをメディアンで埋める	ds.fillna(ds.median())
option: フォントの色をフローラルホワイトに指定する	color = 'floralwhite'
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
UNIXコマンドtextを実行する	os.system(text)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
数式のパラメータの解を方程式として求める	sympy.solve(e, z)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
カウンタのキーとカウントを列挙する	aCounter.items()
option: ダークスレートブルーを使う	color = 'darkslateblue'
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
折れ線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
文字列をトリムする	s.strip()
ベクトルの要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
全ての十六進数字	string.hexdigits
表データを使う	import pandas as pd
今日のローカルな日付を使う	datetime.date.today()
実数が整数かどうか	x.is_integer()
配列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフの▼マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
丸マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
グラフを表示する	plt.show()
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームの列の値が欠損値かどうか調べる	df[col].isna()
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
option: ダークオーキッド色を使う	color = 'darkorchid'
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
nをn2だけ右シフトする	n >> n2
色付きの破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
黒い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
配列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
option: グリーン色を用いる	color = 'green'
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
実行結果をシアンにする	f'\033[36m{value}\033[0m'
データフレームに重複があるか見る	df.duplicated()
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
ルートのチェーンマップ	collections.ChainMap()
文字列を最初の部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
全要素を０で初期化した整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int)
ライトシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
整数nがリストのどれかか調べる	n in aList
文字列が全て空白文字からなるか調べる	s.isspace()
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの列のユニークな値の個数を確認する	df[col].nunique()
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
各列毎にデータフレームをグループ化し、列の標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
空のセットを生成する	set()
option: ゴーストホワイト色を使う	color = 'ghostwhite'
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
日付データが何日か知る	aDate.day
文字列が空白からなるか調べる	s.isspace()
日付時刻データが何秒か知る	aDatetime.second
xを整数に変換する	int(x)
プロットのy軸を対数に変更する	plt.yscale('log')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
日付時刻データの日付	aDatetime.date()
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
option: オリーブ色を使う	color = 'olive'
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
表データを'A'列によってを用いて降順に並べる	df.sort_values(by='A', ascending=False)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
データフレームの列がx未満のデータを抽出する	df[df[column] < x]
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
タプルの最後を捨てる	aTuple[:-1]
option: 丸マーカーを用いる	marker = 'o'
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
文字列リストを一つの文字列にする	''.join(map(str, iterable))
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
キューの末尾に要素を入れる	deq.append(element)
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
リストと数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
option: ライム色を用いる	color = 'lime'
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
文字列はリストに含まれない	element not in aList
棒グラフをトマト色を使って描画する	plt.bar(データ列x, データ列y, color='tomato')
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
黒い△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
全要素を０で初期化した3二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
グラフにグリッド線を付ける	plt.grid(True)
Pythonパスの一覧	sys.path
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
リストとリストについての散布図に赤い▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
実数のn乗して浮動小数点数による余り	pow(x, n, y)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: ヘッダをnamesに設定する	header = names
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: 改行コードを動作環境依存に設定する	newline = None
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図を黒い星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
ダークグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
カラムの各データ値の出現回数	df[col].value_counts()
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
単位行列	np.eye(行数, 列数)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
文字列を正規表現で分割する	re.split(pattern, s)
オブジェクトは組の要素でないか調べる	element not in aTuple
カデットブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cadetblue')
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
データフレームの列を目的変数にする	目的変数 = df['列名']
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
配列の行ごとの合計値	np.sum(aArray, axis=1)
データフレームを列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
データフレームの列を散布図でプロット化し、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
リストを展開して出力する	print(*aList)
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
３つ並べてリストを柱状グラフにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: 色をハニーデューに指定する	color = 'honeydew'
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
散布図の菱形印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列の長さ	len(s)
文字列を改行で区切る	s.splitlines()
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
変数の値をスワップする	x, y = y, x
カウンタをリセットする	aCounter.clear()
ファイルを追加モードでオープンする]	open(filepath, mode='a')
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
プロットの横軸を対数目盛に変更する	plt.xscale('log')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
option: ブール型を使う	dtype = np.int32
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
グラフのx座標にラベルを付ける	plt.xlabel('x軸ラベル')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
横棒グラフを描き、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
整数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
二つのマッピングをネスト化する	collections.ChainMap(aDict, aDict2)
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
データフレームをグループ化しそれぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
option: 配列のデータ型を指定する	dtype = np.uint8
numpyを使う	import numpy as np
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
n個分右にキューの要素をローテンションする	deq.rotate(n)
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
配列の最小値	np.min(aArray)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームの列の文字列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
左三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
日付データが金曜日か調べる	aDate.weekday() == 4
文字列を変数に変換する	sympy.Symbol(s)
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
複数の列によってデータフレームをグループ化し要約統計量を計算する	df.groupby(columns).describe()
データフレームを各列毎にグループ化し、、列の最小値を算出する	df.groupby(column)[column2].min()
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
大文字を使う	string.ascii_uppercase
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
入力ストリーム全体を行分割して読む	f.readlines()
分類モデルの適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
nがn2か	n == n2
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
データフレームのリストカラムの要約統計量	df[aList].describe()
グラフの見た目を良くする	import seaborn as sns
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
文字列は全て数値か調べる	s.isnumeric()
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
リストと配列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストの散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
rgbの丸マーカーを数列とイテラブルの散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
行列と同じ大きさの空行列を初期化する	np.empty_like(aArray)
データフレームのリスト列の値を正規表現で一度にreplに置換する	df[aList].replace(pattern, repl, regex=True)
現在のミリ秒	int(time.time() * 1000)
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: ライトサーモン色を使う	color = 'lightsalmon'
列によってデータフレームを集計して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームの中に含まれる文字列の合計を数える	df.isin([value]).sum()
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
カウンタを多い順に列挙する	aCounter.most_common()
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
文字列を隔離する	sys.intern(s)
散布図の▽マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
実数を実数で割った剰余	math.remainder(x, x2)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
nはn2か調べる	n == n2
パラメータが0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
小さい順にデータフレームを複数の列でソートする	df.sort_values(by=column, ascending=True)
option: 色をミスティローズに設定する	color = 'mistyrose'
データ列が何月か見る	ds.dt.month
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
小数点数が有限か調べる	math.isfinite(x)
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
テンプレートを引数としてargsをフォーマットする	formatText.format(*args)
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームのリストカラムの中に日付データと日付データがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
浮動小数点数が負の数か調べる	x < 0
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
実数を実数で整数除算する	x // y
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
標準入力を使う	sys.stdin
データフレームを転置する	df.T
オブジェクトはバイト列クラスかどうか	isinstance(obj, bytes)
正規表現patternで一度にデータフレームの列をreplに置き換える	df[col].replace(pattern, repl, regex=True)
カウンタをイテラブルで更新する	aCounter.update(iterable)
データ列を100の位で丸める	ds.round(-2)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
option: フローラルホワイトを使う	color = 'floralwhite'
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
リストの末尾を取り除く	aList[:-1]
リストの長さ	len(aList)
option: グラフの色をライムグリーンに指定する	color = 'limegreen'
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
nをn2だけ減少させる	n -= n2
文字コードに対応する文字	chr(unicode)
option: ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
マッピング上で項目名が定義済みか調べる	key in aDict
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
文字列中に非数字が含まれるか調べる	any(not c.isdigit() for c in s)
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をチョコレートにする	plt.plot(データ列x, データ列y, color='chocolate')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
行列が何次元か調べる	aArray.ndim
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
カラムのNaNを最小値にする	ds.fillna(ds.min())
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
既存のファイルをEUCを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
紺色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
両端キューのデータをn個分回転させる	deq.rotate(n)
実数の天井を計算する	math.ceil(x)
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
サポートベクターマシンを用いて回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ダークターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
文字列からISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: スチールブルー色を使う	color = 'steelblue'
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
文字列が全て空白文字からなるか	s.isspace()
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列を空白で最後から区切る	s.rsplit()
整数nの二進数表現	bin(n)
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
データ列がどの程度、分散しているか見る	ds.var()
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームの列の名前の一覧	df.columns
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
両端キューが空か調べる	len(deq) == 0
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
Pandasで、データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列を部分文字列で分けた時の後半の文字列を使う	s.partition(sub)[-1]
線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
option: フローラルホワイト色を使う	color = 'floralwhite'
グラフの色を淡くする	sns.set(pallete='muted')
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データ列の欠損値を平均に設定する	ds.fillna(ds.mean())
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
配列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
リストとリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
データフレームを複数の列を用いてで降順に並べる	df.sort_values(by=column, ascending=False)
パスのセパレータ記号	os.sep
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
nわるn2	n / n2
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
逆順のキュー	reversed(deq)
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
行列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
三変数の最大値	max(x, y, z)
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
カラムを丸めて、整数型にする	ds.round().astype(int)
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの列と列の相関行列スピアマンを用いて	df[[column, column2]].corr(method='spearman')
画面用にグラフを設定する	sns.set(context='notebook')
縦棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: グラフの種類を実線にする	linestyle = 'solid'
整数を文字列に変換する	str(x)
画面にグラフの用途を設定する	sns.set(context='notebook')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
二つのデータフレームを列をキーとして全結合する	pd.merge(df, df2, on=column, how='outer')
第一引数のファイル名	sys.argv[1]
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データ列とリストの散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
紺碧色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
option: 黄色色を使用する	color = 'yellow'
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
n個分両端キューの要素を右にローテンションする	deq.rotate(n)
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
option: 線を太くする	linewidth = 3.0
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
nからn2の範囲	range(n, n2)
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
シエナ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
キーがタプル上で未定義かどうか調べる	key not in aDict
データフレームの列の名前を列挙する	df.columns
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データ列の標準偏差を求める	ds.std()
rgbのポイントマーカーを配列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: 色をライムグリーンに設定する	color = 'limegreen'
ロージーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
nとn2のビット和	n | n2
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームが重複しているかどうか	df.duplicated()
データ列の中に文字列がある	ds.isin([value])
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
タプルのn番目からn2番目までの部分を取り出す	aTuple[n:n2]
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
多次元データを主成分分析として濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
データフレームの列の名前を列から文字列に変更する	df.rename(columns={column: name})
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
リストの先頭を取り除く	aList[1:]
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ビン数nでリストを等量でビン分割する	pd.qcut(aList, n)
配列の列ごとの平均値	np.mean(aArray, axis=0)
ヒストグラムを横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの正規分布に対する左右対称性を求める	df.kurt()
rgbの星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
破壊的に'A'列によってによってデータフレームをソートする	df.sort_values(by='A', inplace=True)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフの色をダークマゼンタにセットする	plt.plot(データ列x, データ列y, color='darkmagenta')
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
リストを引数として展開して出力する	print(*aList)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
エクセルファイルファイルを読み込む	pd.read_excel(filename)
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
データ列をヒストグラムで可視化する	plt.hist(データ列)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
タプルの平均	sum(aTuple)/len(aTuple)
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
２つのデータフレームを異なる列をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
カテゴリでグループ化して、にバイオリン図を用いてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
イテラブルからカウンタを作る	collections.Counter(iterable)
option: ゴールデンロッドを使用する	color = 'goldenrod'
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームのリストカラムの中にある文字列と日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
ペールグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
縦棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
option: セパレータを使わない	sep = ''
データフレームのカラムの各データ値の出現数	df[col].value_counts()
最大値・最小値の範囲で一様な疑似乱数を計算する	random.uniform(最小値, 最大値)
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
Pandasで、文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
nにn2をかけた値をnに代入する	n *= n2
横方向に２つのデータフレームをマージする	pd.merge(df, df2)
正規表現を用いる	import re
列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
書き込み用に文字コードtextを用いてファイルパスを開く]	open(filepath, mode='w', encoding=text)
データフレームの中に日付データと文字列が存在するか調べる	df.isin([value, value2])
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
自然数最小公倍数	math.lcm(n, n2)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
データフレームのリストで指定したカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
文字列を改行を用いて区切る	s.splitlines()
nが2で割り切れるか調べる	n % 2 == 0
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
をモジュールを検索するパスに追加する	sys.path.append(dir)
線グラフの色をカデットブルーにする	plt.plot(データ列x, データ列y, color='cadetblue')
ヒストグラムをターコイズ色を用いて描画する	plt.hist(データ列, color='turquoise')
赤い大バツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: 青緑に色を設定する	color = 'turquoise'
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: ライムにグラフの色を変更する	color = 'lime'
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
一点鎖線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='dashbot')
文字列リストに列を変換して、部分文字列によって結合する	sub.join(map(str, iterable))
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
カウンタからゼロカウントを取り除く	+aCounter
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームの列の欠損値を直前の値で埋める	df[col].fillna(method='ffill')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
2点間のユークリッド距離	math.dist(point, point2)
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
option: アクアマリン色を使う	color = 'aquamarine'
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
行列から重複を除いた配列を作成する	np.unique(aArray)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
実数以上の最小の整数	math.ceil(x)
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
ロードされたモジュールの一覧	sys.modules
二つの文字列を辞書順で比較する	s < s2
空文字	''
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
nのn2乗	n ** n2
option: ディムグレーにフォントの色を変更する	color = 'dimgrey'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ヒートマップを使ってデータフレームの相関行列を描画する	sns.heatmap(df.corr())
JSONLファイルにSJISでデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
リストの変遷を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
配列とリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
オブジェクトをユーザ向けの文字列にする	str(obj)
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの列の平均値	df[col].mean()
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームの未入力値をxで埋める	df.fillna(x)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのNaNを50パーセンタイルに設定する	df.fillna(df.median())
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームのカラムの中に文字列と文字列があるか判定する	df[col].isin([value, value2])
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
nが負の数か調べる	n < 0
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストが空でないか調べる	len(aList) != 0
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
数列の推移を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
NULLに等しい値	None
option: 線の種類を実線に設定する	linestyle = 'solid'
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
グラフの中に枠なしの凡例を加える	plt.legend(frameon=False)
組内の要素が少なくともひとつ真かどうか調べる	any(aTuple)
集合＼集合	aSet.difference(aSet2)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
データフレームを列名リストの値によって分類する	df.groupby(columns)
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
option: スラグレーにフォントの色をセットする	color = 'slategray'
カウンタのそれぞれの値を、その回数だけ列挙する	aCounter.elements()
パープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
ふたつの関係が真部分集合	aSet < aSet2
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
タプルをn倍する	aTuple * n
データフレームのリスト列の欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
文字列を部分文字列で分けた時の前半の文字列を使う	s.partition(sub)[0]
データ列を使う	import pandas as pd
データフレームの列を最初のカテゴリーを無視してダミー変数にする	pd.get_dummies(df[column], drop_first=True)
カラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
黒いポイントマーカーをイテラブルとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
天井	math.ceil(x)
文字列がリストの要素か調べる	element in aList
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムの色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
リストの末尾を使う	aList[-1]
リストとリストについて散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
ライトシアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
データフレームを各列毎に集約して、列の個数を求める	df.groupby(column)[column2].count()
カウンタからマッピングを減らす	aCounter.subtract(aDict)
リストをダミー変数にする	pd.get_dummies(iterable)
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
二つのデータフレームを列'A'と列'B'をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
タプルの末尾	aTuple[-1]
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
ふたつのリストの積集合を使う	list(set(aList) & set(aList2))
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
上位集合か調べる	aSet.issuperset(aSet2)
複数のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
グリッド線	plt.grid(linestyle='--')
データ列が何日か調べる	ds.dt.day
option: スプリンググリーン色を使う	color = 'springgreen'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの列の値がxより大きくx2より小さいデータを選択する	df[(x < df[column]) & (df[column] < x2)]
ヒストグラムを描画する	plt.hist(データ列)
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
データ列を対数変換する	np.log(データ列)
現在のタイムスタンプ	int(time.time())
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
目盛り線	plt.grid(linewidth=3.0)
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
リストとリストについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストと配列の散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
部分文字列か調べる	sub in s
線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームのインデックスの一覧を使う	df.index
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
データフレームのリストカラムの中に文字列と文字列が存在する	df[aList].isin([value, value2])
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
グラフを明るくする	sns.set(pallete='bright')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
option: 箱髭図に平均を加える	showmeans = False
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームを各列毎にグループ化し、、列の合計を計算する	df.groupby(column)[column2].sum()
データフレームから型の列を選択する	df.select_dtypes(ty)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
黒い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: 色をダークサーモンにする	color = 'darksalmon'
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
option: 青色を使う	color = 'blue'
nがn2未満それかn3以上かどうか調べる	n < n2 or n >= n3
nとn2の値を足してnとする	n += n2
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
配列と数列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
要素ひとつのりストを得る	[element]
文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
データ列の変化を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのカラムのタイムゾーンを東京に変更する	df[col].tz_convert('Asia/Tokyo')
折れ線グラフのクロスマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームとデータフレームの列をくっつける	pd.concat([df, ds], axis=1)
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
文字列中の部分文字列をカウントする	s.count(sub)
値を双方向キューから取り除く	deq.remove(element)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
option: ライトコーラル色を使う	color = 'lightcoral'
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
双方向キューの上限を使う	deq.maxlen
データフレームを'A'列で昇順にソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
イテラブルと配列について散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを関数の値によってグループ化する	df.groupby(関数)
option: フクシアを使う	color = 'fuchsia'
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
タイムスタンプデータからn日分、引く	aDatetime - datetime.timedelta(days=n)
日付時刻データの月数	aDatetime.month
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
黒い左三角マーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
タン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
option: 白色を使う	color = 'white'
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
円プロットでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
折れ線グラフの上三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
茶色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
文字列は全て十進数字か調べる	s.isdecimal()
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
配列とリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
実数を千の位で丸める	round(x, -3)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
プログラムの実行を適切に終了する	sys.exit(0)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
二つの浮動小数点数が十分に近いかどうか	math.isclose(x, x2)
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
配列の要素ごとの積	np.multiply(aArray, aArray2)
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
UNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
データフレームのn行まで抽出する	df[:n]
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
文字列からformatのパターンを用いて日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームのn行目を落とす	df.drop(n, axis=0)
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームのカラムの尖度を算出する	df[col].skew()
文字列が文字列より辞書順で後か調べる	s > s2
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
第一引数で指定されたファイルの名前	sys.argv[1]
三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
リストとリストを連結する	aList + aList2
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
各列毎にデータフレームをグループ分けして、列の最大値を計算する	df.groupby(column)[column2].max()
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
縦棒グラフをモカシン色を用いて描画する	plt.bar(データ列x, データ列y, color='moccasin')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列の右側からタブを取り除く	s.rstrip('\t')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
ライトサーモンにヒストグラムの色をセットする	plt.hist(データ列, color='lightsalmon')
ファイルパスを開いて]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ファイルパスを書き込み用にBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
部分文字列かどうか調べる	sub in s
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
rgbの丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
日付時刻データが水曜日か	aDatetime.weekday() == 2
集合の補集合	aSet.difference(aSet2)
文字列の無限なイテラブル	itertools.repeat(element)
データフレームを複数の列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
データフレームから型の列のみ選択する	df.select_dtypes(ty)
シャルトリューズにヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームのカラムのNaNをメディアンに設定する	df[col].fillna(df[col].median())
フクシア色としてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
回帰分析をSDGで行う	model = sklearn.linear_model.SGDRegressor()
データフレームのn行目を削除する	df.drop(n, axis=0)
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
双方向キューの末尾から要素を取り除く	deq.pop()
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
辞書にキーが存在していない時、要素を追加する	aDict.setdefault(key, element)
ピアソンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
データフレームを列ごとにグループ分けし、、グループ毎の分散を求める	df.groupby(column).var()
データフレームのカラムの月	df[col].dt.month
スタック中の要素の出現数を数える	deq.count(element)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
データフレームを'A'列と'B'列によってグループ化する	df.groupby(['A', 'B'])
データフレームのカラムを100の位で丸める	df[col].round(-2)
全ての８進数字	string.octdigits
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
散布図をダークバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
黄緑色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: 線種を破線に変更する	linestyle = 'dashed'
集合から別の集合を全て除去する	aSet.difference_update(aSet2)
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
インデックスによってデータフレーム全体をソートする	df.sort_index()
日付データが日曜日かどうか調べる	aDate.weekday() == 6
データ列の未入力値を最小値に設定する	ds.fillna(ds.min())
コーパスのバージョン	version = 'wcce2022-0.1'
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
JSONLファイルにBOMを付けてデータフレームを書き込む	df.to_csv(filename, encoding='utf_8_sig')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: マーカーを星に変更する	marker = '*'
1文字だけ標準入力から読み込む	sys.stdin.read(1)
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
三自然数の最小公倍数を求める	math.lcm(n, n2, n3)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
リストとリストについて散布図を描いて、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームのリスト列が正規分布からどの程度、尖っているか見る	df[aList].skew()
辞書からカウンタを作る	collections.Counter(aDict)
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
縦棒グラフを小麦色色を使って描画する	plt.bar(データ列x, データ列y, color='wheat')
ValueMapでデータフレームのカラムの値をまとめて置き換える	df[col].replace(ValueMap)
ラインを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
複数の列によってによってデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
タプルをひとつ置きに取り出す	aTuple[::2]
ファイルからの入力ストリームを使う	open(filepath)
グラフの目的をスライドに設定する	sns.set(context='talk')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフの▽印の色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
nがn2より大きいかどうか調べる	n > n2
xでデータ列のNaNを埋める	ds.fillna(x)
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
option: 印をバツに変更する	marker = 'x'
データフレームの中にがあるか	df.isin([value])
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
部分文字列が部分文字列で開始する	s.startswith(sub)
nをn2で整数除算する	n // n2
option: コーラル色を用いる	color = 'coral'
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データ列をヒストグラムにする	plt.hist(データ列)
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
本日の年数	datetime.datetime.today().year
数値を両端キューの左に追加する	deq.appendleft(element)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
標準エラーを使う	sys.stderr
データフレームを列で並べ、、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
最後の列をデータフレームから除く	df[df.columns[:-1]]
二つの列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
option: ライトイエロー色を使う	color = 'lightyellow'
データフレームのリストカラムの中に文字列とが存在するか	df[aList].isin([value, value2])
ミディアムアクアマリン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームのカラムを10の位で丸める	df[col].round(-1)
Pandasで、データ列のエポック秒からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
上位集合もしくは等しいか調べる	aSet > aSet2
全要素を0で初期化した配列	np.zeros(要素数)
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
縦棒プロットをプロットし、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
数を文字列にする	str(x)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
赤いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
実行をここで終える	sys.exit()
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
nがn2で割り切れないか	n % n2 != 0
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
カタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
クラス分類の偽陽性をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ファイルがない	not os.path.exists(filepath)
部分文字列で文字列の開始位置以降が始まるか確認する	s.startswith(sub, start)
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
数式のパラメータの解を方程式として算出する	sympy.solve(e, z)
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
nullに等しい値	None
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
option: ダークバイオレットを使用する	color = 'darkviolet'
実数の自然対数	math.log(x)
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
ファイルパスを文字列の示す文字コードを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
列をベクトルに変換する	np.array(iterable)
実数の指数を算出する	math.frexp(x)[1]
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
日付データが日付データより先か調べる	aDate < aDate2
option: 四角マーカーを使用する	marker = 's'
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
無限にnからカウントアップする	itertools.count(start=n)
数式の微分を求める	sympy.diff(e)
predicateFuncを適用したとき真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
二次元タプルをフラット化する	sum(aTuple)
耐火レンガにヒストグラムの色を指定する	plt.hist(データ列, color='firebrick')
カウンタの最頻出な項目	aCounter.most_common()[0]
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
配列にはいくつ要素があるか調べる	aArray.size
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
マッピングからキーで指定された項目をポップする	aDict.pop(key)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
ビン数nでデータフレームの中の列を分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
オブジェクトはバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
JSONファイルのfをデータに変換する	json.load(fin)
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: シーグリーン色を使う	color = 'seagreen'
文字列の右側から改行を取り除く	s.rstrip('\n')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
nがn2より大きいか	n > n2
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
深紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: レモンシフォンに色を指定する	color = 'lemonchiffon'
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
ヒストグラムを描き、、ビン数を設定する	plt.hist(データ列, bins=区関数)
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
xの印字可能な文字列	ascii(x)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
ハッシュ値	hash(x)
二つの文字列は同じか調べる	s == s2
実数の正弦の逆数	math.asin(x)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
データフレームから型リストで指定されたデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームから指定されたデータ型の列名リストを使う	df.select_dtypes(型).columns
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
xが一桁の数か調べる	-9 <= x <= 9
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
2数の最も小さい値を求める	min(x, y)
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
実数のコサインの逆数	math.acos(x)
eの実数乗	math.exp(x)
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
option: シアンにグラフの色を設定する	color = 'cyan'
nとn2の論理積	n & n2
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
行列の行ごとの平均値	np.mean(aArray, axis=1)
配列の差	aArray - aArray2
nがn2の倍数でないか	n % n2 != 0
文字列がリストの要素	element in aList
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのカラムの平均値	df[col].mean()
縦棒グラフをスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
表データの行の一覧	df.index
データフレームを列の値毎に集計して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
セットが空	len(aSet) == 0
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームの列の中に文字列と文字列が含まれるか調べる	df[col].isin([value, value2])
option: 値を置き換える	inplace = True
option: パールバイオレットレッドを用いる	color = 'palevioletred'
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
淡いピンク色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
option: グラフの色をアクアに設定する	color = 'aqua'
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
option: レベッカパープル色を使う	color = 'rebeccapurple'
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: サドルブラウンを使う	color = 'saddlebrown'
データフレームを'A'列によってグループ化する	df.groupby('A')
日付データが土曜日か調べる	aDate.weekday() == 5
実数の正弦	math.sin(x)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
改行で区切って二つの変数をプリントする	print(value, value2, sep='\n')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
今日が木曜日か	datetime.datetime.today().weekday() == 3
データフレームを使う	import pandas as pd
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
多次元データをSVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
文字列を最後の部分文字列で分けた時の前半の文字列	s.rpartition(sub)[0]
データフレームを各列と列の組み合わせ毎に分類して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ダークグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
行列積	np.matmul(aArray, aArray2)
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
要素をキューにenqueueする	deq.appendleft(element)
option: グラフの色をスカイブルーに変更する	color = 'skyblue'
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: グラフの種類を点線に変更する	linestyle = 'dotted'
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
配列を転置する	aArray.T
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
実数から実数を引く	x - y
点線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
散布図を黒い▼マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
二つのオブジェクトは同じ参照か調べる	obj is obj2
ペルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
データ列を小数点以下n桁で丸める	ds.round(n)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
三つのリストを順にプリントする	print(value, value2, value3)
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
実数の二進対数	math.log2(x)
両端キューの大きさ	len(deq)
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
双方向キューからポップする	deq.pop()
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
三二ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int16)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ボックスチャートでリストを描画する	plt.boxplot(データ列)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
等量でビン数nでリストをビン分割する	pd.qcut(aList, n)
データフレームの重複を見る	df.duplicated()
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
モデルの残差を計算する	目的変数 - model.predict(説明変数)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
データフレームを二つの列でソートする	df.sort_values(by=['A', 'B'])
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
リストの先頭の要素	aList[0]
一点鎖線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
行列の行ごとの最小	np.min(aArray, axis=1)
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図でデータフレームの列をプロットする	sns.scatterplot(data=df, x='列名', y='列名')
option: 先頭の行をヘッダに設定する	header = 0
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
アンサンブル学習として回帰分析をする	sklearn.ensemble.VotingRegressor()
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
双方向キューに値をエンキューする	deq.appendleft(element)
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームのカラムの中にいくつが含まれるか数える	df[col].isin([value]).sum()
option: グラフの色をホットピンクに設定する	color = 'hotpink'
JSON形式のファイルを読み込んで、dataとする	data = json.load(fin)
半透明の破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
辞書から最後の項目をポップする	aDict.popitem()
貝殻色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
昇順に二つの列によってデータフレームをソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
グラフの描画でパステル調にテーマを用いる	sns.set(pallete='pastel')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
アルファベットの小文字を全部使う	string.ascii_lowercase
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
両端キューの末尾から要素を取り除く	deq.pop()
十六進数字を全部使う	string.hexdigits
データフレームの列がx以上かつx2未満のデータを取り出す	df[(x <= df[column]) & (df[column] < x2)]
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
イテラブルから重複を取り除く	set(iterable)
実数の逆双曲線余弦	math.acosh(x)
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
データフレームの中に存在する日付データと日付データの合計を求める	df.isin([value, value2]).sum()
浮動小数点数の小数点以下を丸める	round(x)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
黒い三角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
真上位集合か調べる	aSet > aSet2
正弦の逆数	math.asin(x)
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
nが一桁の整数か調べる	-9 <= n <= 9
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ダークグリーン色を使う	color = 'darkgreen'
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
列とシーケンスをつなぐ	itertools.chain(iterable, iterable2)
文字コードを文字にする	chr(unicode)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
既存のファイルを追加できるようにSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
色名をからコードにする	matplotlib.colors.cnames[色名]
ファイルのフォルダ名	os.path.dirname(filepath)
リストとイテラブルを連結する	itertools.chain(iterable, iterable2)
浮動小数点数を実数で割った余り	x % y
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
要素を双方向キューにスタックする	deq.append(element)
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: 淡いピンク色にフォントの色を設定する	color = 'lightpink'
全ての空白文字	string.whitespace
データフレームのリストカラムの中に存在するの合計を数える	df[aList].isin([value]).sum()
option: バイナリ書き込みモードを使う	mode = 'wb'
整数nがタプルのどれかか調べる	n in aTuple
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ピアソン積率相関係数でデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='pearson')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
箱髭図をプロットして、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
プロットで使うフォントを指定する	sns.set(font=フォント名)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
x,yの複素数を求める	complex(x, y)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
日付時刻データからn日分、引く	aDatetime - datetime.timedelta(days=n)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
option: フォントの色をシスルに設定する	color = 'thistle'
リストとデータ列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
データ列とリストの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
データ列の柱状図を描画する	plt.hist(データ列)
データフレームの列の名前一覧で指定された列を消す	df.drop(columns, axis=1)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
赤い星マーカーをデータ列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 線の種類を破線に設定する	linestyle = 'dashed'
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
文字列を白色にする	f'\033[37m{value}\033[0m'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
カラムの欠損値をメディアンに設定する	ds.fillna(ds.median())
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
nの無限数列	itertools.repeat(n)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
option: レモンシフォンを使う	color = 'lemonchiffon'
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
データフレームの中にいくつ日付データが含まれるか数える	df.isin([value]).sum()
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームの列を最初のカテゴリーを除外してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
nをn2だけ増加させる	n += n2
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ダークスレートブルーにフォントの色を指定する	color = 'darkslateblue'
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームとしてエクセルデータファイルを読み込む	pd.read_excel(filename)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
リストを分割数nで分割する	pd.cut(aList, n)
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
マッピングからカウンタを作る	collections.Counter(aDict)
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
タプルを反転する	reversed(aTuple)
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
文字列をアンダーライン付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
ミディアムオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データ列はどの程度分散しているか見る	ds.var()
文字列がリストに含まれないか	element not in aList
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
option: 追加モードに変更する	mode = 'a'
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
スピアマン順位相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
option: 三角マーカーを描画する	marker = '^'
最初のプログラムを書く	print('Hello World')
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
プロットの描画で濃く色を使用する	sns.set(pallete='deep')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
折れ線グラフの色をマゼンタにする	plt.plot(データ列x, データ列y, color='magenta')
双方向キューを空にする	deq.clear()
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームをグループ化し、各列に対し最小値を計算する	df.groupby(column)[column2].min()
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
文字列の先頭だけ大文字化する	s.capitalize()
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
縦方向に二つのデータフレームを一つにする	pd.concat([df, df2], axis=0)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: グレーにグラフの色を指定する	color = 'gray'
カウンタの正の数だけ残す	+aCounter
option: ライム色を使う	color = 'lime'
ふたつのマップを結合する	aDict | aDict2
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
Pandasのバージョンを表示する	print(pd.__version__)
書式fmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
表データから重複を削除する	df.drop_duplicates()
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategray')
プロットをパステル調にする	sns.set(pallete='pastel')
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
データフレームの列を落とす	df.drop(column, axis=1)
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
rgbの大バツマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
マッピングをJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
散布図をrgbの丸マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのリスト列は正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
色付きの一点鎖線を用いてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
三変数の最小値	min(x, y, z)
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
実数を万の位で丸める	round(x, -4)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムの歪度を求める	df[col].kurt()
関数によってデータフレームをまとめたグループ	df.groupby(関数)
組を引数として展開して出力する	print(*aTuple, sep=',')
配列と数列について散布図を描いて左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
辞書のキーの一覧	aDict.keys()
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: グラフの色を濃い青に設定する	color = 'darkblue'
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データ列の欠損値を前の値で補う	ds.fillna(method='ffill')
キーが辞書に存在するか調べる	key not in aDict
文字列は全て印字できるかどうか調べる	s.isprintable()
JSONLファイルにデータフレームを小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
組のn番目以降の部分を抽出する	aTuple[n:]
破壊的にデータフレームから重複を削除する	df.drop_duplicates(inplace=True)
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
Pandasで、データフレームのcollのUNIX秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
プログラムの実行を正しく終了する	sys.exit(0)
２つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
option: 下三角印を加える	marker = 'v'
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
グラフで使える色名の一覧	matplotlib.colors.cnames
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
アルファベットの小文字列	string.ascii_lowercase
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
重複していない行だけを抽出する	df[not df.duplicated(keep=False)]
縦棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
再帰の上限を上げる	sys.setrecursionlimit(1000000)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
整数nを二進表記に変換する	bin(n)
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
文字列を空白で分割し、文字列リストに変換する	s.split()
オブジェクトのオブジェクト識別子を使う	id(obj)
option: パウダーブルー色を使う	color = 'powderblue'
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
散布図のクロス印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの列の種類	df.info()
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
集合をイミュータブルなセットに変換する	frozenset(aSet)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
行列の要素ごとの積	np.multiply(aArray, aArray2)
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
ライトスレイグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
option: グラフの色を紺碧に設定する	color = 'azure'
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列の母標準偏差を求める	ds.std(ddof=0)
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
列名を指定された列の名前一覧に置き換える	df.columns = columns
散布図をrgbのダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
ヒストグラムの色をピンクにセットする	plt.hist(データ列, color='pink')
データ列の中の欠損値の合計を数える	ds.isna().sum()
option: タンを使用する	color = 'tan'
実数の双曲線余弦の逆数を求める	math.acosh(x)
データフレームを丸めて、整数型にする	df.round().astype(int)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
リストとリストの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: モカシン色を使う	color = 'moccasin'
データフレームを列毎に集計して、列挙する	[(name, group) for name, group in df.groupby(column)]
空のガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
Pandasで文字列のUNIX時間からdatetime64型にする	pd.to_datetime(s, unit='s', utc=True)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
両端キューを空にする	deq.clear()
JSONLファイルにヘッダを付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
データ列をインポートする	import pandas as pd
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
文字列を式として評価する	eval(s)
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
散布図の▽印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: マーカーをクロスに変更する	marker = 'x'
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
配列とリストの散布図を描き、、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
グラフの色を濃くする	sns.set(pallete='deep')
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームから指定された列を抽出する	df[[column]]
option: エンコーディングを文字コードtextに設定する	encoding = text
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
回帰分析を多層パーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データ列を使う	import pandas as pd
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームのカラムを百の位で丸めて整数型にする	df[col].round(-2).astype(int)
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ふたつの集合の積集合	aSet.intersection(aSet2)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
nがn2以下	n <= n2
イテラブルとリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
t-SNEとして多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
連立方程式の解を求める	sympy.solve([e, e2])
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームのリスト列の値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
option: BOM付きを使う	encoding = 'utf_8_sig'
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
nが偶数か調べる	n % 2 == 0
ファイル全体を行単位で分割して読む	f.readlines()
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
黒い四角マーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
黒い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの行と列を入れ替える	df.T
回帰モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームを複数の列で大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
データ列のタイムゾーンを東京に変更する	ds.tz_convert('Asia/Tokyo')
データフレームの未入力値を最小値に指定する	df.fillna(df.min())
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
カラムを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
二進文字列を整数に変換する	int(s, 2)
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
カウンタの全数	aCounter.total()
option: ダークグレー色を使う	color = 'darkgray'
nの八進数表現	oct(n)
部分文字列で文字列を二分する	s.partition(sub)
数列とリストについて散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
EUCで追加できるようにファイルを開く]	open(filepath, mode='a', encoding='euc_jp')
option: スノー色を使う	color = 'snow'
グラフで使うフォントを指定する	sns.set(font=フォント名)
データフレームのリストカラムの尖度	df[aList].skew()
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
3変数の最小値を求める	min(x, y, z)
回帰モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
option: デピンク色を使う	color = 'deeppink'
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
nを十六進表現に変換する	hex(n)
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
イテラブルの全順列	itertools.permutations(iterable)
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
列の各データは何回出現するか調べる	df[col].value_counts()
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
実線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
オプションで、標準エラーに出力する	file = sys.stderr
フローラルホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
要素が集合の要素でないかどうか調べる	element not in aSet
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
表データを見る	df.head()
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図の右三角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
日付を使う	import datetime
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: マーカーを四角に変更する	marker = 's'
option: ライトスレイグレー色を使う	color = 'lightslategray'
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
黒いクロス印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図をポイント印を使って描画する	plt.scatter(データ列x, データ列y, marker='.')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
文字の文字コードを使う	ord(ch)
ユーザから入力される	int(input())
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列が全てアルファベットか	s.isalpha()
データ列の偏りを平方根変換する	np.sqrt(データ列)
option: 下三角マーカーを描画する	marker = 'v'
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
両端キューの最大長	deq.maxlen
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
散布図のクロス印の色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
セットから別の集合を全て取り除く	aSet.difference_update(aSet2)
データフレームのリスト列の相関行列ケンドール順位相関係数としてを算出する	df[aList].corr(method='kendall')
データフレームの欠損値を平均に指定する	df.fillna(df.mean())
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
複数の列の値ごとにデータフレームを集約して列挙する	[(name, group) for name, group in df.groupby(columns)]
コマンドフラグの状態	sys.flags
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
リスト内の要素が少なくともひとつ真か調べる	any(aList)
文字列が英数字か調べる	s.isalnum()
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
option: 淡いピンク色を使う	color = 'lightpink'
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
カウンタの上位をリストとして得る	aCounter.most_common(k)
実数の双曲線正接の逆数	math.atanh(x)
option: シャルトリューズ色を使う	color = 'chartreuse'
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームをインデックスを用いてソートする	df.sort_index()
nが正の整数か調べる	n > 0
データフレームのカラムの未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームを各列と列の組み合わせ毎に分類して個数を求める	df.groupby([column, column2], as_index=False).count()
散布図のダイアモンド印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムが何年か見る	df[col].dt.year
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
平均と標準偏差から疑似乱数を算出する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
青い点線で数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
year年month月の日付	datetime.date(year=year, month=month, day=1)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
predicateFuncが真になる列の要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
文字列を変数にする	sympy.Symbol(s)
タプルの値を列挙する	aDict.values()
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームを列によってグループ化し、、それぞれのグループごとの分散を求める	df.groupby(column).var()
実数が正の数	x > 0
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームを破壊的に'A'列と'B'列によってによって並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
行列の行列積	np.matmul(aArray, aArray2)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
２つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: グラフの色を暗い赤に設定する	color = 'darkred'
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
グリッド線を黄色くする	plt.grid(color='y')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
折れ線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
プロットの中の縦軸に軸名を付ける	plt.ylabel('y軸ラベル')
option: グラフの色をサーモンに変更する	color = 'salmon'
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
リストをタプルに変換する	tuple(aList)
option: フォントの色をライトグリーンにする	color = 'lightgreen'
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
パールゴールデンロッドにヒストグラムの色をセットする	plt.hist(データ列, color='palegoldenrod')
度数分布図の描いて、正規化する	plt.hist(データ列, density=True)
論文にプロットの使途を設定する	sns.set(context='paper')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
ヒートマップを使ってデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
データフレームの中で何行重複するか確認する	df.duplicated().sum()
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
t-SNEで多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ハローワールドとプリントする	print('Hello World')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データ列を10の位で丸める	ds.round(-1)
二つの列によってで降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
option: ライトシアンにフォントの色を設定する	color = 'lightcyan'
データ列の中にある文字列の合計をカウントする	ds.isin([value]).sum()
文字列は組に含まれるかどうか調べる	element in aTuple
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
option: ペルーにグラフの色を指定する	color = 'peru'
option: オレンジ色を使う	color = 'orange'
option: オレンジレッド色を使用する	color = 'orangered'
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
データフレームのグループごとの最大値	df.groupby(column).max()
リストとイテラブルについての散布図に補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ファイルからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
option: ラベンダー色を使う	color = 'lavender'
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
時間をインポートする	import time
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
漢字が文字列にあるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
実数が正の数か	x > 0
文字列の先頭から余分な空白を取り除く	s.lstrip()
最頻値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mode().iloc[0])
データフレームの分散	df.var()
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
２つのデータフレームを列をキーとして内部結合する	pd.merge(df, df2, on=column, how='inner')
改行なしに値をプリントする	print(value, end='')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
データ列の標本標準偏差を求める	ds.std()
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
xでデータ列の欠損値を埋める	ds.fillna(x)
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
option: サドルブラウンにフォントの色を変更する	color = 'saddlebrown'
データフレームから重複を削除する	df.drop_duplicates()
折れ線グラフのクロス印の線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
配列とリストの散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームを列に集約して、それぞれのグループごとの個数を求める	df.groupby(column).count()
辞書のキーに対応した値	aDict.get(key)
リストとイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
データフレームのカラムの最頻値を算出する	df[col].mode()
option: グラフの色をサーモンに設定する	color = 'salmon'
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
シーケンスを2回あわせた直積	itertools.product(iterable, repeat=2)
現在が何分か知る	datetime.date.today().minute
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
空のリスト	[]
データフレームの尖度	df.skew()
デックのn番目に要素を挿入する	deq.insert(n, element)
コマンド引数を列挙する	sys.argv[1:]
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
線形モデルの切片を使う	model.intercept_
option: 色をスレートブルーに設定する	color = 'slateblue'
option: 印の線幅を変更する	markeredgewidth = 2.5
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
分子と分母から分数を作成する	fractions.Fraction(分子, 分母)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: 決定木の最大深さを設定する	maxdepth = n
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
両端キューが空か判定する	len(deq) == 0
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: 赤を使う	color = 'red'
ダークレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの先頭n行	df.head(n)
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
現在の秒数	datetime.date.today().second
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
ファイルパスをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
イテラブルのイミュータブルなセットを作る	frozenset(iterable)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの値が欠損値か調べる	df.isna()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
部分文字列を文字列の接頭辞からエラーなく取り除く	s.removeprefix(sub)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
ファイルの絶対パス	os.path.abspath(filepath)
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
別の文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
赤い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
整数nのバイト長	(n.bit_length() + 7) // 8
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
赤い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
日付データが金曜日かどうか	aDate.weekday() == 4
option: ライトグレー色を使う	color = 'lightgray'
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
リストのn番目の値を削除する	del aList[n]
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
データフレームの中の欠損値を削除する	df.dropna()
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
インディアンレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
空白で文字列を分割して、整数リストにする	map(int, s.split())
文字列を左トリムする	s.lstrip()
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
option: 丸マーカーを描画する	marker = 'o'
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
文字列を全て大文字に変換する	s.upper()
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
Pandasで、データフレームのcollのUNIX時間から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームを'A'列と'B'列によって降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: グラフの色をプラムに設定する	color = 'plum'
データフレームの列を1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
二つの集合の積集合を求める	aSet.intersection(aSet2)
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
長さnのリスト	[0] * n
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
乱数シードをnで初期化する	random.seed(n)
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
赤いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
現在の時間	datetime.date.today().hour
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
文字列を空白で区切って、文字列リストに変換する	s.split()
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
黒い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
データ列の欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データ列がどの程度、分散しているか確認する	ds.var()
option: 回帰木の最大深さを指定する	maxdepth = n
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
xを浮動小数点数型に変換する	float(x)
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
文字列がタプルに含まれないか	element not in aTuple
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
ファイルを書き込みモードで開いて]、fとする	f = open(filepath, mode='w')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: グラフの色をディムグレーに指定する	color = 'dimgrey'
nとkのコンビネーション	math.comb(n, k)
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
'A'列によってによってデータフレームを降順に整列する	df.sort_values(by='A', ascending=False)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: 文字コードtextを用いる	encoding = text
データフレームのn番目の行を抽出する	df.loc[n]
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
データフレームの内で何行重複するか確認する	df.duplicated().sum()
第二コマンド引数	sys.argv[1]
nをn2分の一にする	n /= n2
option: 左三角印を加える	marker = '<'
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
文字列は十進数字か確認する	s.isdecimal()
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
三自然数の最大公約数を算出する	math.gcd(n, n2, n3)
辞書の項目数	len(aDict)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
リッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
二進数の文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
オブジェクトのハッシュ値	hash(obj)
散布図の下三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
パープルにヒストグラムの色を変更する	plt.hist(データ列, color='purple')
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 読み込みモードに変更する	mode = 'r'
プログラムの実行を強制的に終了する	sys.exit()
自然数の最大公約数	math.gcd(n, n2)
文字列の左側から空白を取り除く	s.lstrip(' ')
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
散布図をライトシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
部分文字列で文字列を二つに区切って、前半の文字列を見る	s.partition(sub)[0]
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
変数をアンダーライン付きにする	f'\033[4m{value}\033[0m'
ヒストグラムを青くする	plt.hist(データ列, color='b')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
データフレームを列によって昇順に並べる	df.sort_values(by=column, ascending=True)
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームを二つの列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
小数点数の正接の逆数を求める	math.atan(x)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
何回まで再帰ができるか、調べる	sys.getrecursionlimit()
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
等量で配列を分割数nとしてビニングする	pd.qcut(aArray, n)
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームのn行目を抽出する	df.loc[n]
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
option: バリーウッド色を使う	color = 'burlywood'
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
マッピングのコピー	dict(aDict)
本日が月曜日か確認する	datetime.datetime.today().weekday() == 0
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
十六進文字列を整数に変換する	int(s, 16)
イテラブルをカウンタに変換する	collections.Counter(iterable)
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
リストの合計値	sum(aList)
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データ列の各データが何回出現するか確認する	ds.value_counts()
環境名	sys.platform
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
実数を文字列に変換する	str(x)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
データ列が何分か見る	ds.dt.minute
option: ライトグリーン色を使う	color = 'lightseagreen'
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
option: 色を青緑に設定する	color = 'teal'
マップからキーの値を見る	aDict.get(key)
サンディーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='sandybrown')
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
黒いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
文字列が全て英字か調べる	s.isalpha()
option: ホットピンクを用いる	color = 'hotpink'
option: アクア色を使う	color = 'aqua'
CSVファイルTSVファイルをn番目の列をインデックスにして読む	pd.read_csv(filename, index_col=n)
データフレームを表示するとき、表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームのカラムの中にある文字列の個数を数える	df[col].isin([value]).sum()
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
リストを青色にする	f'\033[34m{value}\033[0m'
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
実数を実数で割る	x / y
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列がリストの要素でないか調べる	element not in aList
タプルをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
nが1、もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
辞書の値として要素が含まれているかどうか	element in aDict.values()
option: ディープスカイブルー色を使う	color = 'deepskyblue'
文字列内にアルファベットが含まれる	any(c.isalpha() for c in s)
折れ線グラフの▽マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
棒グラフをカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='khaki')
データ列を中央値でビン分割する	pd.qcut(ds, 2)
紺色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
無限な数列	itertools.count()
リストの要素を昇順に並べる	sorted(aList, reverse=True)
双方向キューに要素をプッシュする	deq.append(element)
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
リストとリストの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
最小値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].min())
浮動小数点数の自然対数	math.log(x)
本日が何年か知る	datetime.datetime.today().year
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
nからn2までのスライス	slice(n, n2)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
真上位集合	aSet > aSet2
タイムスタンプデータが何年か知る	aDatetime.year
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
イテラブルとリストの散布図を描画してその大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
ケースを無視して前もってパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
実数の双曲線正接を求める	math.tanh(x)
実数を二乗する	x ** 2
文字列の終了位置より前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
option: インデックスを自動的な連番に設定する	index_col = None
折れ線グラフの色をゴールドにセットする	plt.plot(データ列x, データ列y, color='gold')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
文字列は全て識別子名かどうか	s.isidentifier()
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
カウンタの正の数のみ残す	+aCounter
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
タンジェントの逆数	math.atan(x)
データ列の標本標準偏差	ds.std()
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムは正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
リストの折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ダークゴールデンロッド色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
黄色で数値を出力する	print(f'\033[33m{value}\033[0m')
ファイルのファイルサイズ	os.path.get_size(filepath)
データフレームを列でまとめたグループ	df.groupby(column)
両端キューに数値をエンキューする	deq.appendleft(element)
オブジェクトは集合型のインスタンスか調べる	isinstance(obj, set)
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
代数計算モジュールを使う	import sympy
本日をタプルにする	datetime.datetime.today().timetuple()
逆順の両端キュー	reversed(deq)
項目名が辞書に存在するか調べる	key not in aDict
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
データ列の時	ds.dt.hour
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのstart行目からend行目まで抽出する	df[start:end]
配列の散布図をプロットする	plt.scatter(データ列x, データ列y)
集合から要素を取り除く	aSet.remove(element)
ライトコーラル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
行列の行を選択する	aArray[行番号]
深紅色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
リストを改行なしに出力する	print(value, end='')
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
リストと数列について散布図を描画して下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
マッピングの値として要素が含まれているかどうか	element in aDict.values()
単位行列を初期化する	np.eye(行数, 列数)
ライムグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
線グラフをオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='orange')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ユーザの入力を整数として受け取る	int(input())
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
表データの数値を四捨五入する	df.round()
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
option: シスル色を使う	color = 'thistle'
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
nかけるn2を計算する	n * n2
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
JSON形式のファイル入力を辞書に変換する	json.load(fin)
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ファイルパスの区切り記号	os.sep
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
数式を簡略にする	sympy.sympify(e)
棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
小さい順に列名リストでデータフレームをソートする	df.sort_values(by=column, ascending=True)
データフレームのカラムの値が欠損値か	df[col].isna()
タプルの合計値	sum(aTuple)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
青い点線として数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
option: データ型を指定する	dtype = np.int32
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームのn行目をインプレイスでドロップする	df.drop(n, axis=0, inplace=True)
タプルをnから順序付けする	enumerate(aTuple, start=n)
文字の文字コード	ord(ch)
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
辞書のキーとその項目を列挙する	aDict.items()
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
縦棒プロットをプロットし、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームから一番左側の列を除く	df[df.columns[1:]]
日付時刻データの分数	aDatetime.minute
カウンタを集合に変換する	set(aCounter)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの指定した列名一覧の列を抽出する	df[columns]
大文字を全部使う	string.ascii_uppercase
現在の時間数を見る	datetime.date.today().hour
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
データフレームを昇順に列によってソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストの散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列を部分文字列で区切り、列挙する	s.split(sub)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
タプルを引数として展開して表示する	print(*aTuple, sep=',')
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
赤い三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
nの各桁の総和	sum(map(int, str(n)))
ランダムにn行をデータフレームから取り出す	df.sample(n)
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
データ列の折れ線グラフをプロットし、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
折れ線グラフをバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムのビンの数をセットする	plt.hist(データ列, bins=区関数)
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
配列の和	aArray + aArray2
集合をタプルに変換する	tuple(aSet)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
文字列をコロンを用いて分割して、列挙する	s.split(':')
データフレームを'A'列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
グラフを使う準備をする	import matplotlib.pyplot as plt
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
実数の小数点以下を丸める	round(x)
左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 三角マーカーを使う	marker = '^'
黒い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの第三四分位数	df.quantile(0.75)
タプルの項目名の一覧	aDict.keys()
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
カウンタの項目数	len(aCounter)
データフレームを列によってソートし、、下の方を取り出す	df.sort_values(columns).tail(n)
dateStringを日付データに変換する	pd.to_datetime(dateString)
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
カテゴリで色分けして、データフレームをに箱ひげ図を使って可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ゴーストホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
列のユニークな値の個数	ds.nunique()
アンサンブル学習を用いてクラス分類を行う	sklearn.ensemble.VotingClassifier()
データフレームを四捨五入して整数型にする	df.round().astype(int)
今日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
全ての句読点文字	string.punctuation
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
bとn2から成るペア	(n, n2)
折れ線グラフの上三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームのカラムを度数分布図にする	plt.hist(df[column])
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
データフレームを昇順に２つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
イテラブルとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
集合のイミュータブル版	frozenset(aSet)
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
列'A'と列'B'をキーとして二つの表を外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
整数nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
行列の列ごとの標準偏差	np.std(aArray, axis=0)
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフをミディアムスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をペルーに設定する	color = 'peru'
タプルの各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
線グラフを青い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
マッピングに辞書の項目を更新する	aDict.update(aDict2)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
データ列とリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
折れ線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームの中の未入力値がある行を削除する	df.dropna()
常用対数	math.log10(x)
分数を用いる	import fractions
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
文字列は全て印字できるか調べる	s.isprintable()
集合の濃度	len(aSet)
単位正方行列	np.identity(n)
リストの最後を使う	aList[-1]
集合から何でもいいからひとつ取り出す	aSet.pop()
実数の正接	math.tan(x)
ミディアムスレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
空白によって文字列を区切る	s.split()
リストと配列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
追加モードとしてファイルをオープンする]	open(filepath, mode='a')
実数の余弦	math.cos(x)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームを列によってグループ分けして、グループの平均値を求める	df.groupby(column).mean()
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
nがn2より小さいか調べる	n < n2
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
数式を部分分数に展開する	sympy.apart(e)
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
データフレームのリスト列の分散を算出する	df[aList].var()
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
配列をキューに変換する	collections.deque(iterable)
option: 青緑色を使う	color = 'teal'
イテラブル自身を2回あわせた直積を得る	itertools.product(iterable, repeat=2)
ヒストグラムの色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
現在の分を使う	datetime.date.today().minute
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
文字列の末尾から部分文字列を見つける	s.rfind(sub)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
データ列の中にある文字列との合計を数える	ds.isin([value, value2]).sum()
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
option: グラフの色を小麦色に設定する	color = 'wheat'
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
リストの末尾から要素を除く	aList.pop()
データ列の標準偏差	ds.std()
オブジェクトのメモリビューを求める	memoryview(obj)
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
リストと数列について散布図をプロットして、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
option: 配列のデータ型を指定する	dtype = np.int32
Pandasで、書式としてデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームを列によってソートする	df.sort_values(by=column)
複数の列を用いてデータフレームを小さい順に並べ直す	df.sort_values(by=column, ascending=True)
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データ列の平均値を求める	ds.mean()
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームの指定されたカラムの名前一覧の列を選択する	df[columns]
文字列をバイト列に変換する	bytes(s)
日付と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
二つの列の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: 区切りをカンマにする	sep = ','
リストと数列についての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
カラムの欠損値を中央値に設定する	ds.fillna(ds.median())
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
本日が月曜日かどうか確認する	datetime.datetime.today().weekday() == 0
両端キューの先頭の要素を見る	deq[0]
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書の値を列挙する	aDict.values()
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームのリスト列の欠損値を平均に変更する	df[aList].fillna(df[aList].mean())
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
option: グラフの色を紺に設定する	color = 'darkblue'
縦棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームから列名を複数指定して選択する	df[columns]
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
青緑色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
タプルを小さい順にソートする	sorted(aTuple, reverse=True)
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
浮動小数点数を十の位で四捨五入する	round(x, -1)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームの列と列の相関行列	df[[column, column2]].corr()
データフレームの値を正規表現でreplに置き換える	df.replace(pattern, repl, regex=True)
option: グラフの色を紺碧にセットする	color = 'azure'
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
n割るn2を切り上げる	(n + n2 - 1) // n2
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
標準入力から1行だけ改行を取り除いて読み込む	sys.stdin.readline().rstrip()
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
Pandasで、文字列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
2つの変数を文字列で区切って表示する	print(value, value2, sep=s)
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
データ列とリストについて散布図を描画して三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付データが水曜日か調べる	aDate.weekday() == 2
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
整数nを十六進数文字列にする	hex(n)[2:]
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
横棒グラフを描く	plt.barh(ラベル列, データ列)
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
ファイルが存在しないか確認する	not os.path.exists(filepath)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
nマイナスn2を求める	n - n2
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
列と列を連結する	itertools.chain(iterable, iterable2)
option: グラフの色をオーキッドに設定する	color = 'orchid'
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
xを文字列に変換する	str(x)
リストと配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークカーキ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
エンコーディング	sys.getdefaultencoding()
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列の変数名を数式に変換する	sympy.Symbol(s)
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
イテラブルを文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
option: クロスマーカーを用いる	marker = 'x'
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムが何秒か確認する	df[col].dt.second
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
グラフの色テーマを暗くする	sns.set(pallete='dark')
既存の配列をベースに全要素が0の配列を作成する	np.zeros_like(aArray)
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
nが無限に続く数列	itertools.repeat(n)
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
option: 四角マーカーを描画する	marker = 's'
文字列がタイトルケースか調べる	s.istitle()
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
両端キューをポップする	deq.pop()
赤い一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
リストを行列に変換する	np.array(aList)
文字列を両端キューの先頭に追加する	deq.appendleft(element)
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
リネン色としてヒストグラムを描画する	plt.hist(データ列, color='linen')
グラフからグリッド線を消す	plt.grid(False)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: エクセルデータのシートの名前をnamesに指定する	sheet_name = names
カウンタを辞書で更新する	aCounter.update(aDict)
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
プロットの横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
プラム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
折れ線グラフを赤い点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ヒストグラムの色をミディアムスプリンググリーンにする	plt.hist(データ列, color='mediumspringgreen')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
nがn2と等しいかどうか	n == n2
タプルの先頭を取り除く	aTuple[1:]
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
CSVTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
グラフの用途をポスターに指定する	sns.set(context='poster')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
柱状グラフを描画し合計を1にする	plt.hist(データ列, density=True)
変数をプリントする	print(value)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
文字列の右側から空白を除去する	s.rstrip(' ')
predicateFuncが真になるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
パレットトルコイズにヒストグラムの色を変更する	plt.hist(データ列, color='paleturquoise')
レベッカパープル色を使ってヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの色をローングリーンにセットする	plt.plot(データ列x, データ列y, color='lawngreen')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
組内の要素が少なくともひとつ真か	any(aTuple)
散布図の星マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
パールバイオレットレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
スタッキングとしてクラス分類をする	sklearn.ensemble.StackingClassifier()
option: スラッシュをセパレータで使う	sep = '/'
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
タプルが全て真か調べる	all(aTuple)
折れ線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
空の集合	set()
散布図の四角印を赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
破壊的にデータフレームを列名リストによって昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
双方向キューの末尾から値を取り除く	deq.pop()
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
リストを白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームを列によってまとめた表を使う	df.groupby(column)
数式の積分を求める	sympy.integrate(e)
２変数の最大値	max(x, y)
二つの集合が集合と互いに素	aSet.isdisjoint(aSet2)
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
環境がLinux	sys.platform.startswith('linux')
Pandasで、データフレームのカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
辞書のコピー	dict(aDict)
データフレームのリストカラムの中に含まれる日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
n掛けるn2を求める	n * n2
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
表データの列の名前一覧で指定した列を削除する	df.drop(columns, axis=1)
列によってデータフレームを集約してそれぞれのグループごとの合計を求める	df.groupby(column).sum()
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
見やすいグラフを描画する準備をする	import seaborn as sns
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
グラフの背景色を白くする	sns.set(style='whitegrid')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
option: 追加モードを用いる	mode = 'a'
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストとリストについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
シーケンスを文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
nが2で割り切れない	n % 2 == 1
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='gray')
rgbの右三角マーカーをリストとデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
表の列と列の相関行列を計算する	df[[column, column2]].corr()
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
n割るn2の切り上げ	(n + n2 - 1) // n2
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
データフレームから型リストデータ型のカラムを選択する	df.select_dtypes(include=typeList)
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
要素が集合の要素かどうか調べる	element in aSet
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
nがn2と等しいか調べる	n == n2
実行結果を紫色にする	f'\033[35m{value}\033[0m'
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
列の欠損値を平均値で置き換える	ds.fillna(ds.mean())
データフレームを列によって降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのインデックスをリセットする	df.reset_index()
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カラーバーを設定する	plt.colorbar()
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
rgbの三角マーカーをリストと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
数値の符号を同じにする	math.copysign(x, x2)
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
組中の最初の文字列を探す	aTuple.index(element)
データフレームから最初の列を消す	df[df.columns[1:]]
文字列の両端から不要な空白を除く	s.strip()
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
色付きの破線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
実数を３乗する	x ** 3
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
option: サドルブラウンにフォントの色を指定する	color = 'saddlebrown'
リスト内の要素が少なくともひとつ真	any(aList)
行列の値	aArray[行番号, 列番号]
散布図を赤い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列の両端から余分な空白と改行を取り除く	s.strip()
Pandasで、フォーマットとして文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
サブセットか	aSet.issubset(aSet2)
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
カテゴリ別で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データフレームのカラムの分散	df[col].var()
xを印字できる文字列にする	ascii(x)
コロンで区切って2つの変数をプリントする	print(value, value2, sep=':')
データフレームを'A'列を用いて降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
カウンタをリストに変換する	list(aCounter)
データフレームの中に文字列と日付データがいくつあるかカウントする	df.isin([value, value2]).sum()
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
リストの出現頻度を可視化する	plt.hist(データ列)
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
行列の累積和	np.cumsum(aArray)
option: 改行の代わりに文字列を用いる	end = s
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
項目名がマッピング上でまだ定義されていないか調べる	key not in aDict
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
リストと数列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
列によってデータフレームをソートし、、下の方を取り出す	df.sort_values(columns).tail(n)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
数値を部分分数として展開する	sympy.apart(e)
文字列内にアルファベットがあるか調べる	any(c.isalpha() for c in s)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
コーンズシルク色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列内に大文字があるか調べる	any(c.isupper() for c in s)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
ランダムに重複ありでn行をデータフレームからサンプリングする	df.sample(n, replace=True)
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
実数を切り上げて整数に変換する	math.ceil(x)
リストと配列の散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 行列のデータ型を指定する	dtype = np.int
クロス印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
リストのn番目の	aList[n]
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
エクセルファイルファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
実数の余弦の逆数	math.acos(x)
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームで、列の重複を確認する	df.duplicated(subset=column)
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
オプションで、標準エラーを出力にする	file = sys.stderr
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: グラフの色をライムに変更する	color = 'lime'
二つ並べてリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
カウンタを多い順番に列挙する	aCounter.most_common()
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
改行なしに二つの変数を出力する	print(value, value2, end='')
データフレームから指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
n回文字列が続く列を求める	itertools.repeat(element, n)
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
option: フォントの色をやわらかい青に設定する	color = 'cornflowerblue'
option: グラフの種類を点線に設定する	linestyle = 'dotted'
option: グレー色を使う	color = 'gray'
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
ヒストグラムを真紅色として描画する	plt.hist(データ列, color='crimson')
列を用いてデータフレームをグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
nからn2の値を引いてnに代入する	n -= n2
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
ダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
回帰木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
リストを引数として展開して表示する	print(*aList)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
ファイル全体を行単位で分割して読み込む	f.readlines()
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
マッピングに項目名ワード引数で更新する	aDict.update(**kwargs)
データフレームの中の列を等間隔でn個にビニングする	pd.cut(df[col], n)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
option: ミントクリーム色を使う	color = 'mintcream'
option: namesをカラム名にする	names = names
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: アイボリー色を使う	color = 'ivory'
x座標の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: グラフの色をビスクに設定する	color = 'bisque'
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
主成分分析を用いて多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
昇順にタプルの値をソートする	sorted(aTuple, reverse=True)
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
ふたつの集合は互いに素か	aSet.isdisjoint(aSet2)
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: マーカーの色を変更する	markerfacecolor = '#800080'
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列をファイルに書き込む	f.write(s)
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
無限数列	itertools.count()
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを関数の値によってグループ化し、要約統計量を計算する	df.groupby(関数).describe()
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: ホワイトスモークを使う	color = 'whitesmoke'
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
オブジェクトのオブジェクト識別子	id(obj)
ネイピア数	math.e
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
ふたつの集合は共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
データフレームの列のpercent分位数を求める	df[col].quantile(percent/100)
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームを列の値によってグループ化する	df.groupby(column)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: 貝殻色を用いる	color = 'seashell'
データフレームの中で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
option: セパレータを文字列にする	sep = s
算術計算ライブラリをインポートする	import math
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ひとつでもアスキー文字が文字列内に含まれるかどうか	any(c.isascii() for c in s)
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
オブジェクトがタプルに含まれないかどうか調べる	element not in aTuple
縦棒グラフを描画して、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
箱ひげ図を描いて、平均線を追加する	plt.boxplot(データ列, meanline=True)
組の末尾のn要素を取り除く	aTuple[:-n]
option: ダイアモンドマーカーを描画する	marker = 'D'
２つの値を改行しないでプリントする	print(value, value2, end='')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
nとn2の差	n - n2
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフの色を濃い青に変更する	plt.plot(データ列x, データ列y, color='darkblue')
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
実数をn乗する	x ** n
改行を取り除いて入力ストリームを一行ずつ読み込む	f.readline()
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nがn2以下、または、n3以上	n <= n2 or n >= n3
Pandasで、データフレームのcollの数値時刻から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
リストをイミュータブルにする	tuple(aList)
値を太字にする	f'\033[1m{value}\033[0m'
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列を黄色化する	f'\033[33m{value}\033[0m'
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
リストと配列について散布図をプロットしてマーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームのリストカラムの中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
リストを境界値として列を分割する	pd.cut(ds, aList)
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
predicateFuncが真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
データフレームのカラムの欠損値を平均で置換する	df[col].fillna(df[col].mean())
データ列の変遷を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: アリスブルー色を使う	color = 'aliceblue'
ゼロ埋めされたベクトルを作る	np.zeros(要素数)
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
nが5の倍数か調べる	n % 5 == 0
標準出力を得る	sys.stdout
option: マーカーを大バツに変更する	marker = 'X'
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
リストを配列に変換する	np.array(aList)
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
文字列の最初から不要な空白を取り除く	s.lstrip()
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
データフレームの値はNaNか調べる	df.isna()
データフレームのカラムの値を正規表現でまとめて置き換える	df[col].replace(pattern, repl, regex=True)
最大値・最小値の範囲を用いて一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
option: フォントの色をゴールドにセットする	color = 'gold'
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ベクトルの差を求める	aArray - aArray2
オプションで、標準出力を出力にする	file = sys.stdout
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
カウンタ間で積集合	aCounter & aCounter2
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
タプルをミュータブルにする	list(aTuple)
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データフレームのリスト列のpercentパーセンタイル	df[aList].quantile(percent/100)
オブジェクトは文字列型か調べる	isinstance(obj, str)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データ列の折れ線プロットを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
下線付きで変数を表示する	print(f'\033[4m{value}\033[0m')
書き込みモードでファイルを開く]	open(filepath, mode='w')
option: タブをセパレータで使う	sep = '\t'
アンダーライン付きで変数をプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
セットを変更不能なセットに変換する	frozenset(aSet)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
nが1、もしくは2	n == 1 or n == 2
実数の2進対数	math.log2(x)
データ列の折れ線グラフをダイアモンド印を用いて描画する	plt.plot(データ列x, データ列y, marker='D')
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームの母標準偏差	df.std(ddof=0)
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
カテゴリ別で色分けして、データフレームのカーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
キーが辞書に存在するか調べる	key in aDict
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
散布図の星印を黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
SJISで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
要素は集合のメンバーか調べる	element in aSet
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
タプルのコピー	dict(aDict)
列を文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
イテラブルを文字列リストに変換して'改行を用いて連結する	'\n'.join(map(str, iterable))
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
オブジェクトは整数型のインスタンスか調べる	isinstance(obj, int)
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
ファイルパスからの入力ストリームを使う	open(filepath)
option: ミディアムパープル色を用いる	color = 'mediumpurple'
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
異なるカラムをキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
オブジェクトがフィールドを持つか調べる	hasattr(obj, プロパティ名)
真部分集合か調べる	aSet < aSet2
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
データフレームとデータ列を横方向に一つにする	pd.concat([df, ds], axis=1)
値の出力を改行なしに行う	print(value, end='')
線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: グラフの色を珊瑚に変更する	color = 'coral'
option: ライトスチールブルーにフォントの色をセットする	color = 'lightsteelblue'
分類モデルの正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: 色を半透明にする	alpha = 0.5
データフレームの相関行列	df.corr()
option: 色をカーキに設定する	color = 'khaki'
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
シーグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ベクトルを元に全要素が1の配列	np.ones_like(aArray)
Pandasで、文字列をdatetime64型にする	pd.to_datetime(s)
両端キューを要素を出す	deq.popleft()
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
JSONLファイルにCSVファイルとしてデータフレームを保存する	df.to_csv(filename)
現在の作業ディレクトリ	os.getcwd()
データフレームを欠損値を含めて列の値で分類する	df.groupby(column, dropna=False)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
データフレームを２つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
散布図のポイント印の色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
option: SJISを使う	encoding = 'shift_jis'
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: 四角印を使う	marker = 's'
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
データフレームの列の中に日付データがあるかどうか調べる	df[col].isin([value])
追加できるように既存のファイルをUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
データフレームを列によってソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
分割数nを用いてデータ列をビニングする	pd.cut(ds, n)
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストとリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
option: ディムグレーにグラフの色を変更する	color = 'dimgrey'
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
部分集合か調べる	aSet.issubset(aSet2)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
最適な位置に凡例を表示する	plt.legend(loc='best')
要素ひとつのタプルを作る	(element,)
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
タプル中の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
データフレームのカラムを各カテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームを'A'列と'B'列を用いてソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの列の文字列長を列として使う	df[col].str.len()
データフレームの中の欠損値が存在する行を削除する	df.dropna()
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
データ列を複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
option: グラフの色をオリーブに設定する	color = 'olive'
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
マップのキーの一覧を得る	aDict.keys()
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
大文字・小文字を無視してパターンを事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームの中の列をn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
二つの変数を同じ値にする	x = y = n
配列と数列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
データフレームのリストカラムを百の位で丸めて整数型にする	df[aList].round(-2).astype(int)
タイムスタンプデータとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
整数nを十六進表現に変換する	hex(n)
データ列が何秒か調べる	ds.dt.second
回帰モデルの決定係数を算出する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
リストの要素を逆順にする	aList[::-1]
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
カテゴリでグループ化して、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図をホワイトスモーク色を使って描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
JSON文字列を辞書に変換する	json.loads(jsonString)
rgbの丸マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
環境がWindowsかどうか	sys.platform.startswith('win32')
nとn2が等しいか調べる	n == n2
option: ライトイエローに色を指定する	color = 'lightyellow'
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
二進数の文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
文字列が全て大文字か	s.isupper()
パラメータについて数式の積分を求める	sympy.integrate(e, z)
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
option: マーカーをバツに変更する	marker = 'x'
辞書のキーを要素に設定する	aDict[key] = element
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
丸印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
イテラブルを複数並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: グラフの色をラベンダーに設定する	color = 'lavender'
xが一桁の正の数かどうか	0 <= x <= 9
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームを各カラム毎にグループ化して、カラムの平均値を計算する	df.groupby(column)[column2].mean()
最後の部分文字列で文字列を二分し、前半の文字列を使う	s.rpartition(sub)[0]
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
タプルの先頭の要素	aTuple[0]
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
リストの最初の文字列を探す	aList.index(element)
日付データは日付データと同時か確認する	aDate == aDate2
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
文字列の中の複数行対応として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを各列毎に分類して、列の平均値を算出する	df.groupby(column)[column2].mean()
データフレームの列を10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
option: 読み込む行番号をnamesで指定する	usecols = names
データ列を丸めて、整数にする	ds.round().astype(int)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: アクアを使う	color = 'aqua'
option: セパレータをスラッシュにする	sep = '/'
行列の内積を求める	np.dot(aArray, aArray2)
option: グラフの色をライトブルーに指定する	color = 'lightblue'
文字列がPythonのキーワードかどうか	keyword.iskeyword(s)
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
option: グラフの色をアイボリーに設定する	color = 'ivory'
文字列がリストに含まれないか調べる	element not in aList
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
二つのオブジェクトが等しい	obj == obj2
データフレームの欠損値をxで補う	df.fillna(x)
列ごとにデータフレームをグループ化して、標準偏差を計算する	df.groupby(column).std()
実数の常用対数	math.log10(x)
折れ線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
数式のn階微分を求める	sympy.diff(e, z, n)
列によってデータフレームをソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
折れ線グラフの上三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
三数の最小値	min(x, y, z)
データフレームの列をグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
黒い大バツマーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
タブ区切りでデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
option: グラフの色をターコイズに変更する	color = 'turquoise'
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: ハニーデュー色を使う	color = 'honeydew'
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
nが3の倍数	n % 3 == 0
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
変数について数式の積分を求める	sympy.integrate(e, z)
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
文字列は組の要素か調べる	element in aTuple
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
格子線をプロットに入れる	plt.grid(True)
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
文字列が大文字か調べる	s.isupper()
文字列中に非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
タプルの中の一番小さい値を求める	min(aTuple)
データフレームを二つの列の値によってまとめたグループ	df.groupby(['A', 'B'])
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームの列の各データ値の出現数	df[col].value_counts()
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
2を底とする小数点数の対数	math.log2(x)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
option: 欠損値を含めない	dropna = True
グラフの用途をポスターに設定する	sns.set(context='poster')
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
オブジェクトが整数	isinstance(obj, int)
データフレームは正規分布からどれだけ、尖っているか見る	df.skew()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
シーケンスからカウンタを作成する	collections.Counter(iterable)
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
option: グラフの色を貝殻に設定する	color = 'seashell'
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
数を二乗する	x ** 2
組の中の最小値	min(aTuple)
リストの最後を取り除く	aList[:-1]
整数nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
option: フォントの色をスチールブルーに変更する	color = 'steelblue'
実数を十の位で丸める	round(x, -1)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ストリームにxを文字列に変換して書き込む	f.write(str(x))
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
データ列の移り変わりを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
整数nの八進文字列	oct(n)[2:]
Pandasでデータ列を書式fmtでPandasの日付型にする	pd.to_datetime(ds, format=fmt)
option: EUCを使う	encoding = 'euc_jp'
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
option: フォントの色を茶色に指定する	color = 'brown'
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
数式を変数について微分する	sympy.diff(e, z)
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
ゼロ埋めした８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
データフレームをJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
nが一桁の数か調べる	-9 <= n <= 9
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
マッピングのキーとその値を列挙する	aDict.items()
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
option: マーカーを左三角に変更する	marker = '<'
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
option: ライトスレイグレーを使用する	color = 'lightslategrey'
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
文字列リストにイテラブルを変換して、空白で結合する	' '.join(map(str, iterable))
option: カデットブルー色を用いる	color = 'cadetblue'
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの相関行列スピアマン相関係数でを求める	df.corr(method='spearman')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
データフレームの列がxかつ列がx2であるデータを取り出す	df[(df[column] == x) & (df[column2] == x2)]
三自然数の最小公倍数	math.lcm(n, n2, n3)
文字列を最初の部分文字列で二つに区切って、残りの文字列を使う	s.partition(sub)[-1]
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
綺麗なグラフを描画する準備をする	import seaborn as sns
プラム色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
option: マーカーをダイアモンドに変更する	marker = 'D'
リストとリストについて散布図をプロットして下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列の平均値	np.mean(aArray)
データフレームを各列と列の組み合わせ毎に集約し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
文字列中にひとつでも非アスキー文字が含まれるかどうか調べる	any(not c.isascii() for c in s)
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
カウンタのユニークな項目を列挙する	list(aCounter)
リストをナンバリングする	enumerate(aList)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
option: コロンをセパレータで用いる	sep = ':'
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図の丸印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
目的変数を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
２つの文字列は等しいか調べる	s == s2
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
本日の日数	datetime.datetime.today().day
文字列を右トリムする	s.rstrip()
ダークバイオレット色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
option: ロイヤルブルーにグラフの色を変更する	color = 'royalblue'
ひとつでも非大文字が文字列中に含まれるか	any(not c.isupper() for c in s)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
日付データの月数を使う	aDate.month
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
option: スノーにグラフの色をセットする	color = 'snow'
キーがマッピングにあるか調べる	key in aDict
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
配列の累積和	np.cumsum(aArray)
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
Pandasで、データ列をPandasの日付型にする	pd.to_datetime(ds)
行列の行ごとの最大	np.max(aArray, axis=1)
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をシスルに設定する	color = 'thistle'
カウンタの項目のカウント	aCounter[element]
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データ列の値は欠損値か	ds.isna()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
オブジェクトが浮動小数点数か	isinstance(obj, float)
無限大	math.inf
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームの中で、列とカラムの重複を調べる	df.duplicated(subset=[column, column2])
配列を平坦化する	aArray.flatten()
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付時刻データは日付時刻データより後ろか	aDatetime > aDatetime2
入力ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
カウンタの最も頻出な値	aCounter.most_common()[0]
クリムゾン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
正弦を求める	math.sin(x)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
option: グラフの色をモカシンにセットする	color = 'moccasin'
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
t-SNEで多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ゼロ埋めされた三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
等しい量になるようにn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
nが1もしくは2か調べる	n == 1 or n == 2
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
データフレームの中のカラムを四分位数でビン分割する	pd.qcut(df[col], 4)
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
日付時刻データが金曜日かどうか判定する	aDatetime.weekday() == 4
データフレームの中の列を四分位数ごとにビンニングする	pd.qcut(df[col], 4)
10を底とする実数の対数を求める	math.log10(x)
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
タプルの末尾を取り除く	aTuple[:-1]
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
JSONLファイルにデータフレームをTSV形式として保存する	df.to_csv(filename, sep='\t')
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
グリッド線	plt.grid(linewidth=3.0)
折れ線グラフをクリムゾン色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
option: ８ビット整数型を使う	dtype = np.int8
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
aListn番目から要素を取り出す	aList.pop(n)
データフレームの列がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
option: バイナリ書き込み用に設定する	mode = 'wb'
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列リストを連結する	''.join(aStringList)
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: 真紅色を使用する	color = 'crimson'
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
文字列を二分する	s.partition(sep)
空白を使う	' '
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
分割数nとしてデータ列をビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
カウンタの項目一覧を使う	aCounter.keys()
option: オリベドラブを使用する	color = 'olivedrab'
データフレームの列の一覧	df.info()
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
option: 濃い青にフォントの色を設定する	color = 'darkblue'
option: ブルーバイオレット色を用いる	color = 'blueviolet'
文字列を全て小文字に変換する	s.casefold()
データフレームの指定された列を抽出する	df[column]
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
xが-9以上、9以下か	-9 <= x <= 9
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
集合から全ての要素を取り除く	aSet.clear()
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
グリッド線を黒くする	plt.grid(color='k')
折れ線グラフの下三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
実数を実数で除した余り	x % y
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
ファイルパスをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
option: 説明変数を事前に正規化する	normalize = True
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
本日の月数を使う	datetime.datetime.today().month
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
データフレームのリストカラムの未入力値を最大値に変更する	df[aList].fillna(df[aList].max())
文字列をセパレータで区切って、文字列リストに変換する	s.split(sub)
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
ライトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
変数について数式を積分する	sympy.integrate(e, z)
オブジェクトは論理値型か	isinstance(obj, bool)
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をミディアムアクアマリンにする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
箱髭図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームの列を削除する	df.drop(column, axis=1)
nからn2を引く	n - n2
縦棒グラフをアンティークホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
文字列は片仮名か調べる	('ァ' <= ch <= 'ン')
データフレームを複数の列で昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
ラインを実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームから破壊的に重複した行を消す	df.drop_duplicates(inplace=True)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
散布図を丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o')
最大長nの双方向キューをシーケンスから作る	collections.deque(iterable, maxlen=n)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
追加できるように文字列の示すエンコーディングで既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
データ列をビン分割する	pd.cut(ds, aList)
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
カウンタ間で共通部分演算する	aCounter & aCounter2
ファイルを一行ずつ読み込む	f.readline()
nがn2以下もしくはn3以上か調べる	n <= n2 or n >= n3
データフレームのリスト列の欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームの欠損値を中央値で補う	df.fillna(df.median())
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
英字の大文字を全部求める	string.ascii_uppercase
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
二進数文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ファイルパスのセパレータ記号	os.sep
珊瑚色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データフレームのカラムはどの程度、分散しているか確認する	df[col].var()
線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
配列のスカラー倍	aArray * n
データフレームのリストカラムの中の欠損値の合計を求める	df[aList].isna().sum()
データフレームのカラムの未入力値を最小値に指定する	df[col].fillna(df[col].min())
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームのカラムの欠損値を直前の値に増やす	df[col].fillna(method='ffill')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
辞書のキー一覧	list(aDict)
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
option: データ型として３2ビット整数型を使う	dtype = np.int16
逆双曲線正弦	math.asinh(x)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
表データの指定した列を抽出する	df[column]
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
エクセルデータファイルからエクセルファイルを読み込む	pd.read_excel(filename)
データフレームからランダムに一行を抽出する	df.sample()
Pythonのバージョン	sys.version
符号なし８ビット整数型のゼロ埋めした配列を作る	np.zeros(要素数, dtype=np.uint8)
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図の下三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
青い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームを行によってソートする	df.sort_index()
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
ファイルをオープンする]	open(filepath)
シーケンスを文字列リストに変換して、'改行によってつなげる	'\n'.join(map(str, iterable))
option: 線の種類を実線にセットする	linestyle = 'solid'
文字列をコロンで分割して文字列リストに変換する	s.split(':')
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
数列の推移を青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: バイナリ書き込みモードに設定する	mode = 'wb'
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
数式の展開を行う	sympy.expand(e)
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームのカラムの中央値を算出する	df[col].median()
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
ファイルパスをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
配列と数列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
最初のコマンド引数	sys.argv[1]
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
option: 欠損値は無視する	dropna = True
実数のn乗	x ** n
文字列の開始位置から終了位置までの範囲で部分文字列の登場を数える	s.count(sub, start, end)
時間を使う	import time
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
コンビネーション	math.comb(n, k)
データフレームから指定された列のみ抽出する	df[[column]]
配列とリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
nをn2で割る	n / n2
無限にシーケンスを繰り返す	itertools.cycle(iterable)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
2次元リストをflattenする	sum(aList)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
正則化付き重回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフに▽印を使用する	plt.plot(データ列x, データ列y, marker='v')
最後の部分文字列で文字列を二分し、前半の文字列を見る	s.rpartition(sub)[0]
データフレームを表示するとき、行数をnに設定する	pd.set_option('display.max_rows', n)
イテラブルを関数でフィルタする	filter(func, iterable)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
データフレームのカラムの要約統計量	df[col].describe()
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
データフレームの列の文字列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
option: 未入力値を先頭にする	na_position = 'first'
行列の各要素の積を計算する	np.multiply(aArray, aArray2)
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
データフレームを'A'列の値によって集計する	df.groupby('A')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
replに正規表現patternでまとめてデータフレームの値を置換する	df.replace(pattern, repl, regex=True)
青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
現在の再帰の最大回数を知る	sys.getrecursionlimit()
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
aListn番目から要素をポップする	aList.pop(n)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
全ての印字可能な文字	string.printable
イテラブルを多重集合に変換する	collections.Counter(iterable)
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
文字列を左寄せにする	s.ljust(文字列幅)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
option: 追加モードに設定する	mode = 'a'
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
実数を小数点以下第一位で丸める	round(x, 1)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームのカラムの欠損値を後の行の値で埋める	df[col].fillna(method='bfill')
カウンタの最も頻出な項目	aCounter.most_common()[0]
n個に配列を等間隔で分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
空行をプリントする	print()
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
グラフを画面用に変更する	sns.set(context='notebook')
青い破線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
配列の形状	aArray.shape
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ブール型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int32)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
横軸の目盛りを対数に変更する	plt.xscale('log')
タプル内の要素が全て真か調べる	all(aTuple)
ライム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
nがn2以下か確認する	n <= n2
データフレームを表示するとき列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
プロット中のフォントを変更する	sns.set(font=フォント名)
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
nがn2の倍数でないか調べる	n % n2 != 0
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
多次元データを多次元尺度構成法を用いて濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
文字列の中のパターンによるマッチを使う	re.findall(pattern, s)
データフレームの欠損値を直前の値で置き換える	df.fillna(method='ffill')
データ列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
日付時刻データがタイムスタンプデータより早いか調べる	aDatetime < aDatetime2
option: グレーにグラフの色を設定する	color = 'grey'
option: グラフの種類を破線に設定する	linestyle = 'dashed'
黒い三角マーカーを数列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: グラフの色を貝殻にセットする	color = 'seashell'
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
列の集合	set(iterable)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
オブジェクトはタプルか確認する	isinstance(obj, tuple)
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームを'A'列と'B'列で並べる	df.sort_values(by=['A', 'B'])
データフレームを二つの列の値ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列が数字か調べる	s.isdigit()
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
赤い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: オレンジレッドを用いる	color = 'orangered'
小数点数を切り上げて整数に変換する	math.ceil(x)
列によってデータフレームをグループ化して、グループごとの平均値を計算する	df.groupby(column).mean()
リストのn番目を削除する	del aList[n]
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
文字をASCIIコードにする	ord(ch)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
配列を平坦にする	aArray.flatten()
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
カウンタを集合にする	set(aCounter)
三つのデータフレームを横向きにつなぐ	pd.concat([df, df2, df3], axis=1)
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
オプションで標準出力を使う	file = sys.stdout
整数nが配列のいづれかか調べる	n in aArray
リストのオブジェクトが最初に見つかる場所	aList.index(element)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
ファイルをバイナリ書き込みモードを用いてオープンする]	open(filepath, mode='wb')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームを昇順にインデックスで並べる	df.sort_index(ascending=True)
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
列によってデータフレームをグループ化して、それぞれのグループの平均値を求める	df.groupby(column).mean()
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
数式を積分する	sympy.integrate(e)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
整数nの二進文字列	bin(n)[2:]
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
リストとリストについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
option: サーモン色を使用する	color = 'salmon'
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
TSVからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
行列の累積和を求める	np.cumsum(aArray)
データフレームを破壊的に二つの列によってによってソートする	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのリスト列の相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
リストと数列についての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
MSDを用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムが何日か確認する	df[col].dt.day
option: グラフの色をネイビーに設定する	color = 'navy'
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームをJSONLファイルにファイルを使って書き込む	df.to_excel(filename)
データフレームを二つのカラムでソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: 紺碧にグラフの色を指定する	color = 'azure'
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
nが負の数	n < 0
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
タプルをn回、連結する	aTuple * n
option: ナバホホワイト色を用いる	color = 'navajowhite'
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
データフレームのリスト列の欠損値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
プロットのx座標を対数目盛に変更する	plt.xscale('log')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
赤い破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
データフレームのリストカラムの歪度	df[aList].kurt()
データフレームの第一四分位数	df.quantile(0.25)
データ列の各値が何回出現するか確認する	ds.value_counts()
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
option: マーカーを菱形に変更する	marker = 'D'
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
実数を実数に乗算する	x * y
両端キューの先頭に要素を追加する	deq.appendleft(element)
データ列の最頻値	ds.mode()
日付時刻データはタイムスタンプデータより後ろ	aDatetime > aDatetime2
データフレームのカラムの未入力値をxに指定する	df[col].fillna(x)
ファイルパスを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
組の末尾を取り除く	aTuple[:-1]
option: 紺碧色を使う	color = 'azure'
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
rgbの大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
実数を実数で割った余り	x % y
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
SJISとして書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding='shift_jis')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字列が全て数字か判定する	s.isdigit()
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
浮動小数点数に変換する	float(x)
option: 三角印を描画する	marker = '^'
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
パラメータが無限大に近づく際の数式の極限値を計算する	sympy.limit(e, z, oo)
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
predicateFuncが真になるシーケンスの要素を求める	itertools.takewhile(predicateFunc, iterable)
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
データフレームの列の値がxの行を抽出する	df[df[column] == x]
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
nがn2の倍数でないかどうか調べる	n % n2 != 0
データフレームの列がxでない行をフィルタする	df[df[column] == x]
データフレームを各列毎にグループ化し、列の平均値を求める	df.groupby(column)[column2].mean()
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
3数の最大値	max(x, y, z)
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
こんにちは世界とプリントする	print('Hello World')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
リストを緑色でプリントする	print(f'\033[32m{value}\033[0m')
疑似乱数を生成する	random.random()
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
辞書からキーの値をエラーなく得る	aDict.get(key, None)
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
option: 淡いピンク色色を使う	color = 'lightpink'
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
双方向キューのn番目の要素	deq[n]
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームをJSONLファイルに保存する	df.to_csv(filename)
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
行列の平均値	np.mean(aArray)
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
option: ▼マーカーを使う	marker = 'v'
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
乱数シードを初期化する	random.seed()
データ列のpercent分位数	ds.quantile(percent/100)
option: マルーン色を用いる	color = 'maroon'
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
リストとリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列をビンニングする	pd.cut(ds, aList)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
日付データと日付データの時間差	aDate - aDate2
プラム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームを表示するとき列数を変更する	pd.set_option('display.max_columns', n)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームのリストカラムの値をまとめてValueMapで置き換える	df[aList].replace(ValueMap)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの全列を散布図で可視化する	sns.pairplot(df)
コマンドの第二引数を知る	sys.argv[1]
ファイルとfilenameを結合する	os.path.join(filepath, filename)
データフレームのリストカラムの平均値を算出する	df[aList].mean()
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
ダーク・スラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムを２つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームを列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
マップを複製する	dict(aDict)
option: 淡い茶色にグラフの色を設定する	color = 'tan'
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategray')
グラフを描画する準備をする	import matplotlib.pyplot as plt
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
Pandasで、フォーマットfmtで文字列を日付データにする	pd.to_datetime(s, format=fmt)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ヒストグラムをダークゴールデンロッド色を使って描画する	plt.hist(データ列, color='darkgoldenrod')
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームを複数の列の値で分類して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
オブジェクトはクラスか	isinstance(obj, クラス)
文字列中に部分文字列が含まれないか調べる	sub not in s
両端キューの左側から要素を取り除く	deq.popleft()
データフレームを列で集約し、列の要約統計量を求める	df.groupby(column).describe()[column2]
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフの星印の色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: グラフの色をマルーンに設定する	color = 'maroon'
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
文字列を全て小文字に変換する	s.lower()
クラスが名前付きタプルか調べる	issubclass(C, tuple)
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
大バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ファイルを改行なしで一行ずつ読み込む	f.readline()
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
nがn2よりも小さいか調べる	n < n2
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
分類結果のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
行列の演算をする	import numpy as np
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
プロットの色をパステル調にする	sns.set(pallete='pastel')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
カテゴリでグループ化してデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
リストをマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
小数点数の双曲線正弦	math.sinh(x)
要素は集合のメンバーでない	element not in aSet
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
ミディアムオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
文字列が全てアルファベットか調べる	s.isalpha()
データフレームを列の値を用いてグループ化し、、各グループごとの件数を知る	df.groupby(column).size()
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
xの絶対値	abs(x)
option: グラフの色をシエナに設定する	color = 'sienna'
リストの要素をクリアにする	aList.clear()
フォレストグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
八進文字列を整数に変換する	int(s, 8)
ファイルをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
環境の名前	sys.platform
プログラムの実行をエラーとして終了する	sys.exit(1)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ハニーデュー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
実数が整数か調べる	x.is_integer()
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: ネイビー色を使う	color = 'navy'
データフレームのリストカラムは正規分布からどれだけ尖っているか見る	df[aList].skew()
実数のn乗	pow(x, n)
真部分集合か確認する	aSet < aSet2
両端キューの長さを制限する	collections.deque(maxlen=n)
実数のアークサインを求める	math.asin(x)
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの指定された列を配列として抽出する	df[column].values
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
双方向キューの左に列の各要素を追加する	deq.extendleft(iterable)
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ヒストグラムを白くする	plt.hist(データ列, color='w')
リストをビン分割する	pd.cut(aList, aList)
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
配列をビン分割する	pd.cut(aArray, aList)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
グラフの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
データフレームをエクセルファイル形式でJSONLファイルに保存する	df.to_excel(filename)
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
プログラムを異常止める	sys.exit(1)
散布図を黒いダイアモンドマーカーとして描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
option: フォントの色をフクシアに設定する	color = 'fuchsia'
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: ドジャーブルー色を使う	color = 'dodgerblue'
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
今日の日付時刻を見る	datetime.datetime.today()
option: シエナ色を用いる	color = 'sienna'
本日の月数	datetime.datetime.today().month
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
両端キュー中の要素のインデックス	deq.index(element)
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
Pandasで、文字列をフォーマットでPandasの日付型にする	pd.to_datetime(s, format='%Y-%m-%d')
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
二変数の最小値を算出する	min(x, y)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
日付データの年数	aDate.year
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
数列とリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
実数を整数に変換する	int(x)
昇順に２つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームの各グループごとの個数	df.groupby(column).count()
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
文字列から部分文字列を全て消す	s.replace(sub, '')
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
option: グラフの色をパープルに設定する	color = 'purple'
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
データフレームのstart行目からend行目まで取り出す	df[start:end]
本日の日付	datetime.date.today()
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
データフレームを2つの列を用いて破壊的に小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
データ列とリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
カウンタのそれぞれのキーを、そのカウントだけリストとして得る	aCounter.elements()
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
文字列がタプルに含まれないか調べる	element not in aTuple
データフレームの列の値がxより多い行を抽出する	df[df[column] > x]
文字列が全て大文字か調べる	s.isupper()
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
nの十六進表現	hex(n)
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
リスト内の要素は少なくともひとつ真か調べる	any(aList)
文字列が全て数字か調べる	s.isdigit()
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
キューの先頭のデータ	deq[0]
文字列の先頭から空白を取り除く	s.lstrip()
データフレームの中の欠損値の数を数える	df.isna().sum()
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: 文字コードtextを使う	encoding = text
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームのリストカラムの中にいくつ日付データが存在するかカウントする	df[aList].isin([value]).sum()
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
タプルにキーが存在するか	key in aDict
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
オブジェクトは辞書型のインスタンスかどうか	isinstance(obj, dict)
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
行列の行	aArray[行番号]
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
ライム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
横棒グラフをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームのリスト列を整数に四捨五入する	df[aList].round()
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
文字列が文字列リストのいづれか	s in aStringList
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
イテラブルと列のデカルト積	itertools.product(iterable, iterable2)
文字列が正規表現にマッチさせる	re.match(pattern, s)
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
option: スノー色を使用する	color = 'snow'
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
option: フォントの色をパープルに変更する	color = 'purple'
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
小数点数は無限大	math.isinf(x)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
xが-9以上、9以下か調べる	-9 <= x <= 9
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
リストと数列についての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図を菱形印で描画する	plt.scatter(データ列x, データ列y, marker='D')
二つの列によってデータフレームをソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
データフレームのカラムのNaNを最大値に変更する	df[col].fillna(df[col].max())
タプルの長さ	len(aTuple)
リストを反転する	reversed(aList)
カラーパレットを濃くする	sns.set(pallete='deep')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
日付時刻データが日付時刻データより先か調べる	aDatetime < aDatetime2
nが正の数か	n > 0
10を底とする実数の対数	math.log10(x)
変数をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
配列の各要素に加算する	aArray + aArray2
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
option: プラム色を使う	color = 'plum'
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
カラーパレットを明るくする	sns.set(pallete='bright')
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
option: パウダーブルーを使う	color = 'powderblue'
折り返しをしない	pd.set_option('expand_frame_repr', False)
あらかじめパターンをコンパイルする	re.compile(pattern)
文字列を空白で区切る	s.split()
カテゴリ別でグループ化してデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
sepを区切りとして文字列リストを結合する	sep.join(aStringList)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: 色をタンに設定する	color = 'tan'
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
1からnまでの整数列を作る	list(range(1, n+1))
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
データ列を1000の位で四捨五入して整数にする	ds.round(-3).astype(int)
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
円グラフを真円にする	plt.axis('equals')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: オレンジレッド色を使う	color = 'orangered'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
数式を数値計算する	float(e)
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
縦棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データ列の推移を青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: 色をダークターコイズに設定する	color = 'darkturquoise'
整数nの二進数表現を求める	bin(n)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図のクロス印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
要素∈集合	element in aSet
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
タプルを浅く複製する	dict(aDict)
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのカラムの欠損値を最大値にセットする	df[col].fillna(df[col].max())
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
列は正規分布からどれだけ尖っているか見る	ds.skew()
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
実行結果を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データフレームの列をインデックスに指定する	df.set_index(column)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームから型の列を抽出する	df.select_dtypes(ty)
文字列を太字にする	f'\033[1m{value}\033[0m'
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
リストを展開してプリントする	print(*aList)
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
コマンドの第一引数を知る	sys.argv[1]
カラーパレットを暗くする	sns.set(pallete='dark')
オブジェクトは集合クラスか	isinstance(obj, set)
option: 読み込みモードを使う	mode = 'r'
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
日付データの日数	aDate.day
option: シャルトリューズにフォントの色を設定する	color = 'chartreuse'
データフレームからランダムにn行を抽出する	df.sample(n)
イテラブルから双方向キューを作る	collections.deque(iterable)
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
縦棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
イテラブルとリストについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: グリーンイエロー色を使う	color = 'greenyellow'
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
ファイルパスの絶対ファイルパスを使う	os.path.abspath(filepath)
データフレームを２つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
現在が何秒か知る	datetime.date.today().second
データ列の中に文字列と文字列が含まれるかどうか調べる	ds.isin([value, value2])
二つの変数をそれぞれ定義する	x, y = i, j
列を分割数nでビン分割する	pd.cut(ds, n)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
８進数字を全部使う	string.octdigits
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
辞書を階層化する	collections.ChainMap(aDict)
option: インディアンレッド色を使う	color = 'indianred'
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
末尾の列をデータフレームから除く	df[df.columns[:-1]]
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
グラフをスライド用に設定する	sns.set(context='talk')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: タン色を使う	color = 'tan'
空白で文字列を区切り、、文字列リストに変換する	s.split()
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
デフォルトのエンコーディング	sys.getdefaultencoding()
タプルの要素をソートする	sorted(aTuple)
二つの文字列を順にプリントする	print(value, value2)
現在の時間数	datetime.date.today().hour
二つのデータフレームを結合する	pd.merge(df, df2)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
空の辞書	{}
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
数値を黄色にする	f'\033[33m{value}\033[0m'
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ファイルを追加できるように文字コードtextを用いてオープンする]	open(filepath, mode='a', encoding=text)
option: バッファリングのサイズを大きくする	buffering = 4096
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
リストとデータ列について散布図を描いて、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
各カラム毎にデータフレームを集約して、列の最小値を求める	df.groupby(column)[column2].min()
文字列を部分文字列で分割する	s.split(sub)
破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
x軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
タプルの平均値	sum(aTuple)/len(aTuple)
乱数で要素を埋めた行列を作成する	np.random.random(N)
データフレームのカラムは何月か見る	df[col].dt.month
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
データ列の日	ds.dt.day
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
集合の浅いコピー	aSet.copy()
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
リストの散らばりを図示する	plt.scatter(データ列x, データ列y)
option: 未入力値を含めない	dropna = True
データフレームの欠損値をxに設定する	df.fillna(x)
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒プロットを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
オブジェクトの属性を値に設定する	setattr(obj, プロパティ名, 値)
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを各列と列の組み合わせ毎にグループ化して、分散を算出する	df.groupby([column, column2], as_index=False).var()
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
mathをインポートする	import math
縦棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
option: マーカーの色を赤にする	markerfacecolor = 'red'
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ファイルを書き込み用に文字コードtextとしてオープンする]	open(filepath, mode='w', encoding=text)
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ふたつの集合の差集合	aSet.difference(aSet2)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
棒グラフをシーグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='seagreen')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
無限にnからstep間隔で数え上げるする	itertools.count(start=n, step=step)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームからランダムに抽出する	df.sample()
リストの最初のn要素を取り除く	aList[n:]
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
リストと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: パープル色を使う	color = 'purple'
データフレームを複数の列によってソートする	df.sort_values(by=column)
青い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームの行の一覧	df.index
nがn2よりも大きいか調べる	n > n2
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
グレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
セットから全ての要素を除く	aSet.clear()
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
データフレームのカラムの値を正規表現で一度にreplに置き換える	df[col].replace(pattern, repl, regex=True)
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームを表示するとき、データフレームをn列まで表示できるようにする	pd.set_option('display.max_columns', n)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
option: ダークシアン色を使う	color = 'darkcyan'
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
option: 星マーカーを描画する	marker = '*'
部分文字列で部分文字列が開始するか調べる	s.startswith(sub)
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
文字列に列を変換して、部分文字列によって連結する	sub.join(map(str, iterable))
リストと配列についての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの先頭	df.head()
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
プラットホームがLinuxかどうか調べる	sys.platform.startswith('linux')
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列中の部分文字列の出現をカウントする	s.count(sub)
エンディアンを使う	sys.byteorder
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
変数名をキーとして、辞書	dict(name=element)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
8進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
本日は何日か知る	datetime.datetime.today().day
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
option: 行列のデータ型を指定する	dtype = np.int32
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
リストと配列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
行列の行ごとの分散	np.var(aArray, axis=1)
option: ミディアムブルーを使う	color = 'mediumblue'
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの列の欠損値を中央値に指定する	df[col].fillna(df[col].median())
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
データフレームのカラムが何分か見る	df[col].dt.minute
ダークマゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
棒グラフをシエナ色を用いて描画する	plt.bar(データ列x, データ列y, color='sienna')
データ列が何時か見る	ds.dt.hour
浮動小数点数を小数点以下で四捨五入する	round(x, n)
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
Pandasでデータ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
option: ASCII文字に限定する	flag = re.ASCII
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
等量で列をn個に分割する	pd.qcut(ds, n)
最大値・最小値の範囲で一様な乱数を得る	random.uniform(最小値, 最大値)
タプルをnから番号付けする	enumerate(aTuple, start=n)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
option: ライトグレー色を用いる	color = 'lightgrey'
逆行列	np.linalg.inv(aArray)
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
実数を切り下げる	math.floor(x)
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
行列の列ごとの平均値	np.mean(aArray, axis=0)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
rgbの下三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
1行だけ標準入力から改行なしで読む	sys.stdin.readline().rstrip()
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
カラムのどの値が最も現れるか見る	ds.mode()
線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
日付時刻データが何曜日か知る	aDatetime.weekday()
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
実数の三乗	x ** 3
凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
配列と配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: ミディアムバイオレットレッドを用いる	color = 'mediumvioletred'
列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
キューが空かどうか調べる	len(deq) == 0
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データ列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
両端キュー中の要素をカウントする	deq.count(element)
ファイルを書き込み用にUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図をrgbの左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
二つの実行結果を順に出力する	print(value, value2)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
リストをビン数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
グレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
option: オーキッドを使用する	color = 'orchid'
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムが正規分布からどの程度尖っているか確認する	df[aList].skew()
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
n2分のn	n / n2
実線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
option: グリーンを使用する	color = 'green'
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
シアン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
文字列中の大文字を小文字に変換する	s.lower()
データフレームの列の文字列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
データ列と配列について散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
実数が正の数か調べる	x > 0
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
データフレームの複数の列を並べてボックスチャートで可視化する	plt.boxplot([df['カラム'], df['カラム']])
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
option: オールドレースにフォントの色を設定する	color = 'oldlace'
辞書のキーとその値を列挙する	aDict.items()
両端キューの先頭から要素を取り除く	deq.popleft()
データフレームをにバイオリン図を使って描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
集合にイテラブルを追加更新する	aSet.update(iterable)
黒いバツマーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
小さい方からリストを並べ変える	sorted(aList, reverse=False)
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
プロットを明るくする	sns.set(pallete='bright')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列は組の要素でないか調べる	element not in aTuple
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
辞書の値数	len(aDict)
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を算出する	df.groupby([column, column2], as_index=False).sum()
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
二次元タプルをflattenする	sum(aTuple)
有理数の分母	q.denominator
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
option: シエナにグラフの色を設定する	color = 'sienna'
カウンタの値をひとつ増やす	aCounter[element] += 1
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
option: グラフの色をダークグレーにセットする	color = 'darkgray'
青い一点鎖線としてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのカラムの中に文字列が含まれるか調べる	df[col].isin([value])
option: ペールグリーン色を使う	color = 'palegreen'
実数を実数で	x // y
小数点数の整数部	math.modf(x)[1]
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
エラーを出力する	sys.stderr
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフをシルバー色を使って描画する	plt.plot(データ列x, データ列y, color='silver')
データ列の値が欠損値か調べる	ds.isna()
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
複数行対応としてパターンで文字列を区切る	re.split(pattern, s, flags=re.MULTILINE)
散布図を△印を使って描画する	plt.scatter(データ列x, データ列y, marker='^')
n個に等間隔でリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列の次元数	aArray.ndim
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
データフレームから重複した行を削除する	df.drop_duplicates()
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
カラーバーを付ける	plt.colorbar()
リストの割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
データフレームを'A'列と'B'列でグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
集合をイミュータブルな集合に変換する	frozenset(aSet)
option: 色をラベンダーに設定する	color = 'lavender'
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
日付時刻データの時刻	aDatetime.time()
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
黒いポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
option: フォントの色をダークマゼンタに設定する	color = 'darkmagenta'
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
前の行の値でデータフレームの未入力値を埋める	df.fillna(method='ffill')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ダークオリーブグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
カウンタの項目を増やす	aCounter[element] += 1
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームをインデックスによってソートする	df.sort_index()
ドジャーブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
数が正の数か調べる	x > 0
読み込みモードでファイルをオープンする]	open(filepath, mode='r')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
データフレームの列を百の位で四捨五入する	df[col].round(-2)
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
option: ヘッダをnamesに指定する	header = names
マッピングの項目名を列挙する	aDict.keys()
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
有理数を使う	import fractions
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
データ列のヒストグラムを描画する	plt.hist(データ列)
行列式	np.linalg.det(aArray)
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
本日の日付を見る	datetime.date.today()
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
多層パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
文字列中に部分文字列が含まれるか調べる	sub in s
リストとリストについて散布図を描画し、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2])
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムを上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
実数の双曲線正弦	math.sinh(x)
データフレームを列でグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームの指定した３つの列を抽出する	df[[column, column2, column3]]
option: ホワイト色を使用する	color = 'white'
項目名がマップにあるか調べる	key not in aDict
option: グラフの色を黄色に設定する	color = 'yellow'
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
グラフをプロットする準備をする	import matplotlib.pyplot as plt
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームを列毎にグループ化して、分散を計算する	df.groupby(column).var()
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
データフレームの指定した列を配列として取り出す	df[column].values
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
集合を空にする	aSet.clear()
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
セットが空集合	len(aSet) == 0
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのカラムの日	df[col].dt.day
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
ファイルからファイル名を見る	os.path.basename(filepath)
文字列を青色にする	f'\033[34m{value}\033[0m'
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
リストとリストの散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームを列によってグループ化して、最大値を求める	df.groupby(column).max()
ベクトルの行ごとの平均	np.mean(aArray, axis=1)
カウンタのインターセクション	aCounter & aCounter2
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データ列のユニークな値の個数	ds.nunique()
データフレームのヒストグラムを横に並べて、プロットする	sns.displot(df, x='列名', col='カテゴリ名')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
option: グラフの色をスノーに設定する	color = 'snow'
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
列のユニークな要素	ds.unique()
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
グラフのデザインをよくする	import seaborn as sns
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
要素が集合に含まれないか調べる	element not in aSet
折れ線グラフの下三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: 星マーカーを用いる	marker = '*'
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームのカラムを四捨五入する	df[col].round()
数列とイテラブルの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
両端キューに要素をプッシュする	deq.append(element)
黒い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
赤い▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
読み込み用にファイルをオープンする]	open(filepath, mode='r')
タイムスタンプデータの時刻	aDatetime.time()
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
option: カデットブルー色を使う	color = 'cadetblue'
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
データでモデルを学習する	model.fit(説明変数, 目的変数)
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: 貝殻にグラフの色を指定する	color = 'seashell'
日付時刻データの年数を見る	aDatetime.year
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
本日の年	datetime.datetime.today().year
双方向キューをポップする	deq.pop()
簡単な説明をベストな位置に表示する	plt.legend(loc='best')
リストに文字列を追加する	aList.append(element)
データフレームをインデックスを付けずにJSONLファイルに書き込む	df.to_csv(filename, index=None)
option: グラフの色をパウダーブルーに変更する	color = 'powderblue'
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: ダークシアンにグラフの色を変更する	color = 'darkcyan'
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
実数に実数を加える	x + y
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを複数の列によって並べる	df.sort_values(by=column)
散布図を黒いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: マーカーの色をライムにする	markerfacecolor = 'lime'
両端キューの末尾に値を追加する	deq.append(element)
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームを大きい順に破壊的に列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
行列の列ごとの最大	np.max(aArray, axis=0)
タイムスタンプデータにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムの中にある文字列との合計を数える	df[col].isin([value, value2]).sum()
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
ミントクリームにヒストグラムの色をセットする	plt.hist(データ列, color='mintcream')
データフレームを各列毎にグループ化して、列の標準偏差を計算する	df.groupby(column)[column2].std()
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
直後の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
リストの文字列が最初に見つかるインデックス	aList.index(element)
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列を走査しパターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
文字列中に非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームとデータ列をつなぐ	pd.concat([df, ds], axis=1)
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
rangeの無限バージョン	itertools.count(start=n, step=step)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムの標本標準偏差	df[col].std()
プラム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
コレクションを用いる	import collections
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
リストと数列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
Pandasで、データ列をPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
リストが空でない	len(aList) != 0
縦方向に二つのデータフレームを一つにする	pd.concat([df, df2])
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: マーカーの色を青にする	markerfacecolor = 'blue'
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
データフレームのリストカラムの未入力値を中央値で埋める	df[aList].fillna(df[aList].median())
データフレームの列の未入力値を平均値にセットする	df[col].fillna(df[col].mean())
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームの列がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
文字列をシアンにする	f'\033[36m{value}\033[0m'
現在の秒を使う	datetime.date.today().second
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列の開始位置先に部分文字列が含まれる	s.find(sub, start) != -1
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
0からN未満までの配列	np.arange(N)
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムを珊瑚色を使って描画する	plt.hist(データ列, color='coral')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームのカラムを丸める	df[col].round()
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフをシエナ色を用いて描画する	plt.bar(データ列x, データ列y, color='sienna')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
オブジェクトのクラスを見る	type(obj)
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
トマトにヒストグラムの色をセットする	plt.hist(データ列, color='tomato')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
リストとリストについて散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
配列と列をジップする	itertools.zip_longest(iterable, iterable2)
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
カラムの正規分布に対する左右対称性を求める	ds.kurt()
リストとリストについて散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
棒グラフをゴーストホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
option: グラフの色をタンに設定する	color = 'tan'
データフレームの相関行列スピアマン相関係数でを計算する	df.corr(method='spearman')
BOM付きでファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
数式を微分する	sympy.diff(e)
実数のn乗の実数剰余	pow(x, n, y)
データフレームが重複しているか調べる	df.duplicated()
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
Pandasで、UNIX秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
option: フォントの色をスチールブルーに指定する	color = 'steelblue'
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
n2がnより大きく、かつn3未満か調べる	n < n2 and n2 < n3
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
データフレームの重複していない行	df[not df.duplicated(keep=False)]
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
option: 先頭のカラムを行に設定する	index_col = 0
数式の因数分解を行う	sympy.factor(e)
半透明の一点鎖線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
シルバー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: 左三角マーカーを描画する	marker = '<'
タイムスタンプデータは日付時刻データより前か確認する	aDatetime < aDatetime2
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
nの十六進表記を使う	hex(n)
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
option: グラフの色をスラグレーに設定する	color = 'slategray'
列によってデータフレームを並べて、上位を取り出す	df.sort_values(columns).head(n)
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
空のヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをマルーン色を用いて描画する	plt.hist(データ列, color='maroon')
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
上位集合もしくは等しいかどうか調べる	aSet > aSet2
散布図の印を四角印にする	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データ列をカテゴリデータに変換する	ds.astype(object)
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
nがn2の倍数か	n % n2 == 0
nかけるn2	n * n2
データフレームの各グループごとの最小値	df.groupby(column).min()
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
クラス分類の正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ゼロ埋めされた行列	np.zeros(行数, 列数)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ダークスラテグレー色を使う	color = 'darkslategray'
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
イテラブルをセットにする	set(iterable)
データフレームのn行目以降選択する	df[n:]
左にn個分双方向キューの要素をローテンションする	deq.rotate(-n)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データ列の中に文字列があるかどうか	ds.isin([value])
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
実数の天井	math.ceil(x)
複数のデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
データフレームを表示するとき、表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
option: フォントの色をグリーンに設定する	color = 'green'
今日の月を見る	datetime.datetime.today().month
option: ミントクリームにフォントの色をセットする	color = 'mintcream'
nがタプルのどれか	n in aTuple
option: 三２ビット整数型を使う	dtype = np.int16
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
サンディーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: 三角マーカーを加える	marker = '^'
option: 印を右三角に変える	marker = '>'
option: 改行コードをUNIXに設定する	newline = '\n'
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: バッファリングを無効にする	buffering = 0
複数の列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
ガンマ関数	math.gamma(x)
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
最大最小として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
リストの度数分布図を描画する	plt.hist(データ列)
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
option: マーカーの色を白にする	markerfacecolor = 'white'
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
実数の余弦の逆数を算出する	math.acos(x)
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategrey')
文字列内に小文字が含まれるか調べる	any(c.islower() for c in s)
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
文字列を最後から空白で区切る	s.rsplit()
ベクトルをベースにして全要素が0の行列	np.zeros_like(aArray)
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
カラーコードを用いて折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
赤い一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データ列の未入力値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
option: シスルにフォントの色を設定する	color = 'thistle'
データフレームの列がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
縦棒グラフをシスル色を使って描画する	plt.bar(データ列x, データ列y, color='thistle')
ラジアンの角度	math.degrees(x)
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
書式をargsを引数としてフォーマットする	formatText.format(*args)
データフレームをグループ化し列に対し標準偏差を計算する	df.groupby(column)[column2].std()
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
空の組	()
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
要素ひとつのりスト	[element]
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データフレームのリストカラムをValueMapでまとめて置き換える	df[aList].replace(ValueMap)
折れ線グラフに下三角印を加える	plt.plot(データ列x, データ列y, marker='v')
option: バツマーカーを使う	marker = 'x'
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
値を太文字で表示する	print(f'\033[1m{value}\033[0m')
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
文字列の先頭	s[0]
L1ノルムを使ってデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
OSがWindowsか調べる	sys.platform.startswith('win32')
Pandasのバージョンを見る	print(pd.__version__)
列によってによってデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
両端キューをリストに変換する	list(deq)
文字列内に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
リストの全順列を得る	itertools.permutations(iterable)
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
行列と同じ大きさの空ベクトルを作る	np.empty_like(aArray)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データ列を書式fmtでタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
二つのオブジェクトが等しいか調べる	obj == obj2
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
実数を切り上げる	math.ceil(x)
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
option: グラフの色をブラックに指定する	color = 'black'
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
rgbの四角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
二つのデータフレームを列'A'と列'B'をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データ列を丸める	ds.round()
データフレームを'A'列によって並べ直してNaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
いつまでもオブジェクトが続くイテラブル	itertools.repeat(element)
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
文字列は全て印字できるか	s.isprintable()
nまでの奇整数リスト	list(range(1, n, 2))
集合が空か調べる	len(aSet) == 0
option: 色をダークカーキに変更する	color = 'darkkhaki'
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
整数個からk個取り出したときの並べ方の総数を求める	math.perm(n, k)
データフレームのカラムが何月か見る	df[col].dt.month
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
option: ナバホホワイト色を使う	color = 'navajowhite'
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
標準入力を得る	sys.stdin
グラフを画面にセットする	sns.set(context='notebook')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
日付データが月曜日	aDate.weekday() == 0
文字列の末尾からタブを取り除く	s.rstrip('\t')
option: グラフの色をシルバーに設定する	color = 'silver'
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
カンマを使って文字列を区切り、、列挙する	s.split(',')
2つの浮動小数点数は十分に近いか	math.isclose(x, x2)
実数の逆双曲線正接	math.atanh(x)
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのリスト列の値を正規表現でまとめてreplに置換する	df[aList].replace(pattern, repl, regex=True)
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
正規表現モジュールをインポートする	import re
ヒストグラムの色を濃いシアンに変更する	plt.hist(データ列, color='darkcyan')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
要素が辞書の値に含まれていない	element not in aDict.values()
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
二つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
折れ線グラフの左三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
バイトオーダを知る	sys.byteorder
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
文字列中のパターンを新しい文字列として置き換える	re.sub(pattern, newsub, s)
option: ダークサーモン色を使う	color = 'darksalmon'
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をダークシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
文字列の末尾	s[-1]
赤い▲マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
行列の差	aArray - aArray2
本日をISO8601書式の文字列に変換する	datetime.datetime.today().isoformat()
リストとリストについて散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームのリストカラムの欠損値を50パーセンタイルに設定する	df[aList].fillna(df[aList].median())
option: ライトグリーンにフォントの色を変更する	color = 'lightseagreen'
書式を辞書でフォーマットする	formatText.format_map(aDict)
データフレームを列によってグループ化し、要約統計量を計算する	df.groupby(column).describe()
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
実数の双曲線余弦	math.cosh(x)
リストと数列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
文字列のケースを変換する	s.casefold()
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
空の単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームのpercent分位数	df.quantile(percent/100)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
データフレームから型リストで指定されたデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
数式を変数についてn階微分する	sympy.diff(e, z, n)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
多次元データを特異値分解を用いて濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
辞書順で文字列は文字列より前	s < s2
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
文字列を部分文字列で分割して、文字列リストに変換する	s.split(sub)
青い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
n番目のシートをファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: 黄色にグラフの色を設定する	color = 'yellow'
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
青色で文字列を表示する	print(f'\033[34m{value}\033[0m')
データフレームを二つの列の値でグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: サーモン色を使う	color = 'salmon'
データフレームから数値データだけ取り出す	df.select_dtypes('number')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
データフレームから型リストのデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
代数計算を使う	import sympy
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームのリストカラムはどの程度、分散しているか調べる	df[aList].var()
n個に等量でデータ列をビン分割する	pd.qcut(ds, n)
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
リストとリストについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: フォントの色をスラグレーに変更する	color = 'slategrey'
折れ線グラフをコーンフラワーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
八進数字を全て使う	string.octdigits
タプルをソートする	sorted(aTuple)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
データ列を十の位で丸める	ds.round(-1)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
新しい文字列によって文字列を置換する	s.replace(sub, newsub)
重複した行のみを抽出する	df[df.duplicated(keep=False)]
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
option: ロージーブラウン色を使う	color = 'rosybrown'
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
配列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
TSVからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
本日は何年か知る	datetime.datetime.today().year
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
nまたはn2	n or n2
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
集合をイミュータブルに変換する	frozenset(aSet)
データフレームで、列と列の重複を削除する	df.drop_duplicates(subset=column)
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
リストの平均	sum(aList)/len(aList)
マップの値に要素が含まれていないか調べる	element not in aDict.values()
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
二つの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
行列のスカラー倍	aArray * n
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
option: アクア色を使用する	color = 'aqua'
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
option: ブルーバイオレットにグラフの色をする	color = 'blueviolet'
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
シーケンスにリストを続けたイテラブル	itertools.chain(iterable, iterable2)
option: 大バツ印を使う	marker = 'X'
JSONファイルの入力を辞書に変換する	json.load(fin)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
スノーにヒストグラムの色を指定する	plt.hist(データ列, color='snow')
リストと配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
表データをインデックスで降順でソートする	df.sort_index(ascending=False)
列と列をzipする	itertools.zip_longest(iterable, iterable2)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームを列によってソートして上位n件を取り出す	df.sort_values(columns).head(n)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
横に並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: フォントの色をパールバイオレットレッドに指定する	color = 'palevioletred'
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
線形モデルの切片	model.intercept_
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
グリッド線を赤くする	plt.grid(color='r')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
スーパーセット	aSet.issuperset(aSet2)
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
箱ひげ図をプロットして平均線を加える	plt.boxplot(データ列, meanline=True)
option: 改行コードを旧Macに設定する	newline = '\r'
枠なしの凡例をグラフの中に入れる	plt.legend(frameon=False)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: 色をダークレッドに指定する	color = 'darkred'
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
句点文字を全部使う	string.punctuation
折れ線グラフのポイントマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
組を反転する	reversed(aTuple)
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
要素が辞書の値として含まれているか調べる	element in aDict.values()
乱数で要素を埋めた配列	np.random.random(N)
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
整数nを十六進文字列に変換する	hex(n)[2:]
データ列とイテラブルについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
入力ストリームからn文字、読み込む	f.read(n)
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
option: ライトイエローを使う	color = 'lightyellow'
イテラブルから配列を作る	np.array(iterable)
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
文字列のケースをする	s.casefold()
データフレームを列の値で欠損値を含めてグループ化する	df.groupby(column, dropna=False)
出力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
色付きの点線として線をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームが正規分布からどの程度、歪んでいるか確認する	df.kurt()
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
ナバホホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
option: ライムグリーン色を使用する	color = 'limegreen'
ローングリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
リストをy座標配列を横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
文字列がタプルの要素か調べる	element in aTuple
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
データ列は何曜日か見る	ds.dt.weekday_name
データ列の中にある日付データの合計を数える	ds.isin([value]).sum()
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
タプルの先頭を使う	aTuple[0]
データ列の欠損値を直後の値に増やす	ds.fillna(method='bfill')
option: 改行をセパレータで用いる	sep = '\n'
ひとつ置きにタプルを取り出す	aTuple[::2]
浮動小数点数の三乗を計算する	x ** 3
option: 印を三角に変更する	marker = '^'
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
option: グラフの色をラベンダーブラッシュにセットする	color = 'lavenderblush'
option: 区切りを改行にする	sep = '\n'
option: フォントの色をグレーに設定する	color = 'gray'
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
実数がNaNか確認する	math.isnan(x)
実数の双曲線余弦の逆数	math.acosh(x)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
option: レベッカパープルに色を設定する	color = 'rebeccapurple'
黄色いグリッド線を引く	plt.grid(color='y')
データフレームの中のNaNをドロップする	df.dropna()
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
データフレームの重複した行数のマスク	df.duplicated()
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームの中に文字列があるか調べる	df.isin([value])
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線プロットの色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを各列とカラムの組み合わせ毎にグループ分けし、、合計を求める	df.groupby([column, column2], as_index=False).sum()
自然数個のものからk個取り出した場合の並べ方の総数	math.perm(n, k)
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
オブジェクトはあるクラスのインスタンスか	isinstance(obj, クラス)
本日の日付時刻を計算する	datetime.datetime.now()
三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
両端キューに要素をエンキューする	deq.appendleft(element)
タプルをリストに変換する	list(aTuple)
'A'列と'B'列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの列の各値は何回出現するか見る	df[col].value_counts()
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
実数の２乗	x ** 2
部分文字列が文字列の開始位置と終了位置の間に含まれるか	s.find(sub, start, end) != -1
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
第一引数で指定したファイル名	sys.argv[1]
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
1文字だけ標準入力から読む	sys.stdin.read(1)
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
データフレームのn行以降抽出する	df[n:]
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
データフレームの列のユニークな値の個数	df[col].nunique()
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
グラフの色を暗くする	sns.set(pallete='dark')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
折れ線グラフを点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
列の値を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
整数nを2進表記に変換する	bin(n)
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームの内で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
データフレームを各列と列の組み合わせ毎にグループ化して最大値を算出する	df.groupby([column, column2], as_index=False).max()
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
nを半分にする	n /= 2
イテラブルを配列に変換する	np.array(iterable)
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column])
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームのカラムの75パーセンタイル	df[col].quantile(0.75)
数を万の位で丸める	round(x, -4)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームのリストカラムの中に文字列がある	df[aList].isin([value])
データフレームのリストカラムの中の欠損値の数を数える	df[aList].isna().sum()
空列を得る	[]
線形モデルの回帰変数	model.coef_
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
昇順にデータフレームを列によってソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
タイムスタンプデータをISO8601形式の文字列にする	aDatetime.isoformat()
ファイルパスから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
ドジャーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データフレームのリストカラムの欠損値を直前の値にセットする	df[aList].fillna(method='ffill')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
option: マゼンタにグラフの色を設定する	color = 'magenta'
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
破線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
option: ダークオリーブグリーンにフォントの色をセットする	color = 'darkolivegreen'
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: ローングリーン色を使う	color = 'lawngreen'
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
文字列が全て小文字か調べる	s.islower()
option: ライトグレーにフォントの色を設定する	color = 'lightgrey'
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
xが真かどうか確認する	bool(x)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
オブジェクトのメモリビュー	memoryview(obj)
日付時刻データが何日か知る	aDatetime.day
▲マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
要素が集合のメンバーでない	element not in aSet
オプションで、標準出力に出力する	file = sys.stdout
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
option: インディゴを使う	color = 'indigo'
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームの各次元の大きさを見る	df.shape
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
小数点数の正接	math.tan(x)
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
最大値・最小値を使って整数乱数を生成する	random.randint(最小値, 最大値)
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
両端キューが空でないか調べる	len(deq) != 0
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
リストを中央値でビン分割する	pd.qcut(aList, 2)
データフレームのn行目を削除して、インプレイスする	df.drop(n, axis=0, inplace=True)
黄緑色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
変数について数式をn階微分する	sympy.diff(e, z, n)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
nが-9以上9以下か確認する	-9 <= n <= 9
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
ベクトルの演算を行う	import numpy as np
文字列中のタブ文字をn個の空白に置換する	s.expandtabs(tabsize=n)
実数を百の位で丸める	round(x, -2)
option: グラフを点線にする	linestyle = 'dotted'
オブジェクトの固有のID	id(obj)
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
両端キュー中のデータのインデックス	deq.index(element)
データ列の偏りを平方根する	np.sqrt(データ列)
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
nにn2を足して代入する	n += n2
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
リストと配列についての散布図に黒い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
リストを中央値で分割する	pd.qcut(aList, 2)
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
option: トマトにグラフの色を設定する	color = 'tomato'
列を両端キューに変換する	collections.deque(iterable)
実数を整数にする	int(x)
データフレームから列を二つ選択する	df[[column, column2]]
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
色付きの破線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
凡例をグラフに被らない位置に表示する	plt.legend(loc='best')
option: バイナリモードに設定する	mode = 'rb'
２つのリストからマップ	dict(zip(aList, aList2))
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
最大値としてデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
整数nの8進表現を使う	oct(n)
浮動小数点数の指数部を求める	math.frexp(x)[1]
文字列をセパレータで区切って、列挙する	s.split(sep)
データフレームのリスト列の中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
option: ブルーバイオレットを使用する	color = 'blueviolet'
ファイルを全部読み込む	f.read()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
オブジェクトを文字列に変換する	str(obj)
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
数式の数値を計算する	float(e)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字コードtextでファイルを開く]	open(filepath, encoding=text)
ミディアムシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
文字列が全てASCII文字か調べる	s.isascii()
最適な位置に補足を表示する	plt.legend(loc='best')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
ケンドールでデータフレームのカラムと列の相関行列	df[[column, column2]].corr(method='kendall')
標準入力を使用する	sys.stdin
nをn2だけ左シフトする	n << n2
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
文字列をセンタリングにする	s.center(文字列幅)
nがn2未満、またはn3以上	n < n2 or n >= n3
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
データ列とリストの散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
nがn2で割り切れる	n % n2 == 0
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
コギーくんを使いたい	import kogi
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
リストに文字列を加える	aList.append(element)
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
部分文字列が文字列中に含まれる	sub in s
option: 整数型を使う	dtype = np.int
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
option: 色をライトグレーに設定する	color = 'lightgray'
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
ヒストグラムを白色を使って描画する	plt.hist(データ列, color='white')
アヤメのデータセットをロードする	sns.load_dataset('iris')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
列をビン数nでビニングする	pd.cut(ds, n)
グラフの横軸の軸名を設定する	plt.xlabel('x軸ラベル')
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのリストカラムを丸める	df[aList].round()
データ列の母標準偏差	ds.std(ddof=0)
ガンマ関数の値	math.gamma(x)
最後の値を辞書からポップする	aDict.popitem()
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
データフレームを列でグループ化して個数を求める	df.groupby(column).count()
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
正規表現patternでデータ列をまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
アルファベットの大文字を全部使う	string.ascii_uppercase
配列の分散	np.var(aArray)
散布図を黒いポイントマーカーとして描く	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
セット＼セット	aSet.difference(aSet2)
0からnまでのスライス	slice(n)
リストとリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
シーグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
文字列を走査しパターンにマッチするか見る	re.search(pattern, s)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
0からnの範囲で	range(n)
要素が集合のメンバーか調べる	element in aSet
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
文字列の左端からタブを除去する	s.lstrip('\t')
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
グラフの用途をスライドに設定する	sns.set(context='talk')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
二つの変数をコロンで区切って表示する	print(value, value2, sep=':')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
データフレームを確認する	df.head()
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
データフレームの列を散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
二つの集合の∩	aSet.intersection(aSet2)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
ふたつの集合は共通の要素を持たない	aSet.isdisjoint(aSet2)
二つの数値をカンマで区切って表示する	print(value, value2, sep=',')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データ列が何年か見る	ds.dt.year
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
データ列をn個にビン分割する	pd.cut(ds, n)
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
赤いダイアモンドマーカーをリストとデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムの中央値	df[col].median()
nをn2で割った余り	n % n2
option: レモンシフォン色を用いる	color = 'lemonchiffon'
折れ線グラフに赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
実数で実数を割って、切り捨てる	x // y
ヒストグラムをビスク色を使って描画する	plt.hist(データ列, color='bisque')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
nをn2で割った余りをnに代入する	n %= n2
ターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
nの二乗	n ** 2
組をナンバリングする	enumerate(aTuple)
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
option: ブラック色を使う	color = 'black'
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
オブジェクトはリストクラスか調べる	isinstance(obj, list)
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
option: 暗い赤色を使う	color = 'darkred'
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
グラフで使うy軸の説明をuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
option: ブルーバイオレット色を使う	color = 'blueviolet'
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
グラフのy座標を対数に変更する	plt.yscale('log')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
nとn2の値を足してnに代入する	n += n2
スタックの末尾にイテラブルの要素を入れる	deq.extend(iterable)
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
ハニーデュー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
イテラブルとイテラブルについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: サーモンを使う	color = 'salmon'
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
方程式の解	sympy.solve(e)
数に実数を加算する	x + y
stringをインポートする	import string
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
最大最小からベクトルを初期化する	np.linspace(最小値, 最大値, 要素数)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
イエローグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列の左側から空白を除く	s.lstrip(' ')
配列は何次元か調べる	aArray.ndim
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色を貝殻にセットする	plt.hist(データ列, color='seashell')
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
数列の推移を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
Pandasで、文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データ列を縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
データ列の欠損値を平均値に増やす	ds.fillna(ds.mean())
nがn2以下か調べる	n <= n2
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: ダークオレンジ色を使う	color = 'darkorange'
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
option: 青緑色を使う	color = 'turquoise'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
文字列がタイトルケースかテストする	s.istitle()
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの列と列を消す	df.drop([column, column2], axis=1)
option: フォントの色をダークシアグリーンにする	color = 'darkseagreen'
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
option: スラグレー色を使う	color = 'slategrey'
ファイルを改行除外して一行ずつ読み込む	f.readline()
データ列のNaNを最大値で置換する	ds.fillna(ds.max())
追加できるようにEUCで既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
文字列リストにイテラブルを変換して、部分文字列によってつなげる	sub.join(map(str, iterable))
最大行数を変更する	pd.set_option('display.max_rows', n)
線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: フォレストグリーン色を使う	color = 'forestgreen'
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
タプルを小さい方からソートする	sorted(aTuple, reverse=False)
プロットにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
読み込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
option: シエナにグラフの色を指定する	color = 'sienna'
ファイルパスを読み込みモードで開いて]fとする	f = open(filepath, mode='r')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データ列を使う	import pandas as pd
space	' '
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの中の欠損値の合計を数える	df.isna().sum()
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームを降順に破壊的に複数の列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
双方向キューの要素をインプレースに反転する	deq.reverse()
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
ベクトルの演算をする	import numpy as np
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
option: 色をインディゴに設定する	color = 'indigo'
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
option: フォントの色を紺碧に設定する	color = 'azure'
双方向キューの中に値が含まれてるかテストする	element in deq
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
散布図を下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
集合に要素を追加する	aSet.add(element)
辞書に要素をキーとして加える	aDict[key] = element
数値を浮動小数点数にする	float(e)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
スピアマン相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
日付時刻データの秒数	aDatetime.second
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
折れ線グラフの菱形マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
グリッド線	plt.grid(alpha=0.5)
両端キューの順序を左にn個分輪番で回す	deq.rotate(-n)
目盛線をグラフから消す	plt.grid(False)
データフレームの列の値がxのデータを取り出す	df[df[column] == x]
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
列を周期的に繰り返す	itertools.cycle(iterable)
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
CSVファイルを読む	pd.read_csv(filename, sep=',')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
nが-9以上、9以下か	-9 <= n <= 9
option: グラフの色をグリーンに設定する	color = 'green'
上限を指定して、双方向キュー	collections.deque(maxlen=n)
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
nとn2の論理和を求める	n | n2
ダークターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
実数の逆余弦	math.acos(x)
配列のデータ型	aArray.dtype()
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
リストのn番目以降の部分を取り出す	aList[n:]
現在処理中の例外を情報	sys.exc_info()
変数を赤色化する	f'\033[31m{value}\033[0m'
オレンジ色を用いてヒストグラムを描画する	plt.hist(データ列, color='orange')
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
散布図の下三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
グリッドを点線にする	plt.grid(linestyle='dotted')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
数値の変数を数式で置き換える	e.subs(z, e2)
データフレームのリスト列の最頻値	df[aList].mode()
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をシルバーに指定する	color = 'silver'
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
スタックをタプルに変換する	tuple(deq)
データフレームのリストカラムのNaNをメディアンで埋める	df[aList].fillna(df[aList].median())
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
マップから項目名で指定された項目をポップする	aDict.pop(key)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
データフレームを列によってまとめたグループ	df.groupby(column)
数値の符号をコピーにする	math.copysign(x, x2)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: ダークバイオレット色を使う	color = 'darkviolet'
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
y軸の目盛りを表示しない	plt.yticks([])
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
集合の変更不能版	frozenset(aSet)
option: グラフの色をベージュに設定する	color = 'beige'
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
日付時刻データの時間数	aDatetime.hour
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
上位集合か	aSet.issuperset(aSet2)
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
option: 色をペールグリーンに設定する	color = 'palegreen'
折れ線グラフの色をリネンにセットする	plt.plot(データ列x, データ列y, color='linen')
option: トマト色を使う	color = 'tomato'
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
Pandasで、フォーマットで文字列をタイムスタンプ型にする	pd.to_datetime(s, format='%Y-%m-%d')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
配列を等しい量になるように分割数nでビン分割する	pd.qcut(aArray, n)
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
グラフの描画を綺麗にする	import seaborn as sns
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームから指定した二つの列を抽出する	df[[column, column2]]
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
組の末尾からn番目以前の部分を抽出する	aTuple[:-n]
文字列は全て数値	s.isnumeric()
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
列を2回あわせた直積を算出する	itertools.product(iterable, repeat=2)
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
整数nの8進表現	oct(n)
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストの最初を見る	aList[0]
折れ線グラフを点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
部分文字列を文字列のサフィックスから取り除く	s.removesuffix(sub)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
データフレームの相関行列ケンドール順位相関係数で	df.corr(method='kendall')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
データフレームの列の種類を見る	df.info()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
リストと配列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
正規表現にASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
nが-9以上、9以下	-9 <= n <= 9
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列と列の相関行列スピアマン順位相関係数で	df[[column, column2]].corr(method='spearman')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データ列の値が欠損値か	ds.isna()
浮動小数点数の2乗を計算する	x ** 2
タプルをnからナンバリングする	enumerate(aTuple, start=n)
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
日付データにn分を加える	aDate + datetime.timedelta(minutes=n)
現在の分数	datetime.date.today().minute
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
グラフに補足を加える	plt.legend(['凡例A', '凡例B'])
option: 複素数型を使う	dtype = bool
ベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
option: 線の種類を実線に変更する	linestyle = 'solid'
本日が日曜日	datetime.datetime.today().weekday() == 6
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
小さい順にデータフレームを破壊的に複数の列でソートする	df.sort_values(by=column, ascending=True, inplace=True)
散布図をチョコレート色を使って描画する	plt.scatter(データ列x, データ列y, color='chocolate')
２つの文字列を順にプリントする	print(value, value2)
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
データフレームを表示するとき、ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
モデルを学習する	model.fit(説明変数, 目的変数)
option: スラグレー色を使う	color = 'slategray'
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
論文用にプロットを設定する	sns.set(context='paper')
2つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
文字列のプレフィックスが部分文字列かどうか調べる	s.startswith(sub)
データフレームのリストカラムがどれだけ分散しているか見る	df[aList].var()
option: グラフの色をライトグレーに設定する	color = 'lightgray'
ファイルをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データを最大値と最小値を使って正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームを表示するとき、ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
データフレームのカラムの名前の一覧を使う	df.columns
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
nが5の倍数か	n % 5 == 0
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
空白文字を全部使う	string.whitespace
データフレームのカラムの中の未入力値の合計を求める	df[col].isna().sum()
赤い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
リストを逆順にする	aList[::-1]
左三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームを見る	df.head()
日付データは日付データと同時かどうか調べる	aDate == aDate2
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
データ列が何曜日か見る	ds.dt.weekday_name
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
多次元データをt-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
文字列はタイトルケースか確認する	s.istitle()
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
データフレームのリストカラムのNaNを後の行の値で置き換える	df[aList].fillna(method='bfill')
数式を展開する	sympy.expand(e)
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
真スーパーセットか調べる	aSet > aSet2
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの中に文字列が存在するか	df.isin([value])
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
nがn2で割り切れるか調べる	n % n2 == 0
データフレームの列の未入力値を直前の値にセットする	df[col].fillna(method='ffill')
データフレームを各列と列の組み合わせ毎にグループ化して最小値を求める	df.groupby([column, column2], as_index=False).min()
データフレームのリストカラムの中央値	df[aList].median()
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: フクシア色を使う	color = 'fuchsia'
半透明の破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
グラフの背景色を暗くする	sns.set(style='darkgrid')
option: バイナリモードを使う	mode = 'rb'
実数の双曲線正接の逆数を求める	math.atanh(x)
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
カウンタから最頻出な要素の件数を求める	aCounter.most_common()[1]
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
散布図をグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='green')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
バイナリ書き込み用にファイルをオープンして]、fとする	f = open(filepath, mode='wb')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
option: n番目の列をインデックスに設定する	index_col = n
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
タプルの要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
英文字から一つランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームの平均値	df.mean()
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
標準エラーを得る	sys.stderr
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ラインの線の種類を一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームを列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
option: ライトグリーン色を用いる	color = 'lightgreen'
ヒストグラムの色をダーク・スラテグレーにする	plt.hist(データ列, color='darkslategrey')
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
二つの文字列は同じでないかどうか確認する	s != s2
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
黒い四角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
双方向キューをクリアする	deq.clear()
表示可能な行数を変更する	pd.set_option('display.max_rows', n)
値はスタックの中に含まれてるか確認する	element in deq
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
nが負の整数か調べる	n < 0
タプルの最初の文字列を探す	aTuple.index(element)
追加できるようにSJISでファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
イテラブルとイテラブルについて散布図を描き、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カラムの名前なしでTSVファイルを読み込む	pd.read_csv(filename, header=None)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
option: ミディアムスプリンググリーンに色を設定する	color = 'mediumspringgreen'
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
ファイルのファイル名	os.path.basename(filepath)
新しい文字列で文字列を置換する	s.replace(sub, newsub)
散布図のバツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
クラス分類を多層パーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
文字列の開始位置より後に部分文字列があるか調べる	s.find(sub, start) != -1
nからn2までの整数列	list(range(n, n2+1))
option: エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
実数のk進対数	math.log(x, k)
日付時刻データの年	aDatetime.year
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: チョコレート色を使う	color = 'chocolate'
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
実数を切り下げて整数にする	math.floor(x)
浮動小数点数の最大値	sys.float_info.max
列の文字列をNaNに変換する	ds.replace(s, np.nan)
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
option: コーラル色を使う	color = 'coral'
JSONを使う	import json
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームを複数の列でまとめたグループを使う	df.groupby(columns)
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
横棒グラフを描いて棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
オブジェクトのイテレータ	iter(obj)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
option: マゼンタにグラフの色を指定する	color = 'magenta'
文字列が文字列リストに含まれるか調べる	s in aStringList
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
スクリプトファイルと同じフォルダのファイルのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線プロットに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
要素∉集合	element not in aSet
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
データフレームのカラムが何日か見る	df[col].dt.day
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
チョコレート色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
実数の複素数	complex(x)
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
折れ線グラフの色をカデットブルーにする	plt.plot(データ列x, データ列y, color='cadetblue')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
データフレームをグループ化し列に対し平均値を求める	df.groupby(column)[column2].mean()
option: 配列のデータ型を指定する	dtype = bool
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
0から始まる無限数列	itertools.count()
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
option: 色を茶色に指定する	color = 'brown'
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
データフレームのカラムの欠損値を最頻値に増やす	df[col].fillna(df[col].mode().iloc[0])
日付時刻データの秒	aDatetime.second
白いヒストグラムを描画する	plt.hist(データ列, color='w')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
データを最大最小で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データ列の正規分布に対する左右対称性	ds.kurt()
オブジェクトは論理値型かどうか確認する	isinstance(obj, bool)
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
リストにリストを続ける	itertools.chain(iterable, iterable2)
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
配列は何のデータ型か調べる	aArray.dtype()
ファイル名がCSVファイルかどうか調べる	filename.endswith('.csv')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
ヒストグラムを一点鎖線を使って描画する	plt.hist(データ列, linestyle='dashbot')
日付時刻データが日曜日	aDatetime.weekday() == 6
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
最大長を指定して、スタック	collections.deque(maxlen=n)
青い実線を用いて配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
文字列を積極的に小文字に変換する	s.casefold()
データ列の出現頻度を可視化する	plt.hist(データ列)
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
CSVタブ区切りのファイルをn番目の列を行として読み込む	pd.read_csv(filename, index_col=n)
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
本日をタプルに変換する	datetime.datetime.today().timetuple()
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
セパレータで文字列を区切って、文字列リストに変換する	s.split(sep)
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
実数の絶対値	math.fabs(x)
ライトスチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームを表示するとき、表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: ディムグレーを使う	color = 'dimgray'
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列はカタカナか確認する	('ァ' <= ch <= 'ン')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
データフレームをグループ化し、列に対し標準偏差を求める	df.groupby(column)[column2].std()
ガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数の逆正接	math.atan(x)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
本日が何曜日か知る	datetime.datetime.today().weekday()
辞書のキーを列挙する	aDict.keys()
実数の床数を求める	math.floor(x)
横棒グラフをプロットし、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
本日が木曜日	datetime.datetime.today().weekday() == 3
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
リストの合計値を求める	sum(aList)
折れ線グラフにポイント印を用いる	plt.plot(データ列x, データ列y, marker='.')
データ列の中央値	ds.median()
文字を文字コードに変換する	ord(ch)
option: イエローグリーン色を使う	color = 'yellowgreen'
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
option: マーカーを三角に変える	marker = '^'
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの列の文字列長を列として見る	df[col].str.len()
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
option: マーカーを三角に変更する	marker = '^'
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
nが2で割り切れないか調べる	n % 2 == 1
option: レベッカパープル色を用いる	color = 'rebeccapurple'
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: ミディアムパープル色を使用する	color = 'mediumpurple'
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
リストの末尾	aList[-1]
表データのそれぞれのグループごとの平均値	df.groupby(column).mean()
文字列の両端から部分文字列を取り除く	s.strip(sub)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
オブジェクトがリストクラスか調べる	isinstance(obj, list)
組をひとつ置きに得る	aTuple[::2]
集合を更新不能に変換する	frozenset(aSet)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの色をミディアムスプリンググリーンにする	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
グラフの中のy軸にラベルをつける	plt.ylabel('y軸ラベル')
データフレームのカラムの欠損値を直後の値に変更する	df[col].fillna(method='bfill')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
データ列の推移を色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのcollを書式fmtでタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
標準出力をフラッシュする	sys.stdout.flush()
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
オブジェクトが数値かどうか	isinstance(obj, (int,float))
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
文字列をISO8601でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
イテラブルのイミュータブルな集合	frozenset(iterable)
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
文字列が文字列より辞書順で前か調べる	s < s2
option: 赤色を用いる	color = 'red'
カテゴリ別で色分けして、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
nがn2で割り切れるか	n % n2 == 0
option: 昇順にする	ascending = True
nを八進表現に変換する	oct(n)
折れ線グラフの線のスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: マーカーをポイントに変更する	marker = '.'
集合から別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
リストを順に出力する	print(*aList)
nをn2倍にする	n *= n2
nをn2だけ小さくする	n -= n2
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームの列とカラムの相関行列をヒートマップとしてグラフ化する	sns.heatmap(df[[column, column2]].corr())
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
配列とリストの散布図をプロットして、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
オブジェクトは辞書クラスのインスタンスかどうか調べる	isinstance(obj, dict)
データフレームの列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
リストの先頭のn要素を取り除く	aList[n:]
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
連立方程式を解く	sympy.solve([e, e2])
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
ファイルが存在しないか調べる	not os.path.exists(filepath)
オブジェクトのクラス	type(obj)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
文字列の左側の文字	s[0]
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
本日が金曜日	datetime.datetime.today().weekday() == 4
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
インディアンレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: 文字コードをSJISに変更する	encoding = 'shift_jis'
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
今日が水曜日	datetime.datetime.today().weekday() == 2
データフレームの列の名前の一覧を求める	df.columns
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
赤いダイアモンドマーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムをヒストグラムで描画する	plt.hist(df[column])
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
辞書に辞書の項目を追加する	aDict.update(aDict2)
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
数を実数で割って、切り捨てる	x // y
データ列の各データ値の出現数	ds.value_counts()
1からNまでの配列	np.arange(1, N+1)
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
イテラブルとリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
色差別なくカラーパレットをプロットの描画で用いる	sns.set(pallete='colorblind')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームを10の位で丸める	df.round(-1)
グラフのx軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
日付時刻データをタプルに変換する	aDatetime.timetuple()
自分自身をモジュールとして	sys.modules[__name__]
option: コーラルを使う	color = 'coral'
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
実数の値が整数か調べる	x.is_integer()
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
nが3の倍数か調べる	n % 3 == 0
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
折れ線グラフに三角印を加える	plt.plot(データ列x, データ列y, marker='^')
データ列の年	ds.dt.year
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
ブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
再帰の最大回数	sys.getrecursionlimit()
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
option: サンディーブラウン色を使用する	color = 'sandybrown'
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
が名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
データフレームを各列毎にグループ分けして、列の標準偏差を求める	df.groupby(column)[column2].std()
数式を方程式として解く	sympy.solve(e)
データフレームを各カテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームを各列毎に集約し、、列の最大値を算出する	df.groupby(column)[column2].max()
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
半透明の破線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: 印を左三角に変更する	marker = '<'
数式の平方根を算出する	sympy.sqrt(e)
文字列をパターンで分割する	re.split(pattern, s)
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
リストと数列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
折れ線グラフを右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
小数点数の逆正接	math.atan(x)
option: スチールブルーを使う	color = 'steelblue'
縦方向に二つのデータフレームをつなぐ	pd.concat([df, df2], axis=0)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの色を濃い青に指定する	plt.plot(データ列x, データ列y, color='darkblue')
散布図をダイアモンド印を使って描画する	plt.scatter(データ列x, データ列y, marker='D')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを昇順に列によってソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
要素をセットから取り除く	aSet.remove(element)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
空のチェーンマップを生成する	collections.ChainMap()
データ列の曜日の名前を求める	ds.dt.weekday_name
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
空のカウンタ	collections.Counter()
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: 文字列をセパレータで使う	sep = s
ファイル全体を行分割して読み込む	f.readlines()
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
横棒グラフをパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='purple')
n個の文字列があるリストを作る	[element] * n
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: マーカーの太さを変える	markeredgewidth = 2.5
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
両端キューの末尾に要素を追加する	deq.append(element)
ゼロ埋めされた配列	np.zeros(要素数)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームのカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[col].isin([value, value2]).sum()
カウンタの項目を列挙する	aCounter.keys()
nが5の倍数かどうか調べる	n % 5 == 0
イテラブルから配列を作成する	np.array(iterable)
タブで区切って2つの文字列をプリントする	print(value, value2, sep='\t')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームのカラムのタイムゾーンを文字列に指定する	df[col].tz_convert(s)
トマト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
xが真か調べる	bool(x)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
デックから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
nが一桁の数か調べる	0 <= n <= 9
異なる列をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
数から実数を減ずる	x - y
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
辞書の全を空にする	aDict.clear()
こんにちは世界と表示する	print('Hello World')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
パターンを前もって複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
グラフの縦軸を対数に変更する	plt.yscale('log')
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
カウンタ同士で積集合演算する	aCounter & aCounter2
option: ゲインズボロ色を使う	color = 'gainsboro'
option: オリベドラブ色を使う	color = 'olivedrab'
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
ピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ネイピア数を使う	math.e
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
nがn2より大きいか調べる	n > n2
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: 色をローングリーンに設定する	color = 'lawngreen'
追加できるように既存のファイルパスをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
配列をリストから作る	np.array(aList)
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データ列とリストについて散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
サイコロと同じ乱数	random.randint(1, 6)
日付データが火曜日か調べる	aDate.weekday() == 1
ベクトルの内積	np.dot(aArray, aArray2)
折れ線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
線グラフの色をバイオレットにセットする	plt.plot(データ列x, データ列y, color='violet')
最頻値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフの上三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
何回まで再帰ができるかを	sys.getrecursionlimit()
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
クラス分類の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ひとつ置きにリストを抽出する	aList[::2]
xを論理値に変換する	bool(x)
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
事前に正規表現をコンパイルする	re.compile(pattern)
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
タプルを引数として展開して表示する	print(*aTuple)
nを16進表現に変換する	hex(n)
各列毎にデータフレームを集計し、、列の個数を求める	df.groupby(column)[column2].count()
データフレームをグループ化し、各列に対し分散を求める	df.groupby(column)[column2].var()
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
マップに項目名が存在するか調べる	key in aDict
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
両端キューの要素を逆に並べ直す	deq.reverse()
リスト内の要素が全て真か調べる	all(aList)
スノー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームのカラムが何時か見る	df[col].dt.hour
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
全ての印字	string.printable
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
ベクトルを平坦にする	aArray.flatten()
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
nがタプルのどれかか調べる	n in aTuple
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
プログラムの実行を正しく停止する	sys.exit(0)
ライム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
改行なしに文字列をプリントする	print(value, end='')
データフレームを配列に変換する	df.values
データフレームを100の位で四捨五入して整数型にする	df.round(-2).astype(int)
線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
option: 箱ひげ図を水平方向にする	vert = False
各列毎にデータフレームをグループ化して列の最小値を計算する	df.groupby(column)[column2].min()
option: オーキッド色を使う	color = 'orchid'
小さい順に列によってデータフレームをソートする	df.sort_values(by=column, ascending=True)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
青い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
赤い点線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
原点から(実数,y)の距離	math.hypot(x, y)
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
リストを分割する	pd.cut(aList, aList)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのリスト列の欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
辞書順で文字列が文字列より後かどうか	s > s2
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
数値を表示する	print(value)
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームを各列とカラムの組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
データフレームの中に日付データがあるか調べる	df.isin([value])
データ列の秒	ds.dt.second
青色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
'A'列によってを用いて破壊的にデータフレームを並べる	df.sort_values(by='A', inplace=True)
ペルーにヒストグラムの色を指定する	plt.hist(データ列, color='peru')
自然数の順列の総数	math.perm(n)
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='grey')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
最大長nの両端キューを作成する	collections.deque(maxlen=n)
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列が漢字か確認する	('\u4E00' <= ch <= '\u9FD0')
option: グレー色を使う	color = 'grey'
黒い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
filepathに作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
両端キュー中の要素の数を数える	deq.count(element)
タプルの末尾のn要素を取り除く	aTuple[:-n]
タイムスタンプデータの時刻を使う	aDatetime.hour
二つのオブジェクトが同じ参照	obj is obj2
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
貝殻色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームのカラムの欠損値を最大値で置き換える	df[col].fillna(df[col].max())
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
整数nを二進文字列に変換する	bin(n)[2:]
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
データフレームのカラムの文字列長を列として求める	df[col].str.len()
文字列はPythonのキーワードかテストする	keyword.iskeyword(s)
option: グラフの色を黄緑に設定する	color = 'chartreuse'
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
数値をシアンで表示する	print(f'\033[36m{value}\033[0m')
集合から全ての要素を消す	aSet.clear()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
リストのn番目からn2番目までの部分	aList[n:n2]
option: ダークグレーにグラフの色を指定する	color = 'darkgray'
option: 黄色色を使う	color = 'yellow'
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: フォントの色をクリムゾンにする	color = 'crimson'
nまでの奇整数列	list(range(1, n, 2))
option: グラフの色をクリムゾンに設定する	color = 'crimson'
タプルのn番目からn2番目まで	aTuple[n:n2]
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
ひとつでも空白が文字列内にあるか	any(c.isspace() for c in s)
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
両端キューから最初の要素を取り除く	deq.remove(element)
Pandasで、フォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの75パーセンタイル	df.quantile(0.75)
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
両端キューが空であるか確認する	len(deq) == 0
リストと配列の散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
実行結果を赤色にする	f'\033[31m{value}\033[0m'
文字列をコロンで区切って、列挙する	s.split(':')
青い破線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: コーンズシルク色を使う	color = 'cornsilk'
データフレームのカラムの秒	df[col].dt.second
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
option: グラフの色をバリーウッドにセットする	color = 'burlywood'
最初の列をデータフレームから消す	df[df.columns[1:]]
option: ダークマゼンタ色を使う	color = 'darkmagenta'
リストとイテラブルについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
option: グラフの色をインディゴに設定する	color = 'indigo'
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
rgbの菱形マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ゴールデンロッドにフォントの色を設定する	color = 'goldenrod'
ISO書式の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
分割数nで等しい量になるようにデータ列をビン分割する	pd.qcut(ds, n)
散布図としてデータフレームを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
option: ロイヤルブルー色を使う	color = 'royalblue'
データ列は正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
プロットの色を淡くする	sns.set(pallete='muted')
黒いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
有理数の分子	q.numerator
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
seabornのデフォルトを適用する	sns.set()
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームを関数によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
データ列の欠損値を前の値で置換する	ds.fillna(method='ffill')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
配列と配列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
配列の分散を求める	np.var(aArray)
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームのリストカラムの中に存在するの合計を求める	df[aList].isin([value]).sum()
折れ線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
等量で分割数nでデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのカラムの曜日数	df[col].dt.dayofweek
表データをインポートする	import pandas as pd
リストを黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
キーがタプル上で未定義か調べる	key not in aDict
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
折れ線グラフの三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
表をグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームのリスト列の欠損値を直前の値で補う	df[aList].fillna(method='ffill')
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
棒グラフを真紅色として描画する	plt.bar(データ列x, データ列y, color='crimson')
タプルを逆順にする	aTuple[::-1]
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
option: バッファのサイズを設定する	buffering = 4096
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフを青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームを表示するとき最大列数を減らす	pd.set_option('display.max_columns', n)
表データを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
Pandasでフォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
データフレームの末尾	df.tail()
ダークマゼンタ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
カウンタ同士でユニオン演算する	aCounter | aCounter2
行列の行ごとの最小値	np.min(aArray, axis=1)
option: アンティークホワイトにグラフの色を指定する	color = 'antiquewhite'
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
イテラブルの集合	set(iterable)
ヒストグラムを描画してビン数を変更する	plt.hist(データ列, bins=区関数)
部分文字列が文字列の終了位置以前に含まれるかどうか確認する	s.find(sub, 0, end) != -1
itertoolsモジュールをインポートする	import itertools
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: ライトグリーンを用いる	color = 'lightgreen'
列でデータフレームをグループ化して列の要約統計量を算出する	df.groupby(column).describe()[column2]
両端キューの先頭	deq[0]
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
option: インディゴ色を使う	color = 'indigo'
２つの列によって小さい順にデータフレームを破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nの無限数列を得る	itertools.repeat(n)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
カウンタのユニークな項目をリストとして得る	list(aCounter)
イテラブルを無限に繰り返す	itertools.cycle(iterable)
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
カウンタから辞書を引く	aCounter.subtract(aDict)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
再帰の上限を知る	sys.getrecursionlimit()
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームの列の名前を付け直す	df.rename(columns={column: name})
オブジェクトはリストクラスか確認する	isinstance(obj, list)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
重複をインプレイスでデータフレームから落とす	df.drop_duplicates(inplace=True)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
タプルのn番目の	aTuple[n]
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
数字を求める	string.digits
最大値でデータ列の欠損値を補う	ds.fillna(ds.max())
文字列リストにタプルを変換して、タブによって結合する	'\t'.join(map(str, iterable))
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
組の先頭のn要素を取り除く	aTuple[n:]
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データ列の推移を赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
データ列の曜日数	ds.dt.dayofweek
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 上三角印を使う	marker = '^'
option: イエローグリーンにグラフの色を指定する	color = 'yellowgreen'
option: ペルーを使う	color = 'peru'
散布図をrgbのバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストの平均値	sum(aList)/len(aList)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: 色をアリスブルーに変更する	color = 'aliceblue'
サブセット	aSet.issubset(aSet2)
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
まとめてValueMapでデータ列の値を置き換える	ds.replace(ValueMap)
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームをJSONLファイルにTSVで保存する	df.to_csv(filename, sep='\t')
直前の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='ffill')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
リストとリストについて散布図を描画して、マーカーを▽に変更する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
option: グラフの色をブルーバイオレットにする	color = 'blueviolet'
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
列の値でデータフレームをグループ化し、記述統計量を求める	df.groupby(column).describe()
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t')
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
データフレームの中で、列に重複があるか調べる	df.duplicated(subset=column)
カウンタの文字列のカウントを使う	aCounter[element]
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
小数点数が有限かどうか調べる	math.isfinite(x)
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
実数の逆双曲線正弦	math.asinh(x)
リストにリストを追加して拡張する	aList.extend(aList2)
ValueMapでデータフレームの値を変更する	df.replace(ValueMap)
データフレームの指定された三列のみ選択する	df[[column, column2, column3]]
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
文字列の無限イテラブル	itertools.repeat(element)
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
文字列の右側から空白を取り除く	s.rstrip()
データフレームを'A'列によってソートする	df.sort_values(by='A')
カウンタの要素数	len(aCounter)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
option: 文字列の示すエンコーディングを使う	encoding = s
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: ペルー色を使う	color = 'peru'
実数を十六進表記の文字列に変換する	x.hex()
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
列の各値の出現数	df[col].value_counts()
シーグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
カウンタを高頻出方から列挙する	aCounter.most_common()
横棒グラフをシルバー色を用いて描画する	plt.barh(データ列x, データ列y, color='silver')
ライトグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの列がxより大きい行を選ぶ	df[df[column] > x]
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ひとつでも非空白が文字列中に含まれるか	any(not c.isspace() for c in s)
option: 印をバツに指定する	marker = 'x'
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: ローングリーン色を用いる	color = 'lawngreen'
横棒プロットの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
度数分布図を上限から下限までの上限下限で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
カーキにヒストグラムの色をセットする	plt.hist(データ列, color='khaki')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
オブジェクトはタプルクラスのインスタンスか確認する	isinstance(obj, tuple)
2つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
破壊的に'A'列と'B'列によってデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 青紫色を使う	color = 'violet'
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
文字列を走査し、正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
大きさnでリストとリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
実数の符号をコピーにする	math.copysign(x, x2)
既にロードされたモジュールの一覧を調べる	sys.modules
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
2を底とする実数の対数	math.log2(x)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: グラフの色をライトグレーにセットする	color = 'lightgray'
option: ダークグリーンにグラフの色をセットする	color = 'darkgreen'
nをn2乗に増やす	n **= n2
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
初期値で全要素を初期化した配列を初期化する	np.full(要素数, 初期値, dtype=np.int)
箱ヒゲ図を横方向にする	plt.boxplot(データ列, vert=False)
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
リストの推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
option: ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
タプルをJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
色付きの点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
rgbの大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
リストをビン数nを使って分割する	pd.cut(aList, n)
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
リストを番号付けする	enumerate(aList)
データフレームを'A'列と'B'列によって小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
文字列がリストの要素でない	element not in aList
文字列の最後から部分文字列を探す	s.rfind(sub)
リストの末尾から要素をポップする	aList.pop()
実数の平方根	math.sqrt(x)
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
カテゴリで色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームから最初の列を除く	df[df.columns[1:]]
本日の年数を使う	datetime.datetime.today().year
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
2変数の最大値	max(x, y)
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
リストが全て真	all(aList)
文字列をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
カラムの第一四分位数	ds.quantile(0.25)
option: n番目の列を行に設定する	index_col = n
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
文字列中の部分文字列の出現を数える	s.count(sub)
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
日付データが日付データと同時か調べる	aDate == aDate2
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
実数以上の最小の整数を算出する	math.ceil(x)
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
カラーバーを水平で設定する	plt.colorbar(orientation='horizontal')
nが正の数か調べる	n > 0
双曲線正弦の逆数	math.asinh(x)
JSON形式の文字列を読み込む	json.loads(jsonString)
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
赤いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの重複した行を数える	df.duplicated().sum()
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データ列の上位25%	ds.quantile(0.25)
データフレームのカラムのどの値が頻出か見る	df[col].mode()
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
グラフの縦横の比率を等しくする	plt.axis('equals')
'A'列によって昇順に破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
文字列の接尾辞が部分文字列か	s.endswith(sub)
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
縦棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
散布図に下三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
option: フォントの色を黄色に設定する	color = 'yellow'
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: ライムグリーン色を使う	color = 'limegreen'
カウンタを多い順番にリストとして得る	aCounter.most_common()
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
ファイルから1バイト、読む	f.read(1)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
文字列が全て英数字かどうか調べる	s.isalnum()
リストを等量でn個にビンニングする	pd.qcut(aList, n)
option: 書き込みモードに設定する	mode = 'w'
黒いグリッド線を引く	plt.grid(color='k')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
整数nがセットのどれかか調べる	n in aSet
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: 改行をセパレータで使う	sep = '\n'
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
NaN	math.nan
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームのリストカラムを百の位で丸めて、整数にする	df[aList].round(-2).astype(int)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームのリストカラムの標本標準偏差	df[aList].std()
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームのリストカラムの最頻値	df[aList].mode()
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
リストをランダムにシャッフルする	random.shuffle(aList)
標準入力から1行だけ読み込む	sys.stdin.readline()
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
データフレームのカラムの歪度	df[col].kurt()
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
nとn2の和	n + n2
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
16進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
二つのオブジェクトは等しい	obj == obj2
集合が空でないか調べる	len(aSet) != 0
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
データフレームの歪度	df.kurt()
セットに要素を追加する	aSet.add(element)
option: フォントの色をスプリンググリーンに指定する	color = 'springgreen'
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームを千の位で丸める	df.round(-3)
散布図に黒い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
nの3乗を求める	n ** 3
option: コーンズシルクに色を設定する	color = 'cornsilk'
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
ファイルからの入力ストリームを見る	open(filepath)
option: グラフの色をカーキにセットする	color = 'khaki'
両端キューから最初の値を取り出す	deq.remove(element)
実数の正接の逆数	math.atan(x)
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
データ列の中にある文字列の数を数える	ds.isin([value]).sum()
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
カレントワーキングディレクトリ	os.getcwd()
データフレームのリストカラムの欠損値を平均値に指定する	df[aList].fillna(df[aList].mean())
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
色付きの実線を用いて線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームのリストカラムを整数に丸める	df[aList].round()
option: タブを区切りで使う	sep = '\t'
データ列をインポートする	import pandas as pd
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ポイントマーカーを描画する	marker = '.'
データ列の分散を求める	ds.var()
折れ線グラフをライトゴールドロディイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: ライトグリーン色を使う	color = 'lightgreen'
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
プロットをポスター用にセットする	sns.set(context='poster')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
文字列の接尾辞が部分文字列	s.endswith(sub)
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
option: グレーを用いる	color = 'grey'
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
数式を簡単にする	sympy.sympify(e)
既存の配列を元に全要素が1の行列	np.ones_like(aArray)
整数nがリストのどれかか	n in aList
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nからn2の値を引いてnとする	n -= n2
回帰モデルを学習する	model.fit(説明変数, 目的変数)
x座標の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
イエローグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
option: ドジャーブルーにグラフの色をセットする	color = 'dodgerblue'
option: インデックスを連番に設定する	index_col = None
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
日付時刻データのタイムゾーン	aDatetime.timetz()
データフレームをグループ化して、ヒストグラムとして描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
データ列の四分位を可視化する	plt.boxplot(データ列)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームを列の値によってグループ化してグループごとの合計を求める	df.groupby(column).sum()
リストの中の最大値	max(aList)
データ列をボックスチャートとして図示する	plt.boxplot(データ列)
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
要素はセットのメンバーか確認する	element in aSet
列を文字列リストに変換して、空白でつなげる	' '.join(map(str, iterable))
タブ区切りのファイルからSJISでカンマ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
キューの大きさを求める	len(deq)
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームをグループ化し、列に対し平均値を求める	df.groupby(column)[column2].mean()
行列の列ごとの分散	np.var(aArray, axis=0)
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームから列を三つ選択する	df[[column, column2, column3]]
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
オブジェクトにプロパティがあるか	hasattr(obj, プロパティ名)
大文字が文字列内に含まれるかどうか調べる	any(c.isupper() for c in s)
整数nを十六進文字列にする	hex(n)[2:]
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
列'A'と列'B'をキーとして2つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヘッダを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
辞書に辞書の項目を更新する	aDict.update(aDict2)
データフレームのカラムは何日か調べる	df[col].dt.day
ディムグレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
リストから配列を作る	np.array(aList)
ランダムに一行をデータフレームから抽出する	df.sample()
降順に列によってによってデータフレームを並べる	df.sort_values(by=column, ascending=False)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列の先頭から部分文字列を探す	s.find(sub)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
箱ひげ図に簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
ティール色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
日付時刻データは何日か知る	aDatetime.day
ベクトルのユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームを各列毎にグループ化し、、文字列というグループを使う	df.groupby(column).get_group(s)
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
option: グラフの色をオレンジに変更する	color = 'orange'
行列の演算を行う	import numpy as np
グローバル変数の一覧	globals()
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
コマンドライン引数	sys.argv
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
行列のデータ型	aArray.dtype()
データフレームのカラムを1000の位で丸める	df[col].round(-3)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
箱ひげ図を2つ並べて描画する	plt.boxplot([データ列, データ列])
文字列を空白を用いて区切って整数のリストに変換する	map(int, s.split())
データフレームのリストカラムを千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
データフレームのNaNを前の行の値に設定する	df.fillna(method='ffill')
直後の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='bfill')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: マーカーを大バツに指定する	marker = 'X'
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
部分文字列で文字列を区切る	s.split(sub)
コマンドラインフラグの状態	sys.flags
辞書の項目名を要素に設定する	aDict[key] = element
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
データフレームの棒プロットをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
変数について数式の微分を行う	sympy.diff(e, z)
データフレームの数値をまとめて丸める	df.round()
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: ライトグレーにグラフの色をセットする	color = 'lightgray'
赤い破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: namesをカラムの名前に設定する	names = names
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
データラベルの場所を指定する	plt.legend(loc=(x, y))
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
データ列を箱ひげ図にする	plt.boxplot(データ列)
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
osモジュールをインポートする	import os
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
ピアソンとしてデータフレームの相関行列	df.corr(method='pearson')
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
日付時刻データの時間を見る	aDatetime.time()
データフレームを列名リストによってによって降順に整列する	df.sort_values(by=column, ascending=False)
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームを二つの列を用いてソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
option: 配列のデータ型を指定する	dtype = np.int
option: 配列のデータ型を指定する	dtype = np.int16
イテラブルとリストについて散布図を描画して、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームの中に日付データとがいくつ含まれるか数える	df.isin([value, value2]).sum()
nからn2の範囲を求める	range(n, n2)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
データ列をビン数nで等しい量になるようにビニングする	pd.qcut(ds, n)
日付時刻データからn分、引く	aDatetime - datetime.timedelta(minutes=n)
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
リストと配列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
行列の列ごとの最小値	np.min(aArray, axis=0)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
option: ブルーバイオレット色を使用する	color = 'blueviolet'
配列とリストの散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
ヒストグラムを用いてデータフレームのカラムをプロットする	plt.hist(df[column])
UTF8でファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
option: ライトゴールドロディイエローにフォントの色を設定する	color = 'lightgoldenrodyellow'
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
カウンタの項目を一つ増やす	aCounter[element] += 1
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
option: セパレータをカンマにする	sep = ','
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
シーケンスを回数して、カウンタを更新する	aCounter.update(iterable)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームのリスト列の未入力値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームから数値データの列を抽出する	df.select_dtypes('number')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
データフレームのリストカラムのNaNを最大値に設定する	df[aList].fillna(df[aList].max())
散布図を紺碧色を使って描画する	plt.scatter(データ列x, データ列y, color='azure')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データフレームの欠損値を平均で補う	df.fillna(df.mean())
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
option: 印を丸に変更する	marker = 'o'
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
変数名を項目名として、辞書	dict(name=element)
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフをパレットトルコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
列'A'と列'B'をキーとして２つの表データを結合する	pd.merge(df, df2, left_on='A', right_on='B')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
実数を三乗する	x ** 3
データ列を日付データに変換する	pd.to_datetime(ds)
プロットを全般的に淡くする	sns.set(pallete='muted')
リストを引数として展開してプリントする	print(*aList)
option: スカイブルーを用いる	color = 'skyblue'
実数の仮数	math.frexp(x)[0]
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
n個にデータフレームの中の列をビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 先頭のカラムをインデックスに指定する	index_col = 0
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
配列の内積	np.dot(aArray, aArray2)
データフレームの列の中に日付データと文字列がいくつ含まれるか求める	df[col].isin([value, value2]).sum()
各列毎に表データをグループ化し、、列の合計を計算する	df.groupby(column)[column2].sum()
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
option: グリーンにグラフの色を指定する	color = 'green'
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
配列から重複を除いたベクトルを作る	np.unique(aArray)
グラフに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
セットをリストに変換する	list(aSet)
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
配列の要素ごとに加算する	aArray + aArray2
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
乱数で要素を埋めた行列	np.random.random((行数, 列数))
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
淡いピンク色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ベクトルの累積積	np.cumprod(aArray)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
リストが空か調べる	len(aList) == 0
イテラブルを両端キューに変換する	collections.deque(iterable)
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
カラムの中に文字列と文字列がいくつ存在するかカウントする	ds.isin([value, value2]).sum()
配列をイテラブルから作成する	np.array(iterable)
箱ひげ図でリストを可視化する	plt.boxplot(データ列)
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: 右三角マーカーを使う	marker = '>'
データフレームを２つの列によってグループ化する	df.groupby(['A', 'B'])
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
リストと配列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
データフレームを表示するとき、折り返しをオフに増やす	pd.set_option('expand_frame_repr', False)
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
破壊的にデータフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
データ列の中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
2つのカウンタのいずれかに含まれる値を求める	aCounter | aCounter2
等差数列から乱数を生成する	random.randrange(start, end, step)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
データフレームの重複した行をマスクする	df.duplicated()
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
ロバストな回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
配列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: 青にグラフの色を設定する	color = 'blue'
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
日付データが木曜日か調べる	aDate.weekday() == 3
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
配列の次元を変形する	aArray.reshape(行数, 列数)
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
半透明の一点鎖線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
浮動小数点数の最小値	sys.float_info.min
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
データフレームのリストカラムの中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列の末尾から部分文字列を探す	s.rfind(sub)
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
正弦	math.sin(x)
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
散布図をダークスラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを1000の位で丸める	df.round(-3)
データフレームを'A'列で並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
マップの全項目をクリアする	aDict.clear()
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
三整数のGCD	math.gcd(n, n2, n3)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
四角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
列の各要素に対して、predicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
アルファベットの文字列	string.ascii_letters
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
散布図の丸印の色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: イエローグリーンを使う	color = 'yellowgreen'
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
配列を分割数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
スプリンググリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
タブ	'\t'
表から指定された二つの列を抽出する	df[[column, column2]]
option: 小麦色色を使う	color = 'wheat'
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
集合をリストに変換する	list(aSet)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
グラフを画面用に設定する	sns.set(context='notebook')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
nではない	not n
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
nとn2のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームから指定した４つの列のみ抽出する	df[[column, column2, column3, column4]]
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
コーンズシルク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
オーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
改行で区切って二つの文字列を表示する	print(value, value2, sep='\n')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: オーキッド色を用いる	color = 'orchid'
散布図を黒い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
プロットから格子を消す	plt.grid(False)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフをコーンズシルク色を使って描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
辞書の浅いコピーを生成する	aDict.copy()
リストと配列について散布図を描き、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
パターンを前もってASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの数値をまとめて四捨五入する	df.round()
リスト中の要素が全て真か	all(aList)
データフレームのn行まで選択する	df[:n]
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
nが奇数か調べる	n % 2 == 1
セットから要素を取り除く	aSet.remove(element)
配列をビン数nでビニングする	pd.cut(aArray, n)
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
リストと配列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
xが真か確認する	bool(x)
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データ列をヒストグラムとして可視化する	plt.hist(データ列)
文字列の中の大文字・小文字を無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
整数nをn2分の一にする	n //= n2
データを最大最小として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
重複した行だけを選択する	df[df.duplicated(keep=False)]
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
eの乗数	math.exp(x)
option: アンティークホワイトを使う	color = 'antiquewhite'
両端キューの先頭を使う	deq[0]
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
二つのオブジェクトは同一参照か調べる	obj is obj2
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
数式を数値に変換する	float(e)
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
二つの文字列は同じでないか調べる	s != s2
option: 欠損値を先頭にする	na_position = 'first'
リストの先頭を捨てる	aList[1:]
データ列をn個に等量でビン分割する	pd.qcut(ds, n)
等量でn個にリストをビン分割する	pd.qcut(aList, n)
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
option: マーカーの線幅を変更する	markeredgewidth = 2.5
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
イテラブルを累加する	itertools.accumulate(iterable)
△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
変数名をキーとして、マッピングを作成する	dict(name=element)
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
二つの関係が真上位集合	aSet > aSet2
横軸の目盛を非表示にする	plt.xticks([])
データ列の欠損値をxで埋める	ds.fillna(x)
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
カウンタの上位を列挙する	aCounter.most_common(k)
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
実数に実数を掛ける	x * y
パールゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
ユーザが整数を入力する	int(input())
option: 右三角マーカーを描画する	marker = '>'
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
辞書の値の一覧	aDict.values()
option: グラフの色をライトスチールブルーに変更する	color = 'lightsteelblue'
二変数の最小値	min(x, y)
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
option: 色をシスルに設定する	color = 'thistle'
散布図に黒い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: ディムグレー色を使う	color = 'dimgray'
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
データフレームを各列毎に集計して列の分散を算出する	df.groupby(column)[column2].var()
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
リストから配列を初期化する	np.array(aList)
文字列の末尾を見る	s[-1]
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
偽	False
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付データの月数	aDate.month
パールバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='palevioletred')
データフレームのリストカラムの欠損値をメディアンに増やす	df[aList].fillna(df[aList].median())
データフレームのリストカラムの中にいくつ欠損値が存在するかカウントする	df[aList].isna().sum()
変数をスワップする	x, y = y, x
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
カウンタの要素をリストとして得る	aCounter.keys()
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
Pandasで、タイムスタンプ型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
配列をイテラブルから作る	np.array(iterable)
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストのn番目に文字列を挿入する	aList.insert(n, element)
リストの値を昇順に並べる	sorted(aList, reverse=True)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
浮動小数点数の三乗	x ** 3
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
色付きの実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
両端キューの右側に数値を追加する	deq.append(element)
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
連立方程式の解を計算する	sympy.solve([e, e2])
データフレームを複数の列によって整列して、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを列によってグループ化して、各グループ毎の最小値を求める	df.groupby(column).min()
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
半透明の一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
表データを使用する	import pandas as pd
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: グレー色を用いる	color = 'grey'
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
文字列タブ区切りのファイルからn番目のカラムをインデックスとしてカンマ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: どのカラムもインデックスにしない	index_col = None
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
数字を全部使う	string.digits
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
option: ダークグレー色を使う	color = 'darkgrey'
'A'列でによってデータフレームを破壊的にソートする	df.sort_values(by='A', inplace=True)
ValueMapでまとめてデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
option: 改行しない	end = ''
ファイルからストリームをオープンして]fileとする	file = open(filepath)
文字列をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
データフレームの中に含まれる文字列の合計をカウントする	df.isin([value]).sum()
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
日付時刻データと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
箱髭図を二つ並べて描く	plt.boxplot([データ列, データ列])
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
日付データが何曜日か知る	aDate.weekday()
折れ線グラフの色をサンディーブラウンにセットする	plt.plot(データ列x, データ列y, color='sandybrown')
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
データフレームのカラムの最頻値を求める	df[col].mode()
空のロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
表の列の値がx以下の行を取り出す	df[df[column] <= x]
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムを赤くする	plt.hist(データ列, color='r')
末尾から部分文字列で文字列を区切る	s.rsplit(sub)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
要素ひとつのりストを作る	[element]
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
散布図に青い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
確率的勾配降下を用いてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
実行結果を緑色でプリントする	print(f'\033[32m{value}\033[0m')
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
predicateFuncが真となるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
option: グラフの色をライトブルーに設定する	color = 'lightblue'
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
モデルを当てはめる	model.fit(説明変数, 目的変数)
棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
縦軸だけグリッド線	plt.grid(axis='y')
ベクトルの要素数	aArray.size
xが一桁の正の数か調べる	0 <= x <= 9
option: レモンシフォン色を使う	color = 'lemonchiffon'
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: 欠損値も無視しない	dropna = True
0から始まる無限イテラブル	itertools.count()
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
ファイルをクローズする	f.close()
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
実数を実数で割って、切り捨てる	x // y
線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
辞書からキーで指定された項目をポップする	aDict.pop(key)
角度のラジアン	math.radians(degree)
黒い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
白いグリッド線を引く	plt.grid(color='w')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
option: 大文字・小文字を無視する	flag = re.IGNORECASE
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
option: 読み込みモードにセットする	mode = 'r'
既存のファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
行列の転置行列	aArray.T
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
二つの文字列は同じか	s == s2
第２引数で指定されたファイルの名前	sys.argv[1]
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
ファイルパスをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
n進文字列を整数に変換する	int(s, n)
カウンタを高頻度方からリストとして得る	aCounter.most_common()
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
実数のkを底とする対数	math.log(x, k)
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
option: ライトサーモン色を用いる	color = 'lightsalmon'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
散布図をrgbの大バツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タプルの要素を逆順にする	aTuple[::-1]
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
option: マーカーを丸に変更する	marker = 'o'
文字列の大文字と小文字を交換する	s.swapcase()
要素を双方向キューの末尾から取り除く	deq.pop()
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
データ列の未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データ列の曜日の名前	ds.dt.weekday_name
データフレームの中央値	df.median()
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
イテラブルからサンプリングする	random.sample(iterable)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
変数を黒色にする	f'\033[30m{value}\033[0m'
option: ライトシアンに色をする	color = 'lightcyan'
カテゴリで色分けして、データフレームをに箱ひげ図で描く	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
最後の部分文字列で文字列を分割した時の最初の文字列	s.rpartition(sub)[0]
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
配列の累積積	np.cumprod(aArray)
配列の要素数	aArray.size
グラフをポスター用に設定する	sns.set(context='poster')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: ダイアモンド印を加える	marker = 'D'
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
オプションで、標準エラーを使う	file = sys.stderr
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
各列毎にデータフレームをグループ分けし、、列の最大値を求める	df.groupby(column)[column2].max()
マッピングのキーの一覧を得る	aDict.keys()
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
追加用にファイルを開いて]、fとする	f = open(filepath, mode='a')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: グラフの色をアクアマリンにセットする	color = 'aquamarine'
回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
xが-9以上9以下か調べる	-9 <= x <= 9
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
配列が何のデータ型か調べる	aArray.dtype()
数列の推移を色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
２つのデータフレームを横方向に一つにする	pd.merge(df, df2)
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
グラフの見栄えを綺麗にする	import seaborn as sns
既にロードされたモジュールの一覧	sys.modules
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
文字列内にひとつでも空白が含まれるか	any(c.isspace() for c in s)
データフレームを列によってソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ファイルパスをSJISを使って書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
黒い△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をコーラルに設定する	color = 'coral'
数値をシアンで出力する	print(f'\033[36m{value}\033[0m')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
にバイオリン図を使ってデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
要素が集合に含まれるかテストする	element in aSet
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
0からnまでの整数列	list(range(n+1))
option: グラフの色をラベンダーに変更する	color = 'lavender'
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列が文字列リストのいづれ	s in aStringList
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームのヒストグラムを横に並べてプロット化する	sns.displot(df, x='列名', col='カテゴリ名')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ふたつの集合の和集合	aSet.union(aSet2)
データフレームの最頻値	df.mode()
書式をマッピングでフォーマットする	formatText.format_map(aDict)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
標準出力のバッファをフラッシュする	sys.stdout.flush()
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
option: パパイヤウィップ色を使う	color = 'papayawhip'
データ列のユニークな要素数を見る	ds.nunique()
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
データフレームからn行、サンプリングする	df.sample(n)
実数に実数を足す	x + y
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
実数の正弦の逆数を計算する	math.asin(x)
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
列を用いてデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
点線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dotted')
データフレームの相関行列ピアソン積率相関係数として	df.corr(method='pearson')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
option: ターコイズを用いる	color = 'turquoise'
数値を部分分数に展開する	sympy.apart(e)
リストとデータ列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
正接を計算する	math.tan(x)
折れ線グラフを赤い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
nとkのnCk	math.comb(n, k)
マッピングのキーの値	aDict[key]
グラフのタイトルを設定する	plt.title('グラフの名称')
数式の部分分数化を行う	sympy.apart(e)
散布図をポイント印を使い、描画する	plt.scatter(データ列x, データ列y, marker='.')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
リストから文字列と等しい最初の要素を除く	aList.remove(element)
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
カウンタの全出現回数	aCounter.total()
オブジェクトがリストの要素でないかどうか	element not in aList
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
コマンド引数の一覧	sys.argv[1:]
option: コロンをセパレータで使う	sep = ':'
両端キューのn番目	deq[n]
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
本日が土曜日かどうか	datetime.datetime.today().weekday() == 5
データフレームを複数の列によってグループ化し要約統計量を求める	df.groupby(columns).describe()
オブジェクトがリストかタプルか確認する	isinstance(obj, (list)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
ヒストグラムの色をダークカーキにする	plt.hist(データ列, color='darkkhaki')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
直後の値でデータフレームの欠損値を置き換える	df.fillna(method='bfill')
配列をビン数nでビン分割する	pd.cut(aArray, n)
x,yの複素数	complex(x, y)
option: 改行なし	end = ''
縦軸の目盛を対数に変更する	plt.yscale('log')
モードでデータフレームのリスト列の欠損値を置き換える	df[aList].fillna(df[aList].mode().iloc[0])
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データ列の曜日が何日目か見る	ds.dt.dayofweek
数列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: バツマーカーを描画する	marker = 'x'
option: グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
日付時刻データが何分か知る	aDatetime.minute
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データフレームの要約統計量	df.describe()
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
二つのリストを文字列で区切ってプリントする	print(value, value2, sep=s)
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームが正規分布からどの程度、尖っているか確認する	df.skew()
データフレームの列を100の位で四捨五入する	df[col].round(-2)
option: 耐火レンガ色を使う	color = 'firebrick'
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
オブジェクトが関数か調べる	callable(obj)
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
白色で文字列を表示する	print(f'\033[37m{value}\033[0m')
方程式として数式を解く	sympy.solve(e)
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: フォントの色を黄緑に設定する	color = 'chartreuse'
半透明の点線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ライトスカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
辞書の浅いコピーを作る	aDict.copy()
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームのメディアンを求める	df.median()
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
辞書から最後に追加した項目をポップする	aDict.popitem()
option: シエナ色を使う	color = 'sienna'
イテラブルを文字列リストに変換して、'改行でつなげる	'\n'.join(map(str, iterable))
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
データ列が何日か見る	ds.dt.day
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
スカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
option: グラフの色をオリベドラブに指定する	color = 'olivedrab'
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
列によってで破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
文字列モジュールをインポートする	import string
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
option: フォントの色をディムグレーに変更する	color = 'dimgray'
タプルをナンバリングする	enumerate(aTuple)
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
実数の逆正弦	math.asin(x)
option: 色をディムグレーに変更する	color = 'dimgray'
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
綺麗なグラフを使う準備をする	import seaborn as sns
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
縦棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
TSVを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
行列の列	aArray[:, 列番号]
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
nがn2以上か調べる	n >= n2
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
マップに要素をキーとして加える	aDict[key] = element
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
データ列の未入力値を最小値で埋める	ds.fillna(ds.min())
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
黄色で値を表示する	print(f'\033[33m{value}\033[0m')
option: マゼンタ色を使う	color = 'magenta'
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
nが一桁の整数か調べる	0 <= n <= 9
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
オブジェクトは文字列か調べる	isinstance(obj, str)
option: ダークグレーを使う	color = 'darkgray'
データフレームを列でソートする	df.sort_values(by=column)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 色をオレンジレッドに設定する	color = 'orangered'
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
option: グラフの色をカーキに設定する	color = 'khaki'
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
option: ゴールド色を使う	color = 'gold'
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
option: アリスブルー色を用いる	color = 'aliceblue'
リストとリストの散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
文字列を空白で分割して、整数リストに変換する	map(int, s.split())
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
option: ゴールデンロッド色を使う	color = 'goldenrod'
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームのそれぞれのグループごとの標準偏差を求める	df.groupby(column).std()
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
データフレームをグループ化し、それぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
自然数個からk個取り出した場合の順列の総数を求める	math.perm(n, k)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
option: リネン色を使う	color = 'linen'
線グラフの色をパープルにセットする	plt.plot(データ列x, データ列y, color='purple')
ミディアムシアグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
option: グラフの色を青にセットする	color = 'blue'
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
整数nを八進表現に変換する	oct(n)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレームのデータ型の一覧	df.dtypes
データフレームの列がxの行を抽出する	df[df[column] == x]
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
棒グラフをグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='green')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
JSON形式のfをデータに変換する	json.load(fin)
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
JSONLファイルにCSV形式でデータフレームを保存する	df.to_csv(filename)
nとn2の商	n / n2
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
データフレームの末尾n行を抽出する	df.tail(n)
リストの要素を昇順にソートする	sorted(aList, reverse=False)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
文字列を黄色にする	f'\033[33m{value}\033[0m'
データフレームを表示するときヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの欠損値がある箇所に色をつける	df.style.highlight_null()
データフレームのカラムの曜日名	df[col].dt.weekday_name
パールゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
偽陽性を抑えたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
実数を小数点以下で丸める	round(x, n)
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
文字列を右寄せにする	s.rjust(文字列幅)
カデットブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームがどの程度、分散しているか見る	df.var()
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
作画の背景色を暗くする	sns.set(style='darkgrid')
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: マルーン色を使う	color = 'maroon'
データフレームの指定された列をリストに変換する	df[column].values.tolist()
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
データ列の各データ値の出現回数を計算する	ds.value_counts()
nから無限にカウントアップする	itertools.count(start=n)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の菱形マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: ライトグレー色を使う	color = 'lightgrey'
実数の双曲線余弦の逆数を算出する	math.acosh(x)
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
option: スラッシュを区切り記号で使う	sep = '/'
折れ線グラフの色をレベッカパープルにする	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列の中のパターンによる全マッチを使う	re.findall(pattern, s)
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ライトグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='lightgreen')
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
1からnまでの整数リスト	list(range(1, n+1))
データ列の各データが何回出現するか見る	ds.value_counts()
平方根	math.sqrt(x)
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
グラフの中のy座標にラベルをつける	plt.ylabel('y軸ラベル')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
日付データからn分引く	aDate - datetime.timedelta(minutes=n)
option: 色をスノーに設定する	color = 'snow'
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: ナバホホワイトを用いる	color = 'navajowhite'
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
ラベンダーブラッシュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
ファイルパスを開く]	open(filepath)
kを底とする実数の対数	math.log(x, k)
数式の数値を求める	float(e)
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
タプル中の要素が全て真か調べる	all(aTuple)
データフレームのインデックスの一覧	df.index
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列を置き換える	s.replace(sub, newsub)
グラフの補助目盛を有効にする	plt.minorticks_on()
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
option: グラフの色をオレンジに設定する	color = 'orange'
option: グラフの色をフクシアに設定する	color = 'fuchsia'
option: ミスティローズ色を使う	color = 'mistyrose'
商と余りを同時に求める	divmod(x, y)
ファイルからn文字、読み込む	f.read(n)
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ミディアムシアグリーンにフォントの色を変更する	color = 'mediumseagreen'
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
いつまでもカウントアップする	itertools.count()
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
サイコロ	random.randint(1, 6)
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
配列の最小を計算する	np.min(aArray)
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
淡いピンク色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
二点間のユークリッド距離	math.dist(point, point2)
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
双方向キューの最後の要素	deq[-1]
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
タプルの要素を小さい順にソートする	sorted(aTuple, reverse=False)
option: グラフの色を青緑に設定する	color = 'teal'
データフレームのカラムの尖度	df[col].skew()
要素が辞書の値に含まれていないか	element not in aDict.values()
データフレームを各列毎に集約して、文字列というグループを使う	df.groupby(column).get_group(s)
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
太字で実行結果を表示する	print(f'\033[1m{value}\033[0m')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
nまでの奇整数列を作る	list(range(1, n, 2))
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
スタックの先頭にシーケンスの各要素を付け加える	deq.extendleft(iterable)
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
日付時刻データの年数	aDatetime.year
日付データが金曜日	aDate.weekday() == 4
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
option: 配列のデータ型を指定する	dtype = np.int8
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
縦棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
プロットの描画で暗く色を使う	sns.set(pallete='dark')
option: ホットピンク色を使う	color = 'hotpink'
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nの桁数	len(str(n))
パターンに文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
xでデータフレームのリストカラムの未入力値を置き換える	df[aList].fillna(x)
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: グラフの種類を実線に設定する	linestyle = 'solid'
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
1行だけ標準入力から読み込む	sys.stdin.readline()
year年の日付	datetime.date(year=year, month=1, day=1)
プロットの使途を論文に設定する	sns.set(context='paper')
プラットホームはWindowsかどうか調べる	sys.platform.startswith('win32')
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列がいつまでも続くイテラブル	itertools.repeat(element)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
既存の行列を元に全要素が初期値の配列を作成する	np.full_like(aArray, 初期値)
リストの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
nが1、もしくは2か調べる	n == 1 or n == 2
両端キューのn番目に要素を挿入する	deq.insert(n, element)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
本日の日付時刻	datetime.datetime.now()
折れ線グラフに凡例を付ける	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: グラフの色をデピンクに設定する	color = 'deeppink'
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
文字列を最初の部分文字列で分割した場合の前半の文字列を使う	s.partition(sub)[0]
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
折れ線プロットの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
異なるカラムをキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
カテゴリで色付けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
バイナリモードを用いてファイルをオープンする]	open(filepath, mode='rb')
データフレームのそれぞれのグループの合計を計算する	df.groupby(column).sum()
文字列はタイトルケースか調べる	s.istitle()
関数の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(関数).describe()
実数を実数に掛ける	x * y
option: 左三角マーカーを使う	marker = '<'
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
シードをnで固定する	random.seed(n)
キーが辞書上で未定義か調べる	key not in aDict
データ列の各データは何回出現するか見る	ds.value_counts()
数式を簡単化する	sympy.sympify(e)
Pandasで、データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
２つの配列を箱ひげ図にする	plt.boxplot([データ列, データ列])
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: データ型としてブール型を使う	dtype = np.int32
CSVからデータフレームを読む	pd.read_csv(filename, sep=',')
キューのstart番目からend番目までの部分データ	collections.deque(itertools.islice(deq, start, end))
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
option: ダークターコイズ色を使う	color = 'darkturquoise'
方程式として数式の変数の解を求める	sympy.solve(e, z)
nが2で割り切れるかどうかテストする	n % 2 == 0
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームのリストカラムの中にと文字列があるか	df[aList].isin([value, value2])
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
option: 色を青紫に指定する	color = 'violet'
option: グラフの色をターコイズに設定する	color = 'turquoise'
option: グラフの色をトマトにする	color = 'tomato'
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
option: パレットトルコイズにグラフの色を指定する	color = 'paleturquoise'
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
キューのサイズ	len(deq)
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
正規表現patternでreplにまとめてデータ列の値を置換する	ds.replace(pattern, repl, regex=True)
スラグレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
グラフにグリッド線を入れる	plt.grid(True)
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
小数点数の指数部	math.frexp(x)[1]
リストの推移を赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームの標本標準偏差	df.std()
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームの指定された列を配列にする	df[column].values
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図を赤い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データ列の推移を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
option: マーカーを星に設定する	marker = '*'
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
イテラブルから両端キューを作る	collections.deque(iterable)
ひとつでも英数字が文字列内にあるか調べる	any(c.isalnum() for c in s)
黒い▼マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
乱数シードをnで固定する	random.seed(n)
改行せずに二つの変数をプリントする	print(value, value2, end='')
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
option: ターコイズ色を使用する	color = 'turquoise'
xが真かどうかテストする	bool(x)
ハニーデュー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームを列によってソートし、更新する	df.sort_values(by=column, inplace=True)
n個の数値イテラブル	range(n)
浮動小数点数の複素数を求める	complex(x)
option: 決定木の深さを制限する	maxdepth = n
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
'A'列でデータフレームをソートして更新する	df.sort_values(by='A', inplace=True)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ラインを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフの星マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ユニークな値を要素とする配列を使う	np.unique(aArray)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
nプラスn2	n + n2
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
集合から任意の要素を取り出す	aSet.pop()
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
柱状図でデータフレームの列を描く	plt.hist(df[column])
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
実行時に標準出力がパイプか確認する	not sys.stdout.isatty()
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ファイルをオープンして]読み込みストリームを使う	open(filepath, mode='r')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
xが1、もしくは2か調べる	x == 1 or x == 2
ビン数nで配列を分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの中の欠損値がある行を落とす	df.dropna()
option: シルバー色を使う	color = 'silver'
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
xを整数にする	int(x)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
カラムの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
option: シルバーにフォントの色を設定する	color = 'silver'
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
実数とyの斜辺	math.hypot(x, y)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
実数は無限大か調べる	math.isinf(x)
ファイルパスからディレクトリ名を見る	os.path.dirname(filepath)
option: グラフの色をピンクに設定する	color = 'pink'
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
アークコサイン	math.acos(x)
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
整数nが配列のどれかか調べる	n in aArray
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
プロットの色を全般的に暗くする	sns.set(pallete='dark')
t-SNEの準備をする	model = sklearn.manifold.TSNE(n_components=n)
リストを折れ線プロットで作図する	plt.plot(データ列x, データ列y)
option: バッファリングのサイズを設定する	buffering = 4096
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
nとn2の論理積を算出する	n & n2
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
クラス分類をパーセプトロンとしてする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
現在の再帰の最大回数	sys.getrecursionlimit()
改行する	print()
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
散布図の下三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
配列と数列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
インディアンレッド色としてヒストグラムを描画する	plt.hist(データ列, color='indianred')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
リストと配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
xを文字列にしてファイルに書き込む	f.write(str(x))
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
各列毎にデータフレームをグループ化して、列の個数を求める	df.groupby(column)[column2].count()
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
リストのn番目の要素を削除する	del aList[n]
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
正規化された度数分布図をプロットする	plt.hist(データ列, density=True)
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
option: パレットトルコイズ色を使う	color = 'paleturquoise'
option: パレットトルコイズを使う	color = 'paleturquoise'
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
option: グラフの色をライトイエローにセットする	color = 'lightyellow'
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
nの二進表現	bin(n)
データフレームのリスト列の相関行列ピアソン積率相関係数で	df[aList].corr(method='pearson')
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 追加モードに指定する	mode = 'a'
リストを引数として展開して表示する	print(*aList, sep=',')
辞書のコピーを用意する	aDict.copy()
option: グラフの色をミントクリームに設定する	color = 'mintcream'
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: グラフの線の種類を破線に変更する	linestyle = 'dashed'
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
ピアソン積率相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
表データの列がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
部分文字列を文字列の先頭から探す	s.find(sub)
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームの列のユニークな値	df[col].unique()
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
配列の全要素の値を変更する	aArray[:, :] = 指定の値
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
角度のラジアンを求める	math.radians(degree)
option: アクアマリンを用いる	color = 'aquamarine'
赤いグリッド線を引く	plt.grid(color='r')
綺麗なグラフを使う	import seaborn as sns
データフレームのカラムのユニークな値	df[col].unique()
双方向キューの最後に列の要素を追加する	deq.extend(iterable)
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの列の未入力値を最大値で埋める	df[col].fillna(df[col].max())
値を両端キューの最初から取り出す	deq.popleft()
option: UTF8を使う	encoding = 'utf-8'
データ列とリストの散布図を描いてマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
文字列中の小文字を大文字に変換する	s.upper()
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
option: アンティークホワイトを用いる	color = 'antiquewhite'
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
n個にリストを等間隔でビン分割する	pd.cut(aList, n)
未初期化の配列	np.empty(要素数, dtype=np.int)
データフレームのリストカラムの分散	df[aList].var()
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ベクトルのユニークな要素ごとの頻度を求める	np.unique(aArray, return_counts=True)
オプションで、出力先を標準出力に設定する	file = sys.stdout
散布図の左三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
日付時刻データが何月か知る	aDatetime.month
リストを複製する	aList.copy()
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
キューをイテラブルから作る	collections.deque(iterable)
グラフのy軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
キーが辞書上で定義済みか調べる	key in aDict
option: パウダーブルー色を用いる	color = 'powderblue'
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
ユーザから入力される	input()
要素が集合のメンバーでないか調べる	element not in aSet
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
列一覧	df.info()
データフレームをグループ化して、ヒストグラムを使って可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
2を底とする対数	math.log2(x)
データフレームを各列と列の組み合わせ毎に集約して分散を算出する	df.groupby([column, column2], as_index=False).var()
昇順にリストの要素をソートする	sorted(aList, reverse=True)
グラフ中のフォントを設定する	sns.set(font=フォント名)
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
カウンタ同士でユニオン	aCounter | aCounter2
nとn2の論理和	n | n2
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストの重複を除去する	sorted(set(aList), key=aList.index)
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
整数nの16進文字列を使う	hex(n)[2:]
列によってデータフレームをソートし、、新しいインデックスを加える	df.sort_values(columns).reset_index()
リストとリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
数値をプリントする	print(value)
整数nの八進表現	oct(n)
空のタプル	()
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
グラフの簡単な説明の位置を指定する	plt.legend(loc=(x, y))
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
グラフで使う名前をセットする	plt.title('グラフの名称')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
option: 改行を区切り記号で使用する	sep = '\n'
二つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
モデルの残差を求める	目的変数 - model.predict(説明変数)
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ベクトルの累積和を求める	np.cumsum(aArray)
行列の分散を計算する	np.var(aArray)
データフレームを関数によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
全てのシートをエクセルデータファイルから読み込む	pd.read_excel(filename, sheet_name=None)
グリッドを破線にする	plt.grid(linestyle='dashed')
折れ線グラフの線種を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データ列の推移を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
option: ベージュ色を使う	color = 'beige'
リストの末尾のn要素を取り除く	aList[:-n]
オプションで標準エラーを出力先にする	file = sys.stderr
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
現在が何時か知る	datetime.date.today().hour
イテラブルと配列についての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
データ列の月	ds.dt.month
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
三つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
マッピングを浅くコピーする	aDict.copy()
句読点文字を全部使う	string.punctuation
二つのオブジェクトが同一参照か調べる	obj is obj2
整数nは集合のどれかかどうか調べる	n in aSet
正規表現を使う	import re
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
値を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
データフレームを'A'列の値でグループ化し要約統計量を計算する	df.groupby('A').describe()
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
昇順にデータフレームを'A'列でソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: グラフのスタイルを破線に設定する	linestyle = 'dashed'
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームの先頭n行	df.head(n)
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: グラフの色を耐火レンガにセットする	color = 'firebrick'
データフレームを小数点以下n桁で丸める	df.round(n)
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームを２つの列でソートする	df.sort_values(by=['A', 'B'])
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームを'A'列でまとめたグループ	df.groupby('A')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
CSVを読み込む	pd.read_csv(filename, sep=',')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
乱数の配列を作る	np.random.random(N)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
代数計算を使用する	import sympy
横棒プロットを描画し、、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
部分文字列を文字列の末尾から探す	s.rfind(sub)
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
データ列の要約統計量	ds.describe()
集合からエラーなく要素を取り除く	aSet.discard(element)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: ダークカーキを用いる	color = 'darkkhaki'
グラフの用途を画面に設定する	sns.set(context='notebook')
散布図に▲マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
rgbのクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
文字列がタプルに含まれないかどうか調べる	element not in aTuple
option: グラフの色をフクシアに指定する	color = 'fuchsia'
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
辞書に項目名が存在しない場合、要素を追加する	aDict.setdefault(key, element)
異なる列をキーとして2つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
nとn2の積	n * n2
タプルのn番目以降の部分を取り出す	aTuple[n:]
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
πを使う	math.pi
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
option: グラフの色をインディゴに指定する	color = 'indigo'
文字列を太字で表示する	print(f'\033[1m{value}\033[0m')
option: フォレストグリーンにグラフの色を指定する	color = 'forestgreen'
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
データフレームの列をインデックスに設定する	df.set_index(column)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
タプルの値を並べる	sorted(aTuple)
文字列をバイト配列に変換する	bytearray(s)
列の値によってデータフレームを集約し、それぞれのグループごとの最小値を求める	df.groupby(column).min()
値が集合に含まれるか調べる	element in aSet
データフレームを行によって小さい順にソートする	df.sort_index(ascending=True)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列をセパレータで分割する	s.split(sub)
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
option: 大バツマーカーを描画する	marker = 'X'
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
エンディアンを確認する	sys.byteorder
文字列を代数計算の変数に変換する	sympy.Symbol(s)
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ローングリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ネイビー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
タプルの先頭	aTuple[0]
リストからオブジェクトを取り除く	aList.remove(element)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
散布図の▼印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
縦棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
nとn2のXOR	n ^ n2
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
ファイルからn文字読み込む	f.read(n)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
棒グラフを淡いピンク色色を使って描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: ゴーストホワイトにフォントの色をセットする	color = 'ghostwhite'
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
グラフの凡例を表示する	plt.legend()
実数の二乗	x ** 2
散布図を黒いクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームを列で並べる	df.sort_values(by=column)
ピアソン積率相関係数でデータフレームの相関行列を算出する	df.corr(method='pearson')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データ列をインポートする	import pandas as pd
ラインを青い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列をビン数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
キューの左側から要素を取り出す	deq.popleft()
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
option: ダークレッドに色を設定する	color = 'darkred'
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データ列の分	ds.dt.minute
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
リストの四分位を可視化する	plt.boxplot(データ列)
データ列の未入力値を最大値に設定する	ds.fillna(ds.max())
nがn2以下、または、n3以上かどうか調べる	n <= n2 or n >= n3
型が名前付きタプル	issubclass(C, tuple)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
整数nを2進リテラルに変換する	bin(n)
n個の整数列	list(range(n))
option: アクアマリンにグラフの色を変更する	color = 'aquamarine'
データフレームのインデックスがnの行を抽出する	df.loc[n]
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
nを否定する	not n
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
リストとリストについて散布図をプロットして、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
x座標だけグリッド線	plt.grid(axis='x')
標準出力のバッファを即時表示する	sys.stdout.flush()
option: マーカーを下三角に変更する	marker = 'v'
乱数の行列	np.random.random((行数, 列数))
実部と虚部から複素数	complex(x, y)
正規表現をコンパイルする	re.compile(pattern)
破壊的に降順にデータフレームを複数の列によって並べる	df.sort_values(by=column, ascending=False, inplace=True)
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
option: スレートブルー色を使用する	color = 'slateblue'
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
ファイルパスが存在するか調べる	os.path.exists(filepath)
ホワイトスモーク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: スカイブルー色を使う	color = 'skyblue'
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
eの実数乗を求める	math.exp(x)
赤い点線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームの列の中に日付データとがいくつあるかカウントする	df[col].isin([value, value2]).sum()
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
データフレームを列によってグループ化してそれぞれのグループ毎の最大値を計算する	df.groupby(column).max()
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
最大長を指定して双方向キューを作成する	collections.deque(maxlen=n)
グラフからグリッド線を表示しない	plt.grid(False)
縦棒グラフを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームのカラムがどの程度分散しているか見る	df[col].var()
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ヒストグラムを描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
辞書をカウンタに変換する	collections.Counter(aDict)
三数の最小値を求める	min(x, y, z)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
配列の標準偏差	np.std(aArray)
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
配列と配列について散布図を描画して、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをコーンズシルク色を使って描画する	plt.barh(データ列x, データ列y, color='cornsilk')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
リストの最後の要素	aList[-1]
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
グラフに使うフォントを指定する	sns.set(font=フォント名)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
タプルの先頭の値	aTuple[0]
データ列の中にあると文字列の個数を数える	ds.isin([value, value2]).sum()
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
option: 赤色を使う	color = 'red'
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
リストと数列の散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
オプションで、標準出力を使う	file = sys.stdout
文字列を文字コード列に変換する	[ord(ch) for ch in s]
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
リストとデータ列についての散布図に黒いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
散布図の右三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
実数が有限か調べる	math.isfinite(x)
文字列の先頭から空白を除く	s.lstrip(' ')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
リストとリストについて散布図を描いて、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
最小値で列のNaNを埋める	ds.fillna(ds.min())
データフレームのカラムの中にいくつ欠損値があるかカウントする	df[col].isna().sum()
インデント幅nで、辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
2つのリストから辞書を作る	dict(zip(aList, aList2))
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
三つの文字列を順にプリントする	print(value, value2, value3)
配列を2次元1行に変形する	aArray.reshape(1, -1)
rgbの三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
option: ミッドナイトブルーに色を設定する	color = 'midnightblue'
縦棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
線グラフをローングリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
タプルを集合に追加更新する	aSet.update(iterable)
データ列の欠損値をxに設定する	ds.fillna(x)
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
散布図をクロスマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
クラス分類の偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
二変数の最大値	max(x, y)
印字できる文字を全部使う	string.printable
rgbの大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
折れ線グラフをダークレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
実数がNaNか調べる	math.isnan(x)
option: フォントの色をペールグリーンに変更する	color = 'palegreen'
実数の小数部	math.modf(x)[0]
行列の逆行列	np.linalg.inv(aArray)
option: グラフの線種を実線に設定する	linestyle = 'solid'
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
シーケンスにシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
実数のn乗して実数による余り	pow(x, n, y)
試しに何か動かす	print('Hello World')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ブール型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int32)
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
折れ線グラフをミディアムバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムを白色を用いて描画する	plt.hist(データ列, color='white')
データフレームの各グループの平均値	df.groupby(column).mean()
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
データフレームの列の要約統計量	df[col].describe()
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフの色を明るくする	sns.set(pallete='bright')
両端キューの末尾	deq[-1]
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
二つの文字列は同じかどうか調べる	s == s2
コマンドの第二引数を調べる	sys.argv[1]
Pandasで、データ列をフォーマットでPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
赤い星マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
シーケンスから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
イテラブルとリストの散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をプラムにセットする	plt.plot(データ列x, データ列y, color='plum')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
等しい量になるように配列をn個にビン分割する	pd.qcut(aArray, n)
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
作画の背景色を暗くする	sns.set(style='darkgrid')
箱ひげ図でデータフレームの2つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームを複数の列で並べ、更新する	df.sort_values(by=column, inplace=True)
リストを等量で分割数nでビン分割する	pd.qcut(aList, n)
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
文字列の出力を改行なしに行う	print(value, end='')
nがn2か調べる	n == n2
実数の整数部	math.modf(x)[1]
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
プラットホームの名前	sys.platform
円プロットの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
マッピングとしてカウンタを更新する	aCounter.update(aDict)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データ列をビン数nでビン分割する	pd.cut(ds, n)
文字列の開始位置からと終了位置の範囲に部分文字列がある	s.find(sub, start, end) != -1
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
青いグリッド線を引く	plt.grid(color='b')
行列のユニークな要素を求める	np.unique(aArray)
組のn番目からn2番目の部分を取り出す	aTuple[n:n2]
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムを破線として描く	plt.hist(データ列, linestyle='dashed')
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
プラットホームはMacOSかどうか調べる	sys.platform.startswith('darwin')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
辞書の項目名とその値をペアとして取り出す	aDict.items()
データ列の欠損値をxで補う	ds.fillna(x)
option: グラフの色をライムに設定する	color = 'lime'
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
第二引数で指定されたファイルの名前	sys.argv[1]
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
二つの文字列は等しくないかどうか調べる	s != s2
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
option: 丸マーカーを使う	marker = 'o'
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
二次元リストをフラット化する	sum(aList)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列の尖度	ds.skew()
ディープスカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データ列のどの値が頻出か見る	ds.mode()
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
文字列はタプルの要素でないか判定する	element not in aTuple
option: 四角マーカーを使う	marker = 's'
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図をパウダーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='powderblue')
双方向キューの末尾に列の要素を順につけ加える	deq.extend(iterable)
option: フォントの色をダークバイオレットに変更する	color = 'darkviolet'
データ列のタイムゾーンを文字列に変更する	ds.tz_convert(s)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
カウンタを辞書に変換する	dict(aCounter)
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームのリスト列の中に日付データが存在するか調べる	df[aList].isin([value])
列によってデータフレームを整列して、上位n件を取り出す	df.sort_values(columns).head(n)
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
プロットにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームをインポートする	import pandas as pd
実数から数を引く	x - y
ダークシアグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
日付データが日付データよりあとか調べる	aDate > aDate2
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データ列と配列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
option: 線の種類を点線に設定する	linestyle = 'dotted'
文字列をキャピタライズする	s.capitalize()
部分文字列が文字列の開始位置以降にないか調べる	s.find(sub, start) == -1
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
標準入力から1行読み取る	input()
データフレームで何行、重複するか見る	df.duplicated().sum()
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
書き込みできるようにファイルパスを開く]	open(filepath, mode='w')
実行結果を黒色で表示する	print(f'\033[30m{value}\033[0m')
分割数nとして配列をビン分割する	pd.cut(aArray, n)
option: パープルにグラフの色を設定する	color = 'purple'
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
オブジェクトがリストの要素か調べる	element in aList
赤色で変数を表示する	print(f'\033[31m{value}\033[0m')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
文字列のケースを入れ替える	s.swapcase()
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: フォントの色をマゼンタに変更する	color = 'magenta'
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
文字列を部分文字列で区切る	s.split(sub)
指定した値でデータ列をバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
option: オールドレース色を使う	color = 'oldlace'
リストとタプルの直積	itertools.product(iterable, iterable2)
エラーなくマッピングからキーの値を見る	aDict.get(key, None)
データ列を箱ひげ図として描く	plt.boxplot(データ列)
第2引数で指定されたファイルの名前	sys.argv[1]
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
リストとイテラブルについて散布図を描画してダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付時刻データの日数	aDatetime.day
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
日付データが水曜日かどうか確認する	aDate.weekday() == 2
option: 降順にする	ascending = False
文字列の最初	s[0]
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
空のチェーンマップ	collections.ChainMap()
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
分子n、分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
現在のモジュール	sys.modules[__name__]
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
方程式として数値のパラメータの解を求める	sympy.solve(e, z)
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
xを浮動小数点数に変換する	float(x)
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
ワーキングディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
グリッド線	plt.grid(linewidth=3.0)
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
数式の簡略化を行う	sympy.sympify(e)
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの下n行を抽出する	df.tail(n)
▽印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列のn番目	s[n]
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームを'A'列と'B'列によってまとめたグループを使う	df.groupby(['A', 'B'])
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
option: 破壊的に操作する	inplace = True
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
option: 下三角マーカーを使う	marker = 'v'
0からnの範囲	range(n)
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
タプル内の要素が少なくとも一つ真か	any(aTuple)
ファイルを全部、読み込む	f.read()
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
Pandasで、UNIX時間のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームを列によってグループ化して、各グループごとの標準偏差を求める	df.groupby(column).std()
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
nが-9以上、9以下か調べる	-9 <= n <= 9
標準出力を使う	sys.stdout
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
JSONファイルファイル名が	filename.endswith('.json')
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
データフレームを関数によってまとめた表を使う	df.groupby(関数)
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ボックスチャートでデータ列を可視化する	plt.boxplot(データ列)
追加できるようにファイルをオープンする]	open(filepath, mode='a')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
文字コードの最大値を確める	sys.maxunicode
変数がマイナス無限大に近づく際の数式の極限値を算出する	sympy.limit(e, z, -oo)
複数の列によって小さい順にデータフレームを並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
平方根を求める	math.sqrt(x)
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
リストのn番目からn2番目の部分	aList[n:n2]
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームを100の位で丸める	df.round(-2)
カーネル密度推定グラフ描画でを使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
表データを２つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
option: グリーン色を使う	color = 'green'
レモンシフォン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
最大長nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
グリッド線	plt.grid(alpha=0.5)
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ライトスレイグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グリッド線	plt.grid(color='#800080')
option: ベージュにグラフの色を設定する	color = 'beige'
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
n個にデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
改行で文字列を区切る	s.splitlines()
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
辞書のキーを列挙する	list(aDict)
文字列は全て十進数字かテストする	s.isdecimal()
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
シエナ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの印を左三角印にする	plt.plot(データ列x, データ列y, marker='<')
ラベンダー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
散布図を左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
カウンタを高頻度な方から列挙する	aCounter.most_common()
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
浮動小数点数から浮動小数点数を減ずる	x - y
データフレームの中のカラムをビン数nでビン分割する	pd.cut(df[col], n)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
行列演算をする	import numpy as np
option: バツマーカーを用いる	marker = 'x'
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
グラフを正方形にする	plt.axis('equals')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
リストの全ての要素をクリアにする	aList.clear()
両端キューを使用する	import collections
散布図を黒い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
nにn2をかけた値をnとする	n *= n2
配列の合計値	np.sum(aArray)
大文字・小文字を無視してパターンで文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
文字列の右側から空白を取り除く	s.rstrip(' ')
整数nの16進表現	hex(n)
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
option: セパレータをコロンにする	sep = ':'
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データフレームを1000の位で丸めて整数にする	df.round(-3).astype(int)
リストから行列を作る	np.array(aList)
配列のユニークな要素	np.unique(aArray)
浮動小数点数に浮動小数点数を足す	x + y
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
nを2進文字列に変換する	bin(n)[2:]
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
文字列内に英数字が含まれるか	any(c.isalnum() for c in s)
辞書のキーの値	aDict[key]
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
実数の双曲線正接	math.tanh(x)
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: 箱ひげ図に平均を加える	showmeans = False
浮動小数点数を文字列にする	str(x)
数で浮動小数点数を割って小数点以下を切り捨てる	x // y
xが一桁の数	-9 <= x <= 9
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
セットの補集合	aSet.difference(aSet2)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
option: スラッシュを区切りで使う	sep = '/'
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
nullに等しいもの	None
データフレームのリスト列の相関行列	df[aList].corr()
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
option: フォントの色をモカシンに設定する	color = 'moccasin'
二つの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
実数を複素数に変換する	complex(x)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
option: 切片を算出しない	fit_intercept = False
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
option: サンディーブラウン色を使う	color = 'sandybrown'
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
オブジェクトの型	type(obj)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
Pandasで、フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
option: 色をミッドナイトブルーに指定する	color = 'midnightblue'
option: ダークカーキ色を使う	color = 'darkkhaki'
破壊的に列を用いて昇順にデータフレームを並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
n個に等間隔でリストをビン分割する	pd.cut(aList, n)
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図を濃い青色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
最後の値をマップから取り出す	aDict.popitem()
散布図でデータフレームを可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
配列とデータ列の散布図を描いてマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
安全に部分文字列を文字列の先頭から取り除く	s.removeprefix(sub)
数式の平方根を求める	sympy.sqrt(e)
日付時刻データが何時か知る	aDatetime.hour
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
列の文字列長を列として見る	ds.str.len()
option: ミディアムブルー色を使う	color = 'mediumblue'
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
回帰分析をバギングでする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
黒い右三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字列が文字列リストにある	s in aStringList
option: スラグレーにグラフの色を変更する	color = 'slategrey'
整数nがリストのひとつ	n in aList
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
度数分布図を三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
タプルを引数として展開してプリントする	print(*aTuple)
商と余りを同時に計算する	divmod(x, y)
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
本日が何日か知る	datetime.datetime.today().day
option: アンティークホワイトにグラフの色を変更する	color = 'antiquewhite'
システム時刻で乱数を初期化する	random.seed()
整数nを半分にする	n //= 2
両端キューの要素をインプレースに反転する	deq.reverse()
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
ゼロ埋めされた８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int8)
変数が0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
変数をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
nまでの偶整数列	list(range(2, n, 2))
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
数式の積分を行う	sympy.integrate(e)
データフレームの全カラムを散布図を用いて可視化する	sns.pairplot(df)
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ひとつでもアルファベットが文字列内に含まれるか調べる	any(c.isalpha() for c in s)
データ列の平均値	ds.mean()
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
組の末尾からn番目以前の要素を取り出す	aTuple[:-n]
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
数式の変数にnを代入する	e.subs(z, n)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
整数nの二進表現	bin(n)
列の長さnの順列	itertools.permutations(iterable, n)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
option: 書き込みモードを使う	mode = 'w'
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
n回の数値イテラブル	range(n)
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームを列によってグループ化して、グループ毎の個数を算出する	df.groupby(column).count()
ケンドール相関係数を使ってデータフレームの相関行列	df.corr(method='kendall')
アルファベットの大文字列	string.ascii_uppercase
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
両端キューの中に要素が含まれてるか調べる	element in deq
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
シーケンスを文字列に変換して、タブで結合する	'\t'.join(map(str, iterable))
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
プログラムのファイルの名前	sys.argv[0]
データフレームの最後	df.tail()
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
option: ターコイズ色を使う	color = 'turquoise'
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
セットをイミュータブルな集合にする	frozenset(aSet)
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームの中の欠損値がある行を削除する	df.dropna()
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの行を取り出す	df[start:end]
線グラフを色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
部分文字列で文字列が終了するか調べる	s.endswith(sub)
option: グラフの色をグレーに設定する	color = 'gray'
option: ヘッダを連番に設定する	header = None
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
オブジェクトが集合クラスのインスタンスか調べる	isinstance(obj, set)
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
ファイルのディレクトリ名	os.path.dirname(filepath)
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
データフレームとしてCSVファイルを読み込む	pd.read_csv(filename, sep=',')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
option: 青紫色を用いる	color = 'violet'
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
リストとリストについて散布図を描いて、マーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームのn行目をインプレイスで消す	df.drop(n, axis=0, inplace=True)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
オブジェクトをイテレータにする	iter(obj)
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
特異値分解で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
縦横の比率を等しくする	plt.axis('equals')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
行列の行ごとの最大値	np.max(aArray, axis=1)
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
要素ひとつのタプル	(element,)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
数列の出現頻度を可視化する	plt.hist(データ列)
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
カテゴリ別で色付けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
日付データが日付データより前か調べる	aDate < aDate2
変数について数値を微分する	sympy.diff(e, z)
データ列のユニークな値	ds.unique()
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームの列の中に文字列と日付データが含まれる	df[col].isin([value, value2])
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
二つのデータフレームを列'A'と列'B'をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
データ列の中に文字列があるか調べる	ds.isin([value])
ラベンダー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
オブジェクトの参照カウント	sys.getrefcount(obj)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
整数nを二進表現に変換する	bin(n)
nがn2と等しいかどうか調べる	n == n2
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
option: 改行コードをWindowsに設定する	newline = '\r\n'
折れ線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
イテラブルのパーセンタイルを可視化する	plt.boxplot(データ列)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
option: どの行もヘッダにしない	header = None
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
nが一桁の数か確認する	0 <= n <= 9
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
改行せず数値を出力する	print(value, end='')
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
option: リネンにグラフの色をセットする	color = 'linen'
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
二つのカウンタの共通する値	aCounter & aCounter2
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
上三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
リストの要素をソートする	sorted(aList)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
平均値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのリストカラムのNaNを50パーセンタイルに変更する	df[aList].fillna(df[aList].median())
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームから重複した行を残さず、落とす	df.drop_duplicates(keep=False)
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
横軸だけグリッド線	plt.grid(axis='x')
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
option: パープル色を用いる	color = 'purple'
最小値でデータ列の欠損値を補う	ds.fillna(ds.min())
ベクトルの計算をする	import numpy as np
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
表データのリスト列の相関行列ピアソンを用いて	df[aList].corr(method='pearson')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
辞書の全項目をクリアする	aDict.clear()
リストの重複を取り除く	sorted(set(aList), key=aList.index)
nがn2で割り切れないか調べる	n % n2 != 0
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
行列にはいくつ要素があるか調べる	aArray.size
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
棒グラフをホワイトスモーク色を使って描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
実数が無限大か調べる	math.isinf(x)
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
グラフで使うカラーパレットを指定する	sns.set(pallete=パレット名)
既存のベクトルを元に全要素が1の行列	np.ones_like(aArray)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
リストのn番目以降の部分を得る	aList[n:]
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
xのハッシュ値	hash(x)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
SVDで多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
実数を数で	x // y
日付データが日付データより遅いか調べる	aDate > aDate2
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
文字列は全て識別子名か調べる	s.isidentifier()
ユニークな値を要素とする配列	np.unique(aArray)
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
データ列の第一四分位数	ds.quantile(0.25)
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
nがn2より小さいか確認する	n < n2
折れ線グラフの色をデピンクにセットする	plt.plot(データ列x, データ列y, color='deeppink')
リストをビン数nでビン分割する	pd.cut(aList, n)
タプルの中の一番小さい値	min(aTuple)
ファイルが存在しないか	not os.path.exists(filepath)
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームを'A'列の値によってグループ化し記述統計量を求める	df.groupby('A').describe()
カーキ色を使ってヒストグラムを描画する	plt.hist(データ列, color='khaki')
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
データフレームのカラムの時	df[col].dt.hour
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
option: ダイアモンドマーカーを加える	marker = 'D'
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
列をキーにして二つの表データを外部結合する	pd.merge(df, df2, on=column, how='outer')
option: セパレータを改行にする	sep = '\n'
データフレームの欠損値をxで埋める	df.fillna(x)
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
文字列が全てアスキー文字か調べる	s.isascii()
両端キューの中に文字列がある	element in deq
双方向キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
ダークスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslateblue')
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
セパレータで文字列を区切って文字列リストに変換する	s.split(sep)
データフレームを各列毎にグループ分けして、文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
オプションで標準エラーを出力にする	file = sys.stderr
文字列がリストの要素でないか	element not in aList
option: ロイヤルブルー色を使用する	color = 'royalblue'
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
最大最小から行列を作る	np.linspace(最小値, 最大値, 要素数)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
標準入力から1行だけ読む	sys.stdin.readline()
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
マッピングのキーを列挙する	list(aDict)
option: ビスク色を用いる	color = 'bisque'
数式を因数分解する	sympy.factor(e)
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
n個の要素があるリスト	[element] * n
option: 色をライトイエローに設定する	color = 'lightyellow'
option: 色をライムに設定する	color = 'lime'
エクセルファイルファイルからエクセルデータを読み込む	pd.read_excel(filename)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
ヒストグラムを黒くする	plt.hist(データ列, color='k')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
オリーブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
クラス分類の感度を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
散布図をサドルブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
第２コマンド引数	sys.argv[1]
ブランチドアーモンド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
カラムの未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: グラフの色を赤に設定する	color = 'red'
option: 印を下三角に変更する	marker = 'v'
データ列の文字列長を列として使う	ds.str.len()
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
オプションで、ファイルを使う	file = sys.open(filename, 'w')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームのカラムの欠損値を最大値で補う	df[col].fillna(df[col].max())
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
日付データが何月か知る	aDate.month
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
グラフの縦横比を等しくする	plt.axis('equals')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
オプションで出力先をファイルに指定する	file = sys.open(filename, 'w')
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
nにn2をかける	n * n2
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
改行	'\n'
nとn2の排他的論理和	n ^ n2
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
クラス分類の予測精度をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
option: 印を右三角に変更する	marker = '>'
リストに要素を追加する	aList.append(element)
整数nの十六進文字列	hex(n)[2:]
散布図をrgbの下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
nを切り捨てながら半分にする	n //= 2
本日が何月か知る	datetime.datetime.today().month
線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを列によって小さい順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列を消す	df.drop(column, axis=1)
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
散布図を黒い左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c='k')
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ダークマゼンタ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
単回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
カウンタ同士で積集合	aCounter & aCounter2
アルファベットの小文字を全部見る	string.ascii_lowercase
option: 先頭のカラムをインデックスに設定する	index_col = 0
文字列を赤色にする	f'\033[31m{value}\033[0m'
2つのデータフレームを異なる列をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
表から重複した行を破壊的に削除する	df.drop_duplicates(inplace=True)
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
実数を切り下げて整数に変換する	math.floor(x)
データフレームの中にある文字列との合計を数える	df.isin([value, value2]).sum()
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ホワイトスモーク色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
配列をy座標、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
フォレストグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ポイントマーカーを使う	marker = '.'
文字列を部分文字列で二分する	s.partition(sub)
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
データフレームの最頻値を求める	df.mode()
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二つの行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列の開始位置番目と終了位置番目の間に部分文字列がないかどうか調べる	s.find(sub, start, end) == -1
リストをダミー変数に変換する	pd.get_dummies(iterable)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: データ型として整数型を用いる	dtype = np.int
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データ列からユニークな値を抽出しリスト化する	ds.unique().tolist()
線グラフを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
横に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
イテラブルをイミュータブルな集合にする	frozenset(iterable)
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
文字列中に部分文字列がいくつか含まれるか数える	s.count(sub)
２つのデータフレームを異なる列をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
リストをひとつ置きに取り出す	aList[::2]
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
二つの文字列は等しくないか調べる	s != s2
タプルをリストにする	list(aTuple)
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
グラフの色を濃くする	sns.set(pallete='deep')
データ列は何日か見る	ds.dt.day
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
日付データにn時間分加える	aDate + datetime.timedelta(hours=n)
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
グラフの描画を見やすくする	import seaborn as sns
散布図を黒い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 読み込みモードに設定する	mode = 'r'
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
日付時刻データを数値にする	aDatetime.timestamp()
option: 淡いピンク色を使用する	color = 'lightpink'
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームのNaNを最頻値に指定する	df.fillna(df.mode().iloc[0])
データフレームのカラムを100の位で丸めて整数型にする	df[col].round(-2).astype(int)
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
空のリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列が文字列リストのいづれか調べる	s in aStringList
日付データをISO形式の文字列に変換する	aDate.isoformat()
option: グラフの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
フクシア色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列を緑色にする	f'\033[32m{value}\033[0m'
印字可能な文字を全部使う	string.printable
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
カウンタの最も頻出な項目を求める	aCounter.most_common()[0]
リストと数列についての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームから列を一つ選択する	df[[column]]
プロットの補足を表示する	plt.legend()
データフレームのリストカラムの中に日付データがある	df[aList].isin([value])
整数LCM	math.lcm(n, n2)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
白色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
nとn2のビット積	n & n2
データフレームの内の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
タプルの末尾からn番目以前の要素を得る	aTuple[:-n]
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
非アルファベットが文字列中に含まれるか	any(not c.isalpha() for c in s)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームの列をヒストグラムにする	plt.hist(df[column])
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームから数値データのカラムを選択する	df.select_dtypes('number')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
リストとデータ列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
現在が水曜日	datetime.datetime.today().weekday() == 2
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
option: 追加モードを使う	mode = 'a'
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
イテラブルを集合に変換する	set(iterable)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
行列の最小値	np.min(aArray)
円プロットでリストの割合を可視化する	plt.pie(データ列, startangle=90)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームを表示するとき小数点以下の表示精度をn桁に増やす	pd.set_option('precision', n)
データフレームのn行目を選択する	df.loc[n]
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データ列の中に日付データと文字列があるか調べる	ds.isin([value, value2])
データフレームを関数によってまとめたグループ	df.groupby(関数)
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: セパレータをタブにする	sep = '\t'
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
実数の双曲線正弦の逆数	math.asinh(x)
グラフのx座標に説明をつける	plt.xlabel('x軸ラベル')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
option: エラーを無視するように設定する	errors = 'ignore'
逆双曲線正弦を求める	math.asinh(x)
文字列が全て英数字か	s.isalnum()
ライトサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: 紺色を使う	color = 'darkblue'
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
リストにリストを追加する	aList.extend(aList2)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
xを整数に変換する	int(x)
リストとリストについて散布図をプロットして、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームのカラムの秒を使う	df[col].dt.second
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列中の部分文字列を新しい文字列に全部置換する	s.replace(sub, newsub)
option: マーカーの大きさを変更する	markersize = 2.0
項目名が辞書に存在しない場合要素を追加する	aDict.setdefault(key, element)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
データフレームのリスト列の最頻値を求める	df[aList].mode()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
有理数モジュールを使う	import fractions
配列間の要素ごとの最小公倍数を使う	np.lcm(aArray, aArray2)
リストを黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
グラフの背景色を暗くする	sns.set(style='darkgrid')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
配列の行ごとの合計	np.sum(aArray, axis=1)
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
リストの値を昇順に並べ変える	sorted(aList, reverse=False)
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
項目名が辞書上で定義済みか調べる	key in aDict
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ライトシアン色を使う	color = 'lightcyan'
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
ミディアムターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
option: 色を白に設定する	color = 'white'
数列の相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
リストと配列の散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列中の文字を列挙する	list(s)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
option: 三二ビット整数型を使う	dtype = np.int16
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
nかつn2	n and n2
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
散布図の△マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
anemptystring	''
論文用にグラフをセットする	sns.set(context='paper')
nがn2の倍数か調べる	n % n2 == 0
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
青緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
タイムスタンプデータの分数	aDatetime.minute
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
列を配列として取り出す	df[column].values
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
配列と配列についての散布図に凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
文字列がPythonのキーワード	keyword.iskeyword(s)
パープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
貝殻色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
option: 貝殻色を使う	color = 'seashell'
option: ヘッダを自動的な連番に設定する	header = None
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
最大長nの双方向キューを新規生成する	collections.deque(maxlen=n)
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
カウンタを少ない方からリストとして得る	aCounter.most_common()[::-1]
事前に正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームを複数の列で集計する	df.groupby(columns)
バギングとして回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
二つのカウンタの共通する要素	aCounter & aCounter2
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
散布図をrgbの▲マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: マーカーを上三角に指定する	marker = '^'
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
option: マゼンタを使う	color = 'magenta'
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字コードを文字に変換する	chr(unicode)
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
nを八進文字列に変換する	oct(n)[2:]
option: グラフの色を白に設定する	color = 'white'
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
バリーウッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
文字列が文字列より辞書順で後	s > s2
option: ブラックを使う	color = 'black'
三自然数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
リストから文字列を取り除く	aList.remove(element)
option: スチールブルー色を使用する	color = 'steelblue'
2つのデータフレームをジョインする	pd.merge(df, df2)
実数を小数点以下第一位で四捨五入する	round(x, 1)
プラットフォームのコードポイントの最大値	sys.maxunicode
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: ダークスラテグレーを使う	color = 'darkslategray'
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
リストをn回、連結する	aList * n
点線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
いつまでもオブジェクトが繰り返すイテラブル	itertools.repeat(element)
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')

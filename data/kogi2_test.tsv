改行なしに文字列を出力する	print(value, end='')
改行なしに２つの文字列をプリントする	print(value, value2, end='')
＜オプション＞カンマを分割記号で使う	sep = ','
＜オプション＞タブを区切りで使う	sep = '\t'
二つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
マゼンタで数値をプリントする	print(f'\033[35m{value}\033[0m')
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
太字で変数をプリントする	print(f'\033[1m{value}\033[0m')
リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
数値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
リストをシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
二変数の最小値を計算する	min(x, y)
三つの最小値	min(x, y, z)
空のデック	collections.deque()
イテラブルから両端キューを作成する	collections.deque(iterable)
最大長のある両端キュー	collections.deque(maxlen=n)
最大長nの両端キューを列から作る	collections.deque(iterable, maxlen=n)
要素を両端キューの左側につけ加える	deq.appendleft(element)
両端キューに値をエンキューする	deq.appendleft(element)
両端キューに要素をスタックする	deq.append(element)
シーケンスの各要素を順にキューの先頭に付け加える	deq.extendleft(iterable)
双方向キューの右にイテラブルの各値を追加する	deq.extend(iterable)
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
キューの末尾から要素を取り除く	deq.pop()
最初の要素を両端キューから取り除く	deq.remove(element)
両端キューをクリアする	deq.clear()
キューのデータをn個分ローテンションする	deq.rotate(n)
キューの上限	deq.maxlen
双方向キューのサイズを計算する	len(deq)
双方向キューが空であるかどうか調べる	len(deq) == 0
両端キューの中に文字列が存在するか調べる	element in deq
双方向キューの末尾を使う	deq[-1]
スタックから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
スタックのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
両端キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
キュー中の要素のインデックス	deq.index(element)
双方向キュー中の文字列の数を数える	deq.count(element)
両端キューをリストにする	list(deq)
イテラブルからカウンタを作成する	collections.Counter(iterable)
カウンタのそれぞれの項目をカウントだけ列挙する	aCounter.elements()
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
カウンタのktopを列挙する	aCounter.most_common(k)
シーケンスでカウンタを更新する	aCounter.update(iterable)
カウンタの項目の回数	aCounter[element]
カウンタ間でインターセクション	aCounter & aCounter2
カウンタ間でユニオン	aCounter | aCounter2
オブジェクトが名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
辞書をチェーンマップにする	collections.ChainMap(aDict)
マッピングを階層化する	collections.ChainMap(aDict)
時間をインポートする	import time
ISO8601の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
今日の日付時刻	datetime.datetime.today()
タイムスタンプデータの時間	aDatetime.time()
日付時刻データが火曜日	aDatetime.weekday() == 1
本日が火曜日	datetime.datetime.today().weekday() == 1
本日が木曜日	datetime.datetime.today().weekday() == 3
現在が金曜日	datetime.datetime.today().weekday() == 4
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
日付データが日曜日	aDate.weekday() == 6
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
現在の時刻を求める	datetime.date.today().hour
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
日付時刻データがタイムスタンプデータより前	aDatetime < aDatetime2
日付データは日付データより前	aDate < aDate2
日付時刻データが日付時刻データより遅いかどうか調べる	aDatetime > aDatetime2
日付時刻データは日付時刻データと同時か	aDatetime == aDatetime2
日付データは日付データと同時	aDate == aDate2
日付時刻データとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
タプルのキーの値を得る	aDict[key]
辞書の項目名を列挙する	list(aDict)
マッピングのエントリ数	len(aDict)
辞書の全エントリをクリアする	aDict.clear()
タプルを浅くコピーする	aDict.copy()
マップの浅いコピーを作る	aDict.copy()
辞書から項目名の値を見る	aDict.get(key)
マッピングからキーの値かもしくは要素を参照する	aDict.get(key, element)
マップにキーが存在するか調べる	key in aDict
マッピングに項目名が存在するか	key not in aDict
キーがマッピング上でまだ定義されていないか	key not in aDict
マップの項目名とその値を列挙する	aDict.items()
マップのキーを列挙する	aDict.keys()
マップのキーの一覧を参照する	aDict.keys()
要素がマップの値として含まれているか確認する	element in aDict.values()
要素がタプルの値に含まれていない	element not in aDict.values()
辞書に要素を項目名として加える	aDict[key] = element
マッピングに項目名が存在しないとき、要素を追加する	aDict.setdefault(key, element)
辞書にマッピングの項目を更新する	aDict.update(aDict2)
マップから項目名で指定された値をポップする	aDict.pop(key)
マッピングから最後の値をポップする	aDict.popitem()
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルが存在するかどうか調べる	os.path.exists(filepath)
ファイルがないかどうか調べる	not os.path.exists(filepath)
スクリプトファイルのディレクトリ名を見る	os.path.dirname(os.path.abspath(__file__))
ファイルの入力ストリームを使う	open(filepath)
読み込みできるようにファイルを開く]	open(filepath, mode='r')
書き込み用にファイルパスをオープンする]	open(filepath, mode='w')
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
ファイルパスをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
追加モードでファイルをオープンする]	open(filepath, mode='a')
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
ファイルパスを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
ファイルパスから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
バイナリモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='rb')
書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
ファイルをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
追加モードでファイルをオープンして]fとする	f = open(filepath, mode='a')
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
SJISでファイルを開く]	open(filepath, encoding='shift_jis')
ファイルパスを文字コードtextで開く]	open(filepath, encoding=text)
ファイルパスをSJISを用いて書き込みできるように開く]	open(filepath, mode='w', encoding='shift_jis')
EUCで書き込み用にファイルを開く]	open(filepath, mode='w', encoding='euc_jp')
書き込み用にBOM付きとしてファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ファイルを文字コードtextを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ファイルを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
EUCで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
既存のファイルを追加できるように文字コードtextとしてオープンする]	open(filepath, mode='a', encoding=text)
ファイルを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
ファイル全体をリストとして読み込む	f.readlines()
浮動小数点数が負の数かどうか	x < 0
実数の２乗を求める	x ** 2
実数の三乗を求める	x ** 3
浮動小数点数に実数を加える	x + y
実数を浮動小数点数から減算する	x - y
浮動小数点数を実数で割る	x / y
浮動小数点数を実数で割って、切り捨てる	x // y
浮動小数点数を実数で	x // y
浮動小数点数が整数	x.is_integer()
有理数モジュールをインポートする	import fractions
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
整数nの二進数表現	bin(n)
整数nを二進リテラルにする	bin(n)
整数nを16進数表記に変換する	hex(n)
nとn2が等しいかどうか判定する	n == n2
nがn2より小さいか	n < n2
nがn2以上か確認する	n >= n2
nがn2以下またはn3以上	n <= n2 or n >= n3
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
n2がnより大きくかつ、n3未満か調べる	n < n2 and n2 < n3
nが一桁の整数か調べる	-9 <= n <= 9
整数nが集合のいづれかか調べる	n in aSet
整数nがタプルのどれかか	n in aTuple
整数nが配列のどれかかどうか調べる	n in aArray
xが-9以上、9以下か確認する	-9 <= x <= 9
xが1、もしくは2、もしくは3に等しいか判定する	x == 1 or x == 2 or x == 3
文字列の無限の列	itertools.repeat(element)
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
0から始まる無限整数列	itertools.count()
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
列を無限に繰り返す	itertools.cycle(iterable)
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
predicateFuncがTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
predicateFuncが真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
列とイテラブルの直積	itertools.product(iterable, iterable2)
イテラブルのコンビネーションを求める	itertools.combinations(iterable, n)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
インデント付きでマッピングを文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
組の末尾	aTuple[-1]
タプルのn番目以降の部分を得る	aTuple[n:]
リストのn番目からn2番目まで	aList[n:n2]
タプルのn番目からn2番目まで	aTuple[n:n2]
組の合計値	sum(aTuple)
タプルの中の最も小さい値を求める	min(aTuple)
リストにオブジェクトを追加する	aList.append(element)
リストにリストを加える	aList.extend(aList2)
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
オブジェクトがタプルに含まれるか	element in aTuple
文字列が組に含まれないかどうか確認する	element not in aTuple
リストのオブジェクトが最初に見つかる場所を探す	aList.index(element)
タプルの文字列が最初に見つかるインデックスを探す	aTuple.index(element)
リストの要素を昇順に並べ直す	sorted(aList, reverse=False)
組の値を小さい順にソートする	sorted(aTuple, reverse=False)
小さい順にリストをソートする	sorted(aList, reverse=True)
タプルの要素を昇順に並べる	sorted(aTuple, reverse=True)
タプルの各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
組内の要素は全て真	all(aTuple)
リスト内の要素が少なくともひとつ真か確認する	any(aList)
タプルが少なくともひとつ真か調べる	any(aTuple)
タプルをカンマ区切りで出力する	print(*aTuple, sep=',')
実数の天井数	math.ceil(x)
床を求める	math.floor(x)
3自然数のLCM	math.lcm(n, n2, n3)
nとkのnCk	math.comb(n, k)
実数の指数部を算出する	math.frexp(x)[1]
実数は有限	math.isfinite(x)
実数はNaNか調べる	math.isnan(x)
kを底とする小数点数の対数を求める	math.log(x, k)
2を底とする実数の対数を計算する	math.log2(x)
余弦	math.cos(x)
正弦を求める	math.sin(x)
実数のアークコサイン	math.acos(x)
浮動小数点数の双曲線正弦	math.sinh(x)
2点間のユークリッド距離を求める	math.dist(point, point2)
プロットの見栄えをいい感じに変更する	sns.set()
グラフの用途を論文に指定する	sns.set(context='paper')
プロットを論文用に設定する	sns.set(context='paper')
プロットをポスター用にセットする	sns.set(context='poster')
カラーパレットを淡くする	sns.set(pallete='muted')
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
プロットを暗くする	sns.set(pallete='dark')
グラフのパレットを全般的に暗くする	sns.set(pallete='dark')
グラフのテーマを全般的に明るくする	sns.set(pallete='bright')
グラフのカラーテーマを色差別なくする	sns.set(pallete='colorblind')
濃いカラーパレットをグラフの描画で使用する	sns.set(pallete='deep')
グラフの描画でパステル調の色使いを使用する	sns.set(pallete='pastel')
プロットの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
明るいカラーパレットをグラフの描画で用いる	sns.set(pallete='bright')
プロットのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
グラフのタイトルをuntitledに指定する	plt.title(untitled)
プロットの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
グラフの中のy軸の軸ラベルをuntitledに指定する	plt.ylabel(untitled)
グラフの中の縦軸にuntitledという軸ラベルを設定する	plt.ylabel(untitled)
グラフにグリッド線を表示する	plt.grid(True)
グラフに凡例を付ける	plt.legend()
グラフに凡例を文字列と文字列と付ける	plt.legend([s, s2])
凡例を最適な位置に表示する	plt.legend(loc='best')
リストとリストの折れ線を描く	plt.plot(xdata, ydata)
イテラブルとリストを折れ線グラフに描画する	plt.plot(xdata, ydata)
リストを縦軸、リストをx軸と指定して折れ線グラフを描く	plt.plot(xdata, ydata)
リストの変化を折れ線に描画する	plt.plot(range(len(xdata)), xdata)
リストをx座標と指定して、リストの変化を描く	plt.plot(range(len(xdata)), xdata)
折れ線の透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
リストと配列の折れ線を描いて、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
配列とリストの折れ線グラフを文字列の色で描く	plt.plot(xdata, ydata, color=s)
リストと配列の折れ線グラフを描画して、色を文字列にする	plt.plot(xdata, ydata, color=s)
リストと数列の折れ線グラフをカラーコードで描く	plt.plot(xdata, ydata, color=rgb)
データ列とリストについて破線グラフを描画して、その色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リストとデータ列の破線グラフを描画して、その色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
数列と数列について破線グラフを描画して、その色を暗いにセットする	plt.plot(xdata, ydata, linestyle='dash', color='dark')
リストと数列について破線グラフを描画して、その色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
イテラブルとイテラブルについて破線グラフを描画して、色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
リストとリストについて濃い色の折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
淡い色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストとデータ列について淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
パステル調の色の折れ線グラフを描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='pastel')
リストとリストについてパステル調の色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
暗い色の折れ線をプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストとリストについて暗い色の折れ線グラフをプロットし、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
明るい色の折れ線を描き、、その線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='bright')
リストとリストについて明るい色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
色差別ない色の折れ線グラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
リストと配列について色差別ない色の折れ線を描画して、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
濃い色のマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, c='deep')
リストと配列についての散布図を濃い色で描く	plt.plot(xdata, ydata, c='deep')
リストとリストについて散布図をプロットしてマーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
リストと配列についての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
データ列とリストについて散布図をプロットして、マーカーの色を淡いに変更する	plt.plot(xdata, ydata, c='muted')
散布図をパステル調の色のマーカーで描く	plt.plot(xdata, ydata, c='pastel')
パステル調の色として配列とリストの散布図を描画する	plt.plot(xdata, ydata, c='pastel')
データ列とデータ列について散布図を描いて、マーカーの色をパステル調のにセットする	plt.plot(xdata, ydata, c='pastel')
リストとリストについて散布図を描画して、色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
散布図に明るい色のマーカーを用いる	plt.plot(xdata, ydata, c='bright')
明るい色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='bright')
明るい色でリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='bright')
イテラブルとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
散布図を色差別ない色のマーカーを用いて描く	plt.plot(xdata, ydata, c='colorblind')
色差別ない色としてリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
リストと配列についての散布図を濃い色で重なりを見やすくプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
イテラブルとリストについての散布図を淡い色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
散布図をパステル調の色のマーカーで重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リストと配列についての散布図をパステル調の色で重なりを見やすくプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
暗い色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
リストと配列についての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
明るい色で配列と配列についての散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
色差別ない色で重なりを見やすくイテラブルとリストについての散布図を描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストについてのヒストグラムを濃いでプロットする	plt.hist(xdata, color='deep')
配列を濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
淡いでヒストグラムを描く	plt.hist(xdata, color='muted')
パステル調の色として柱状図を描画する	plt.hist(xdata, color='pastel')
データ列をパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
リストについてのヒストグラムを暗いで描画する	plt.hist(xdata, color='dark')
リストを明るい色の柱状図で描画する	plt.hist(xdata, color='bright')
色差別ない色でデータ列についての柱状図を描画する	plt.hist(xdata, color='colorblind')
リストとリストの折れ線を描き、、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
データ列とリストとして折れ線グラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
データ列とリストで濃いを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
データ列と配列として淡いを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
パステル調のの折れ線グラフの線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
イテラブルとリストでパステル調のグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
暗いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
暗いグラフをプロットして、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データ列とリストを用いて明るいの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
色差別ないの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
濃いの折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストと数列についてカラーコードの濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとリストのカラーコードの淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストとリストとして淡いグラフをプロットして、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストとリストのカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
数列とリストでパステル調のグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
明るいを描いて、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
配列とデータ列のカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
数列とリストとして色差別ないの折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
濃いグラフの色を赤色に指定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
濃いグラフを配列と数列としてプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
配列とイテラブルで淡いグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データ列とデータ列でパステル調のの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
赤い暗いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
暗いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='dark', color='r')
暗いの折れ線グラフを描画し、、線幅をnにする	plt.plot(xdata, ydata, linestyle='dark', color='r')
明るいグラフを配列とリストで描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
色差別ないグラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
配列と数列の濃いグラフをプロットし、、その色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データ列とリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データ列とリストについて淡いグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
数列とリストの青いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データ列と配列のパステル調のを描画し、色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
青色の暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
配列と配列の暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
青い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストと配列の青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストとリストの明るいグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
数列とリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストとイテラブルの色差別ないグラフを描画し、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストと配列の黒い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストと配列の濃いグラフを描画してその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストとリストの黒色の淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストと数列の淡いグラフをプロットしてその色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストとデータ列の黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
数列とリストについてパステル調のグラフを描画し、、その色を黒色に指定する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
リストと配列について黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとリストの暗いグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列とリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データ列とデータ列について黒い色差別ないをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストの色差別ないグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
散布図を描く	plt.scatter(xdata, ydata)
相関を可視化する	plt.scatter(xdata, ydata)
リストをy軸配列を横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
イテラブルとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
数列とデータ列について散布図を描画し、その大きさをnにセットする	plt.scatter(xdata, ydata, s=n)
リストとリストの散布図を描画し、、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
リストとリストについて散布図を描画してマーカーを丸に変更する	plt.plot(xdata, ydata, marker='o')
数列とリストの散布図を描画し、、マーカーを△に設定する	plt.plot(xdata, ydata, marker='^')
▼マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='v')
下三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='v')
リストとリストの散布図を描いて、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
散布図を左三角マーカーを用いてプロットする	plt.plot(xdata, ydata, marker='<')
データ列と数列の散布図を描画して、マーカーを左三角に指定する	plt.plot(xdata, ydata, marker='<')
リストとリストの散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
配列とリストの散布図を描画してマーカーを右三角にする	plt.plot(xdata, ydata, marker='>')
リストとデータ列についての散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
散布図をバツマーカーで描画する	plt.plot(xdata, ydata, marker='x')
リストと配列について散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
データ列とイテラブルについての散布図にクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x')
大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X')
リストとイテラブルの散布図を描画してマーカーを大バツにセットする	plt.plot(xdata, ydata, marker='X')
配列とイテラブルについての散布図に四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s')
散布図に菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D')
菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
リストとイテラブルについて散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
リストとイテラブルについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
配列とリストの散布図を描いて、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
数列とリストについての散布図に星マーカーを描く	plt.plot(xdata, ydata, marker='*')
配列とイテラブルの散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
カラーコードの丸マーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='o', c=rgb)
リストとリストの散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データ列とリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
リストと配列についての散布図にカラーコードの△マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
イテラブルと配列について散布図を描画して、上三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
カラーコードの▽マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
散布図をカラーコードの下三角マーカーとしてプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
数列とイテラブルの散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
リストとリストの散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの左三角マーカーを配列と配列の散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストの散布図を描画し、、左三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとリストについて散布図を描画し、、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
カラーコードのバツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
リストと配列の散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
リストとデータ列について散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c=rgb)
リストと配列についての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='X', c=rgb)
カラーコードの四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列と配列についての散布図にカラーコードの四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
リストと配列の散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
配列とリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
リストとデータ列について散布図を描画し、、ダイアモンドマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードの星マーカーを数列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='r')
散布図に赤い丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c='r')
リストとリストについての散布図に赤い丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='r')
データ列とリストについての散布図に赤色の三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
赤色の下三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='v', c='r')
赤色の下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストと数列についての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
リストとイテラブルの散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
赤い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='>', c='r')
赤いバツマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='x', c='r')
数列と配列の散布図に赤いバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c='r')
赤い大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
リストとデータ列についての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
赤色の菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
リストとリストの散布図に赤いダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
赤い星マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='*', c='r')
配列とリストについての散布図に赤い星マーカーをプロットする	plt.plot(xdata, ydata, marker='*', c='r')
リストとイテラブルの散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='k')
散布図に黒色の三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
配列と配列の散布図に黒い▲マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
黒色の下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
データ列とリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
黒い左三角マーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
配列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
散布図に黒色の大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
配列とリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='k')
黒い四角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='s', c='k')
散布図を黒い四角マーカーを用いて描画する	plt.plot(xdata, ydata, marker='s', c='k')
リストと配列についての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
黒いダイアモンドマーカーをデータ列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='D', c='k')
リストと数列の散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
グラフに水平方向の実線を設定する	plt.axhline(y=0, linestyle='solid')
配列とイテラブルについてリストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
配列とリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームのカラムをヒストグラムで可視化する	plt.hist(df[column])
ヒストグラムを描き、、半透明化にする	plt.hist(データ列, alpha=0.5)
ヒストグラムをプロットし、xに透明度を設定する	plt.hist(データ列, alpha=x)
ヒストグラムを描画してビン数をnに指定する	plt.hist(データ列, bins=n)
ヒストグラムの範囲を変更する	plt.hist(データ列, range=(start, end))
startからendまでの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
startからendの範囲のヒストグラムを用いて数列を描画する	plt.hist(データ列, range=(start, end))
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
柱状グラフを２つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
縦棒を描く	plt.bar(ラベル列, データ列)
棒グラフを描いてグラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
横棒グラフを描いて、幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
xに横棒グラフの幅を設定する	plt.barh(ラベル列, データ列, width=x)
横棒グラフをプロットして中央寄せする	plt.barh(ラベル列, データ列, align='center')
複数カラムの散布図をまとめてプロットする	sns.pairplot(df[[column, column2, column3]])
＜オプション＞アクアに色を設定する	color = 'aqua'
＜オプション＞色をアクアマリンに設定する	color = 'aquamarine'
＜オプション＞色をビスクに設定する	color = 'bisque'
＜オプション＞ブランチドアーモンド色を使用する	color = 'blanchedalmond'
＜オプション＞グラフの色をカデットブルーに変更する	color = 'cadetblue'
＜オプション＞コーンフラワーブルーを用いる	color = 'cornflowerblue'
＜オプション＞色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
＜オプション＞クリムゾン色を使用する	color = 'crimson'
＜オプション＞色をクリムゾンに設定する	color = 'crimson'
＜オプション＞グラフの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
＜オプション＞グラフの色を暗い赤に指定する	color = 'darkred'
＜オプション＞ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
＜オプション＞グラフの色をディムグレーに指定する	color = 'dimgrey'
＜オプション＞フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
＜オプション＞グラフの色をフォレストグリーンにセットする	color = 'forestgreen'
＜オプション＞ゲインズボロを使う	color = 'gainsboro'
＜オプション＞ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
＜オプション＞グラフの色をライトグリーンにセットする	color = 'lightgreen'
＜オプション＞リネンにグラフの色を設定する	color = 'linen'
＜オプション＞ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
＜オプション＞色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
＜オプション＞色をオールドレースにセットする	color = 'oldlace'
＜オプション＞パールバイオレットレッドに色を変更する	color = 'palevioletred'
＜オプション＞グラフの色をピーチパフに変更する	color = 'peachpuff'
＜オプション＞ピンクにグラフの色を設定する	color = 'pink'
＜オプション＞レベッカパープルを使用する	color = 'rebeccapurple'
＜オプション＞赤を用いる	color = 'red'
＜オプション＞グラフの色をロージーブラウンに指定する	color = 'rosybrown'
＜オプション＞サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
＜オプション＞サーモンを使用する	color = 'salmon'
＜オプション＞シーグリーンに色をセットする	color = 'seagreen'
＜オプション＞色をシルバーに変更する	color = 'silver'
＜オプション＞スチールブルーにグラフの色を設定する	color = 'steelblue'
＜オプション＞ターコイズ色を使用する	color = 'turquoise'
＜オプション＞色を青紫に指定する	color = 'violet'
＜オプション＞グラフの色をホワイトに設定する	color = 'white'
＜オプション＞ホワイトスモークに色を設定する	color = 'whitesmoke'
＜オプション＞色を黄色に設定する	color = 'yellow'
折れ線グラフを描画して、色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフを描画して、色を青に設定する	plt.plot(データ列, データ列2, color='blue')
折れ線グラフを描画して、色をブルーバイオレットにする	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフを描画して、その色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフの色をコーラルにセットする	plt.plot(データ列, データ列2, color='coral')
線グラフを描画して、色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
折れ線グラフを描画して、色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフを描画して、その色を真紅に指定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフの色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画して、その色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画してその色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
折れ線グラフを描画してその色をダークオリーブグリーンに変更する	plt.plot(データ列, データ列2, color='darkolivegreen')
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフを描画して、その色を暗い赤に変更する	plt.plot(データ列, データ列2, color='darkred')
線グラフの色をダークシアグリーンに変更する	plt.plot(データ列, データ列2, color='darkseagreen')
線グラフを描画して、その色をダークスラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategray')
折れ線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
折れ線グラフを描画して、色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフを描画して、色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
折れ線グラフを描画して、色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフの色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
折れ線グラフを描画して、その色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して、その色をホットピンクにする	plt.plot(データ列, データ列2, color='hotpink')
線グラフを描画して、その色をインディアンレッドにする	plt.plot(データ列, データ列2, color='indianred')
折れ線グラフを描画して、色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフを描画してその色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
線グラフを描画して、その色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
線グラフを描画して、その色を淡いピンク色にセットする	plt.plot(データ列, データ列2, color='lightpink')
折れ線グラフを描画してその色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
線グラフを描画して、その色をライトスチールブルーに変更する	plt.plot(データ列, データ列2, color='lightsteelblue')
線グラフを描画して、その色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
折れ線グラフを描画して色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
折れ線グラフを描画して、色をミディアムシアグリーンに変更する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフを描画して色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフを描画して、その色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
線グラフの色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して色をオリーブに変更する	plt.plot(データ列, データ列2, color='olive')
線グラフを描画して、その色をパールゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='palegoldenrod')
折れ線グラフを描画して、色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフの色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
線グラフを描画して、その色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
線グラフを描画して、その色をパウダーブルーにセットする	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフを描画してその色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
線グラフを描画して、色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフを描画して、その色をサドルブラウンに変更する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフを描画してその色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
折れ線グラフの色をスノーに変更する	plt.plot(データ列, データ列2, color='snow')
折れ線グラフを描画してその色をスノーに変更する	plt.plot(データ列, データ列2, color='snow')
線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して、色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
線グラフを描画して、色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列, データ列2, color='whitesmoke')
ヒストグラムを描画して色を紺碧にセットする	plt.hist(データ列, color='azure')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
ヒストグラムを描画して色をブラックに指定する	plt.hist(データ列, color='black')
ヒストグラムを描画して、その色をブルーバイオレットにセットする	plt.hist(データ列, color='blueviolet')
ヒストグラムを描画して、色を茶色に設定する	plt.hist(データ列, color='brown')
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して、色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して、その色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
ヒストグラムを描画して色をシアンに設定する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、その色をダークシアンにセットする	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画してその色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
ヒストグラムを描画してその色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを描画してその色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
ヒストグラムを描画して、その色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ヒストグラムを描画してその色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムを描画して、色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ヒストグラムを描画してその色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画して色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ヒストグラムを描画して、その色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
ヒストグラムを描画してその色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
ヒストグラムを描画して、色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
ヒストグラムを描画してその色をゴールドにセットする	plt.hist(データ列, color='gold')
ヒストグラムを描画して色をハニーデューにセットする	plt.hist(データ列, color='honeydew')
ヒストグラムを描画してその色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ヒストグラムを描画して、その色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムを描画してその色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、その色をピンクに変更する	plt.hist(データ列, color='pink')
ヒストグラムを描画して、色をサーモンに設定する	plt.hist(データ列, color='salmon')
ヒストグラムの色を淡い茶色にセットする	plt.hist(データ列, color='tan')
ヒストグラムを描画して、色をシスルに指定する	plt.hist(データ列, color='thistle')
ヒストグラムを描画してその色を小麦色に指定する	plt.hist(データ列, color='wheat')
ヒストグラムを描画して色を白に設定する	plt.hist(データ列, color='white')
ヒストグラムを描画してその色を黄色に設定する	plt.hist(データ列, color='yellow')
＜オプション＞線種を一点鎖線に指定する	linestyle = 'dashbot'
一点鎖線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
＜オプション＞▲印を加える	marker = '^'
＜オプション＞クロスマーカーを加える	marker = 'x'
折れ線グラフの印を上三角にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフにクロス印を使用する	plt.plot(データ列, データ列2, marker='x')
データ列を折れ線グラフに描画して、印をクロスにする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフに描画して印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフの▲印を黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフの▽マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフの大バツ印を黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
折れ線グラフに黄色い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフの三角マーカーの大きさをnにする	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフのバツ印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフの上三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフの下三角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフのダイアモンドマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
＜オプション＞三２ビット整数型を用いる	dtype = np.int16
リストを配列にする	np.array(aList)
0で全要素を初期化した配列を作成する	np.zeros(要素数)
ゼロ埋めされた3２ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int16)
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
全要素を０で初期化された32ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ブール型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int32)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
全要素を初期値で初期化された配列を作る	np.full(要素数, 初期値, dtype=np.int)
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
行列の次元を変形する	aArray.reshape(行数, 列数)
既存のベクトルを元に全要素が0の配列を初期化する	np.zeros_like(aArray)
既存の配列をベースに全要素が初期値の行列	np.full_like(aArray, 初期値)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
配列の内積を算出する	np.dot(aArray, aArray2)
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ベクトルの型	aArray.dtype()
ベクトルの列ごとの合計値を求める	np.sum(aArray, axis=0)
行列の行ごとの合計を計算する	np.sum(aArray, axis=1)
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
行列を平坦にする	aArray.flatten()
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
オブジェクトに属性が存在するか調べる	hasattr(obj, プロパティ名)
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
オブジェクトは整数か調べる	isinstance(obj, int)
オブジェクトは論理値クラス	isinstance(obj, bool)
オブジェクトはリストクラスのインスタンスかどうか調べる	isinstance(obj, list)
オブジェクトは辞書かどうか調べる	isinstance(obj, dict)
オブジェクトは集合かどうか調べる	isinstance(obj, set)
オブジェクトはバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
型のサブ型かどうか調べる	issubclass(サブクラス, クラス)
データフレームのリストカラムの記述統計量	df[aList].describe()
列の中央値を求める	ds.median()
データフレームのリスト列がどの程度、分散しているか見る	df[aList].var()
データフレームのカラムはどれだけ、分散しているか見る	df[col].var()
データフレームが正規分布からどれだけ、歪んでいるか確認する	df.kurt()
データフレームのリストカラムが正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
データフレームのリスト列の尖度	df[aList].skew()
データフレームのカラムが正規分布からどれだけ、尖っているか見る	df[col].skew()
データフレームの列を整数に四捨五入する	df[col].round()
データ列を10の位で四捨五入する	ds.round(-1)
データフレームの列を10の位で四捨五入する	df[col].round(-1)
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
データフレームのリストカラムを100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
データフレームのリストカラムの未入力値を平均値で置換する	df[aList].fillna(df[aList].mean())
データフレームのリスト列のNaNを平均値に変更する	df[aList].fillna(df[aList].mean())
平均値でデータ列のNaNを埋める	ds.fillna(ds.mean())
列の欠損値を平均値に設定する	ds.fillna(ds.mean())
データフレームの列の欠損値を平均値で補う	df[col].fillna(df[col].mean())
データフレームの列の欠損値を平均に設定する	df[col].fillna(df[col].mean())
最頻値でデータフレームの未入力値を埋める	df.fillna(df.mode().iloc[0])
データフレームのカラムのNaNをモードで埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
データフレームのリスト列のNaNを第二四分位数で埋める	df[aList].fillna(df[aList].median())
データフレームのリスト列の欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
カラムの未入力値を中央値に設定する	ds.fillna(ds.median())
最大値でデータ列の未入力値を補う	ds.fillna(ds.max())
データ列の欠損値を最大値にする	ds.fillna(ds.max())
データフレームの列のNaNを最大値にセットする	df[col].fillna(df[col].max())
データフレームの欠損値を最小値で補う	df.fillna(df.min())
データフレームのリストカラムのNaNを最小値に設定する	df[aList].fillna(df[aList].min())
データ列のNaNを最小値で埋める	ds.fillna(ds.min())
データフレームの列の未入力値を最小値で埋める	df[col].fillna(df[col].min())
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
カラムの欠損値を直前の値に設定する	ds.fillna(method='ffill')
データフレームのカラムのNaNを直前の値で補う	df[col].fillna(method='ffill')
データフレームのリスト列のNaNを後の行の値に設定する	df[aList].fillna(method='bfill')
直後の値でカラムの欠損値を埋める	ds.fillna(method='bfill')
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
データフレームの値を正規表現patternで一度にreplに変更する	df.replace(pattern, repl, regex=True)
データフレームのリスト列を正規表現で一度にreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームのカラムを一度に正規表現patternでreplに置き換える	df[col].replace(pattern, repl, regex=True)
カラムの値が欠損値	ds.isna()
データフレームのカラムの値はNaN	df[col].isna()
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
データフレームのリストカラムの中にいくつ未入力値があるか数える	df[aList].isna().sum()
データフレームのカラムの中にいくつ欠損値が含まれるかカウントする	df[col].isna().sum()
データフレームのリストカラムの中に文字列が存在するか調べる	df[aList].isin([value])
カラムの中に日付データがあるかどうか調べる	ds.isin([value])
データフレームの列の中に文字列がある	df[col].isin([value])
データフレームの中に存在する文字列の個数を求める	df.isin([value]).sum()
データフレームのリストカラムの中にいくつ文字列が存在するか数える	df[aList].isin([value]).sum()
データフレームのカラムの中にいくつ文字列があるか求める	df[col].isin([value]).sum()
データフレームのリストカラムの中にと文字列があるか調べる	df[aList].isin([value, value2])
データ列の中に文字列とが存在するか調べる	ds.isin([value, value2])
データフレームのカラムの中に文字列とがあるか	df[col].isin([value, value2])
データフレームの中にある文字列との合計をカウントする	df.isin([value, value2]).sum()
データフレームのリストカラムの中に文字列と日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
カラムの中にある文字列と日付データの合計をカウントする	ds.isin([value, value2]).sum()
列の中に文字列とがいくつ存在するか数える	ds.isin([value, value2]).sum()
データフレームの列の中にあると文字列の合計を数える	df[col].isin([value, value2]).sum()
3つのデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
2つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
列'A'と列'B'をキーとして2つの表データを結合する	pd.merge(df, df2, left_on='A', right_on='B')
二つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
2つのデータフレームを列をキーにして右ジョインする	pd.merge(df, df2, on=column, how='right')
二つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
異なるカラムをキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
異なるカラムをキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
最初のカテゴリーを除外して表データの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
データフレームの最初n行	df.head(n)
データフレームの下n行を取り出す	df.tail(n)
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
データフレームのn行目以降取り出す	df[n:]
データフレームの指定された列のみ選択する	df[[column]]
データフレームから指定された2つの列だけ抽出する	df[[column, column2]]
データフレームの指定された列名一覧の列を抽出する	df[columns]
データフレームのカラム名の一覧を使う	df.columns
データフレームからカテゴリデータの列名一覧を求める	df.select_dtypes('object').columns
表データの行一覧を使う	df.index
データフレームのデータ型一覧を使う	df.dtypes
データフレームから型リストで指定されたデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
データフレームから型を抽出する	df.select_dtypes(ty)
データフレームの相関行列ピアソン積率相関係数として	df.corr(method='pearson')
ピアソン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ピアソンで表データのリストで指定した列の相関行列	df[aList].corr(method='pearson')
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ケンドール相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
スピアマン相関係数で表データの相関行列	df.corr(method='spearman')
データフレームの列と列の相関行列スピアマンで	df[[column, column2]].corr(method='spearman')
スピアマンを用いてデータフレームのリストカラムの相関行列を求める	df[aList].corr(method='spearman')
データフレームのリスト列の相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df[aList].corr())
データフレームのインデックス名を一度に、nameからname2に付け直す	df.rename(index={name: name2})
表データの列の値がxでない行をフィルタする	df[df[column] == x]
データフレームの列の値がx、かつ列がx2である行を選ぶ	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
データフレームの列名リストで指定されたカラムを取り除く	df.drop(columns, axis=1)
データフレームの中の欠損値をドロップする	df.dropna()
表データの重複した行のみ	df[df.duplicated(keep=False)]
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
データフレームで、列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
dateStringを日付データに変換する	pd.to_datetime(dateString)
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
Pandasで、文字列をタイムスタンプに変換する	pd.to_datetime(s)
Pandasで、フォーマットとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
Pandasで、書式としてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
Pandasで、フォーマットで文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
Pandasで、フォーマットfmtとしてデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format=fmt)
Pandasで、書式fmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
書式fmtで文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
Pandasで、エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
PandasでデータフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
数値時刻の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データ列は何曜日か確認する	ds.dt.weekday_name
データフレームを表示するとき、最大列数を増やす	pd.set_option('display.max_columns', n)
データフレームを表示するとき列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームを表示するとき表示される最大行数を変更する	pd.set_option('display.max_rows', n)
ファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
＜オプション＞読み込むシートの名前をnamesに変更する	sheet_name = names
＜オプション＞n番目の列をインデックスに増やす	index_col = n
＜オプション＞ヘッダを自動的な連番に指定する	header = None
CSVファイルTSVファイルをn番目の列をインデックスとして読む	pd.read_csv(filename, index_col=n)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
TSVからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームとしてTSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームをJSONLファイルにエクセルファイルファイルで保存する	df.to_excel(filename)
JSONLファイルにデータフレームをCSV形式として保存する	df.to_csv(filename)
データフレームをJSONLファイルにタブ区切りを用いて書き込む	df.to_csv(filename, sep='\t')
データフレームを列の値によってまとめた表	df.groupby(column)
データフレームを２つの列の値でグループ化する	df.groupby(['A', 'B'])
表を２つの列でまとめたグループを見る	df.groupby(['A', 'B'])
'A'列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby('A').describe()
表を２つの列によってグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
表データを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
表データを関数の値によってグループ化し、基本統計量を計算する	df.groupby(関数).describe()
欠損値を含めてカラムの値でデータフレームをグループ化する	df.groupby(column, dropna=False)
'A'列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを'A'列と'B'列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームを列名リストでグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームを関数によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
表を各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
データフレームを列毎にグループ分けして、各グループ毎の合計を算出する	df.groupby(column).sum()
列の値ごとに表データをグループ分けし、それぞれのグループごとの平均値を計算する	df.groupby(column).mean()
列によってデータフレームを集約し、、グループ毎の最小値を計算する	df.groupby(column).min()
データフレームを列で分類して、分散を算出する	df.groupby(column).var()
データフレームのグループごとの標準偏差	df.groupby(column).std()
データフレームを列の値によってグループ化して、標準偏差を求める	df.groupby(column).std()
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データフレームをグループ化し、それぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
各列毎にデータフレームをグループ化し、、列の最小値を求める	df.groupby(column)[column2].min()
データフレームを各列毎にグループ化し、、列の分散を求める	df.groupby(column)[column2].var()
列でデータフレームを集約して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
データフレームの列の各データ値の出現数を計算する	df[col].value_counts()
データフレームの中のカラムを分割数nでビン分割する	pd.cut(df[col], n)
n個にデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
リストを分割数nでビニングする	pd.cut(aList, n)
リストをn個に等間隔でビン分割する	pd.cut(aList, n)
データ列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの中のカラムをビン数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中の列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ビン数nでリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストを等間隔でn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データ列を等しい量になるようにn個に分割する	pd.qcut(ds, n)
データフレームの中の列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(df[col], n)
配列を等量でビン数nで分割する	pd.qcut(aArray, n)
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
データフレームを列でソートする	df.sort_values(by=column)
データフレームを'A'列で並べ直す	df.sort_values(by='A')
データフレームを'A'列と'B'列をキーにして並べる	df.sort_values(by=['A', 'B'])
データフレームを複数の列でソートする	df.sort_values(by=column)
データフレームを'A'列によって小さい順にソートする	df.sort_values(by='A', ascending=True)
二つの列によってデータフレームを昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを複数の列によって昇順に並べる	df.sort_values(by=column, ascending=True)
データフレームを'A'列でによって降順にソートする	df.sort_values(by='A', ascending=False)
データフレームを'A'列と'B'列によってを用いて大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを列名リストを用いてで大きい順にソートする	df.sort_values(by=column, ascending=False)
データフレームを列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
二つの列でデータフレームをソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを二つの列によってで破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを複数の列を用いてソートして更新する	df.sort_values(by=column, inplace=True)
破壊的にデータフレームを複数の列によってによって並べ直す	df.sort_values(by=column, inplace=True)
データフレームを列によって小さい順に整列し、更新する	df.sort_values(by=column, ascending=True, inplace=True)
昇順にデータフレームを'A'列を用いてソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを'A'列と'B'列を用いて昇順に並べ直して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
昇順に複数の列でデータフレームを並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを２つの列で降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
大きい順にデータフレームを複数の列によって破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
'A'列によってデータフレームをソートしてNaNを先頭にする	df.sort_values(by='A', na_position='first')
データフレームを二つの列でソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
列によってデータフレームをソートして、上の方n件を取り出す	df.sort_values(columns).head(n)
列によってデータフレームを並べ、、下位n件を取り出す	df.sort_values(columns).tail(n)
表データを列によって並べて、行を振り直す	df.sort_values(columns).reset_index(drop=True)
データフレーム全体をインデックスを用いて昇順にソートする	df.sort_index(ascending=True)
降順でインデックスでデータフレーム全体を並べ直す	df.sort_index(ascending=False)
最大値・最小値の範囲として一様な乱数を得る	random.uniform(最小値, 最大値)
正規分布で疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
リストから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
前もって複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
文字列をケースを無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
文字列の中のASCII限定としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
リストの集合を作る	set(iterable)
列を集合にする	set(iterable)
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
値が集合のメンバーでないかどうか調べる	element not in aSet
集合の全ての要素が別の集合に含まれるかどうか調べる	aSet.issubset(aSet2)
スーパーセットか確認する	aSet.issuperset(aSet2)
真上位集合か確認する	aSet > aSet2
ふたつの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
集合が空か	len(aSet) == 0
集合を更新不能な集合に変換する	frozenset(aSet)
英字の大文字を全部使う	string.ascii_uppercase
空白文字を全部見る	string.whitespace
文字列のケースをする	s.casefold()
文字列を空白で区切って、列挙する	s.split()
文字列を空白で分割する	s.split()
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
文字列を部分文字列で分割して、文字列リストにする	s.split(sub)
文字列をカンマで区切り、、列挙する	s.split(',')
文字列をコロンで分割し、列挙する	s.split(':')
セパレータで文字列を分割して、文字列リストにする	s.split(sep)
文字列を区切りによって区切って、列挙する	s.split(sep)
改行で文字列を分割し、文字列リストにする	s.splitlines()
文字列を最後から部分文字列で区切る	s.rsplit(sub)
文字列を最後の部分文字列で分割する	s.rpartition(sub)
文字列を最初の部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
文字列を部分文字列で分けたときの前半の文字列を見る	s.partition(sub)[0]
文字列を部分文字列で分けたときの残りの文字列	s.partition(sub)[-1]
最後の部分文字列で文字列を二分し、最初の文字列を使う	s.rpartition(sub)[0]
文字列を最後の部分文字列で分けたときの最初の文字列を取り出す	s.rpartition(sub)[0]
文字列を最後の部分文字列で二つに区切って、後半の文字列を見る	s.rpartition(sub)[-1]
文字列を別の文字列を用いて置換する	s.replace(sub, newsub)
文字列の両端から不要な空白を取り除く	s.strip()
文字列の最初から空白を取り除く	s.lstrip()
文字列の末尾から余分な空白を取り除く	s.rstrip()
部分文字列が文字列中に存在するか調べる	sub in s
文字列の最初から部分文字列を見つける	s.find(sub)
文字列の開始位置先に部分文字列が含まれる	s.find(sub, start) != -1
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
部分文字列が文字列の終了位置以前にないか調べる	s.find(sub, 0, end) == -1
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
文字列の開始位置からと終了位置までの範囲に部分文字列がない	s.find(sub, start, end) == -1
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
イテラブルを文字列リストに変換して空白によって連結する	' '.join(map(str, iterable))
リストを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
イテラブルを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
イテラブルを文字列リストに変換して'改行で結合する	'\n'.join(map(str, iterable))
イテラブルを文字列リストに変換して部分文字列で連結する	sub.join(map(str, iterable))
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数	s.count(sub, start, end)
安全に文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
ファイル名がテキストファイルか	filename.endswith('.txt')
JSONファイルファイル名がかどうか調べる	filename.endswith('.json')
文字列が大文字か	s.isupper()
文字列がアルファベットか調べる	s.isalpha()
文字列が全て英数字かどうか調べる	s.isalnum()
文字列は全て十進数字かどうか	s.isdecimal()
文字列は数値	s.isnumeric()
文字列内に小文字があるかどうか調べる	any(c.islower() for c in s)
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
空白が文字列内に含まれるか	any(c.isspace() for c in s)
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
文字列中に非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
ひとつでも非アスキー文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
文字列は全て印字できるかどうか	s.isprintable()
文字コードで文字列をバイト列に変換する	s.encode(encoding=encoding)
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
文字列の最後の文字	s[-1]
二つの文字列が同じでないかどうか調べる	s != s2
文字列が文字列より辞書順で後か判定する	s > s2
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列に日本語が含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
変数が無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, oo)
パラメータがマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
変数について数値のインテグラルを行う	sympy.integrate(e, z)
バイトオーダを使う	sys.byteorder
動作環境の名前を調べる	sys.platform
プラットホームがLinuxかどうか	sys.platform.startswith('linux')
プラットホームはWindowsか調べる	sys.platform.startswith('win32')
第一コマンド引数を知る	sys.argv[1]
コマンドの第一引数を確める	sys.argv[1]
コマンド引数のリストを得る	sys.argv[1:]
既にロードされたモジュールのリストを確認する	sys.modules
プログラムの実行をここで終了する	sys.exit()
プログラムの実行を正常終了する	sys.exit(0)

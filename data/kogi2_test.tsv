折れ線グラフを描画して、その色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
リストとリストとして淡いを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
シアンで値をプリントする	print(f'\033[36m{value}\033[0m')
＜オプション＞リネンにグラフの色を指定する	color = 'linen'
配列と数列のカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
二つの文字列をタブで区切って出力する	print(value, value2, sep='\t')
グラフで使う縦軸にuntitledというラベルを設定する	plt.ylabel(untitled)
折れ線グラフを描画して、その色をシルバーにする	plt.plot(データ列, データ列2, color='silver')
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
データフレームを二つの列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
列を文字列リストに変換して部分文字列によって連結する	sub.join(map(str, iterable))
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
ヒストグラムを描画して色をスラグレーに変更する	plt.hist(データ列, color='slategray')
リストとイテラブルについての散布図に黒い三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフを描画して色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightseagreen')
リストとデータ列の散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
折れ線グラフにサイズnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
リスト内の要素が少なくとも一つ真かどうか確認する	any(aList)
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
折れ線グラフのスタイルを点線にセットする	plt.plot(データ列, データ列2, linestyle='dotted')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
タブ区切りのファイルからSJISでカンマ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
predicateFuncが真とならない列の要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
クラスが名前付きタプルか確認する	issubclass(C, tuple)
値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
改行なしにリストをプリントする	print(value, end='')
文字列の右側から部分文字列を消す	s.rstrip(sub)
グラフの凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
最大値でデータフレームの欠損値を補う	df.fillna(df.max())
イテラブルから両端キューを用意する	collections.deque(iterable)
部分文字列が文字列の開始位置からと終了位置の間に含まれる	s.find(sub, start, end) != -1
タプルを順序付けする	enumerate(aTuple)
リストとリストの相関を可視化する	plt.scatter(xdata, ydata)
集合が空集合でないか調べる	len(aSet) != 0
ファイルをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
赤い明るいの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
ヒストグラムを描画してその色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
散布図を色差別ない色のマーカーで描画する	plt.plot(xdata, ydata, c='colorblind')
データフレームのカラムの中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞シャルトリューズを使う	color = 'chartreuse'
黒いポイントマーカーをデータ列とリストについての散布図に描く	plt.plot(xdata, ydata, marker='.', c='k')
数値を双方向キューの先頭に追加する	deq.appendleft(element)
リストとリストで暗いの折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データ列の平均値を求める	ds.mean()
縦方向に３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームを各カラムと列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
濃い色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
データフレームを関数によってグループ化する	df.groupby(関数)
イテラブルとリストの散布図を描画し、、色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
淡いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞色をスノーに設定する	color = 'snow'
データフレームで、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
日付データの月を使う	aDate.month
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
折れ線グラフを描画して、色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
配列を分割数nでビン分割する	pd.cut(aArray, n)
標準入力から1行分改行なしに読む	sys.stdin.readline().rstrip()
リストとイテラブルの折れ線グラフを描画して、アルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
キュー中の数値の位置	deq.index(element)
リストと配列の折れ線グラフを描く	plt.plot(xdata, ydata)
＜オプション＞デピンクにグラフの色を設定する	color = 'deeppink'
データフレームを列でグループ分けし、、それぞれのグループごとの件数を知る	df.groupby(column).size()
明るい色の折れ線グラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
濃い色の折れ線グラフをプロットして、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストと数列の黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
書き込みモードを使ってファイルをオープンする]	open(filepath, mode='w')
ヒストグラムの色をアクアにセットする	plt.hist(データ列, color='aqua')
データフレームのリストカラムの中にあると文字列の数を数える	df[aList].isin([value, value2]).sum()
Pandasでエポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
平均と標準偏差から疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフを描画して、色をライトコーラルに変更する	plt.plot(データ列, データ列2, color='lightcoral')
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
要素を両端キューの末尾に入れる	deq.append(element)
データフレームを複数の列によって並べる	df.sort_values(by=column)
線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
xでデータフレームのリストカラムのNaNを補う	df[aList].fillna(x)
文字列の中で大文字・小文字を無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列の開始位置と終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
線グラフを描画して、その色をパールゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='palegoldenrod')
明るい色で配列についてのヒストグラムを描画する	plt.hist(xdata, color='bright')
カラムを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
リストとリストの散布図をプロットして、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
リストとイテラブルについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
データフレームのリストカラムはどの程度分散しているか確認する	df[aList].var()
整数nが配列のどれかかどうか確認する	n in aArray
カラーコードの左三角マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='<', c=rgb)
二つの文字列が同じでないか調べる	s != s2
複数の列の値ごとに表データを集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
シーケンスからベクトルを作る	np.array(iterable)
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
棒グラフを描いて幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
自然数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
タブ区切りでJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
2数の最も大きい値	max(x, y)
＜オプション＞グラフの色をマルーンに変更する	color = 'maroon'
線グラフを描画して、その色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
数列とリストについての散布図にカラーコードのクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
各列毎にデータフレームをグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
文字列のプレフィックスが部分文字列か調べる	s.startswith(sub)
Pandasで、フォーマットとして文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
多重集合	collections.Counter()
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
＜オプション＞ビスクを使う	color = 'bisque'
値を出力する	print(value)
データフレームを各列毎にグループ化して、列の最小値を計算する	df.groupby(column)[column2].min()
データフレームを'A'列で整列して、更新する	df.sort_values(by='A', inplace=True)
Pandasで、データ列を日付データにする	pd.to_datetime(ds)
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
文字列の右端から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ヒストグラムを描画してその色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
ヒストグラムを描画して、色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームの列と列の相関行列スピアマンで	df[[column, column2]].corr(method='spearman')
列と列の重複を消す	df.drop_duplicates(subset=column)
折れ線グラフを描画して、色をダークシアグリーンにする	plt.plot(データ列, データ列2, color='darkseagreen')
文字列を部分文字列で分けた場合の前半の文字列	s.partition(sub)[0]
nが一桁の整数かどうか調べる	-9 <= n <= 9
文字列がタプルに含まれない	element not in aTuple
ヒストグラムを描画して、色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
配列とリストについて散布図を描画して、文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
実数で実数を整数除算する	x // y
グラフの用途を論文に変更する	sns.set(context='paper')
折れ線グラフの下三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームの列がx以上かつx2未満の行を選ぶ	df[(x <= df[column]) & (df[column] < x2)]
データ列とラベルを指定して棒を描く	plt.bar(ラベル列, データ列)
データフレームの列の中に文字列が存在する	df[col].isin([value])
＜オプション＞グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
キーがタプルに存在しない時要素を追加する	aDict.setdefault(key, element)
破壊的に2つの列によってデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
列をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
度数分布図を描画して区間の数をnに設定する	plt.hist(データ列, bins=n)
折れ線グラフに黄色い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
オブジェクトはタプル	isinstance(obj, tuple)
数列と配列の青色の明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
正規表現patternでデータフレームのカラムの値をまとめて置き換える	df[col].replace(pattern, repl, regex=True)
データ列を四捨五入する	ds.round()
カウンタを列で更新する	aCounter.update(iterable)
リストの変化を折れ線で描く	plt.plot(range(len(xdata)), xdata)
行列を一次元にする	aArray.flatten()
折れ線グラフを描画して色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフを描画して、色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
組のオブジェクトが最初に見つかるインデックスを探す	aTuple.index(element)
データフレームの列がxより大きくx2より少ないデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームの先頭n行を確認する	df.head(n)
平均値でデータフレームのリストカラムのNaNを置換する	df[aList].fillna(df[aList].mean())
リストとリストの散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
黒色のバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
最大値でデータ列のNaNを補う	ds.fillna(ds.max())
ベクトルをベースに全要素が1の配列を作る	np.ones_like(aArray)
0から始まる無限な数列	itertools.count()
散布図に赤色のダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c='r')
リストを計数器に変換する	collections.Counter(iterable)
リストとリストの暗いグラフを描画し、色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
データ列を折れ線グラフに描画して、印を星印にする	plt.plot(データ列, データ列2, marker='*')
数式処理を使う	import sympy
データフレームをグループ化し、各列に対し最大値を計算する	df.groupby(column)[column2].max()
昇順にデータフレームを破壊的に'A'列によってソートする	df.sort_values(by='A', ascending=True, inplace=True)
nが組のいづれかか調べる	n in aTuple
＜オプション＞グリーンイエローにグラフの色を設定する	color = 'greenyellow'
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
データフレームを列ごとにグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
ひとつでも非ASCII文字が文字列中に含まれる	any(not c.isascii() for c in s)
'A'列によって昇順にデータフレームをソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
nとn2が等しいかどうかテストする	n == n2
ヒストグラムを描画して、色を白に変更する	plt.hist(データ列, color='white')
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
配列を濃い色のヒストグラムを用いて描く	plt.hist(xdata, color='deep')
線グラフの色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
＜オプション＞ヘッダを連番に設定する	header = None
横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
データフレームを列の値によって集約し、、それぞれのグループの標準偏差を計算する	df.groupby(column).std()
イテラブルを縦軸イテラブルを横軸と指定して折れ線グラフを描画する	plt.plot(xdata, ydata)
データ列の中に日付データがあるか調べる	ds.isin([value])
折れ線グラフの三角印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
列によってデータフレームをソートして下位を取り出す	df.sort_values(columns).tail(n)
散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームのカラムのNaNをメディアンで置き換える	df[col].fillna(df[col].median())
カラーコードの左三角マーカーをリストと数列についての散布図に描く	plt.plot(xdata, ydata, marker='<', c=rgb)
双方向キューの最後にイテラブルの各要素を順に追加する	deq.extend(iterable)
＜オプション＞四角印を用いる	marker = 's'
リストとリストで暗いグラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
実数が負の数か	x < 0
折れ線グラフの色を濃い青に設定する	plt.plot(データ列, データ列2, color='darkblue')
破壊的にデータフレームから重複を削除する	df.drop_duplicates(inplace=True)
リストとデータ列について暗い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
カンマを用いて文字列を区切って、列挙する	s.split(',')
赤い暗いの折れ線グラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='r')
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
変数がマイナス無限大に近づく場合の数値の極限値を求める	sympy.limit(e, z, -oo)
文字列を黒色化する	f'\033[30m{value}\033[0m'
２つの実行結果をコロンで区切ってプリントする	print(value, value2, sep=':')
折れ線グラフを描画してその色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
nが1、もしくは2もしくは3に等しいか確認する	n == 1 or n == 2 or n == 3
組の末尾	aTuple[-1]
日付時刻データがタイムスタンプデータと同時かどうか	aDatetime == aDatetime2
文字列内にアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
データフレームのn行目を削除して更新する	df.drop(n, axis=0, inplace=True)
プロットの中のy座標の軸ラベルをuntitledに指定する	plt.ylabel(untitled)
双方向キューが空であるか確認する	len(deq) == 0
CSVファイルでデータフレームをJSONLファイルに保存する	df.to_csv(filename)
折れ線グラフを描画して、その色をアンティークホワイトにセットする	plt.plot(データ列, データ列2, color='antiquewhite')
スタックの中に値が存在するかどうか調べる	element in deq
データフレームのリスト列を千の位で丸めて、整数にする	df[aList].round(-3).astype(int)
マップのコピーを作る	dict(aDict)
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
データフレームのカラムが正規分布からどの程度、歪んでいるか調べる	df[col].kurt()
配列とリストの散布図を描画し、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
二つ並べて箱ひげ図をプロットする	plt.boxplot([データ列, データ列2])
配列とリストについて破線グラフを描画して色を明るいに変更する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
リストとリストの破線グラフを描いて色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
リストとリストの色差別ないグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ヒストグラムを描画してその色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
イテラブルを色差別ない色のヒストグラムを用いて描画する	plt.hist(xdata, color='colorblind')
縦方向に２つのデータフレームをくっつける	pd.concat([df, df2])
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
プロットを使う	from sympy import N
データフレームの未入力値がある箇所に色を付ける	df.style.highlight_null()
＜オプション＞グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
＜オプション＞コーラルにグラフの色を指定する	color = 'coral'
３自然数の最大公約数	math.gcd(n, n2, n3)
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
データフレームのリスト列の欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
ヒストグラムを描画して、その色をパールゴールデンロッドにする	plt.hist(データ列, color='palegoldenrod')
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
双方向キューの先頭から要素を取り出す	deq.popleft()
データフレームのリストカラムのNaNを最大値で埋める	df[aList].fillna(df[aList].max())
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
データ列の標準偏差を求める	ds.std()
環境はLinuxか調べる	sys.platform.startswith('linux')
リストとリストの散布図を大きさnで描く	plt.scatter(xdata, ydata, s=n)
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
列でデータフレームをグループ化し、、各グループごとの平均値を計算する	df.groupby(column).mean()
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ファイルパスからの読み込みストリームを見る	open(filepath)
列の各要素を両端キューの先頭に付け加える	deq.extendleft(iterable)
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ヒストグラムを描画して、色を青紫に設定する	plt.hist(データ列, color='violet')
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフの丸印を赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
折れ線グラフの色をダーク・スラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategrey')
データフレームを２つの列の値でグループ化する	df.groupby(['A', 'B'])
データ列の中に文字列とがあるか	ds.isin([value, value2])
データフレームのそれぞれのグループの分散	df.groupby(column).var()
最大長nの双方向キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
リストと配列の散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
パスのセパレータ記号	os.sep
文字列が全て数値かどうか調べる	s.isnumeric()
大文字・小文字を無視してパターンを事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
配列と配列について散布図を描画して丸マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
配列とリストについて散布図を描画し、、右三角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='>', c=rgb)
配列とリストについて淡い色の折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
既存の行列をベースにして全要素が初期値の配列を初期化する	np.full_like(aArray, 初期値)
昇順に複数の列でデータフレームを整列する	df.sort_values(by=column, ascending=True)
＜オプション＞グラフの色をライトイエローに指定する	color = 'lightyellow'
データフレームの列がどの程度分散しているか確認する	df[col].var()
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
カラム概要	df.info()
列を分割する	pd.cut(ds, aList)
整数nの8進文字列	oct(n)[2:]
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x')
日付時刻データが火曜日	aDatetime.weekday() == 1
線グラフを描画して、その色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
テキストファイルファイル名がか確認する	filename.endswith('.txt')
折れ線グラフを描画して、色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
列名を指定された列名一覧に置き換える	df.columns = columns
UNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
数列とリストについての散布図に黒い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='k')
集合から別の集合を全て取り除く	aSet.difference_update(aSet2)
リストと配列で淡いグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
配列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オブジェクトがリストの要素	element in aList
データフレームを'A'列と'B'列によって並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ファイルがある	os.path.exists(filepath)
列を用いてデータフレームをソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
文字列の最後	s[-1]
空白で文字列を区切って、文字列リストに変換する	s.split()
データフレームの中に文字列があるかどうか	df.isin([value])
データ列とリストについて散布図を描いてマーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
リストを昇順にソートする	sorted(aList, reverse=False)
暗い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
文字列のケースをする	s.casefold()
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=[column, column2])
散布図を淡い色のマーカーで描画する	plt.plot(xdata, ydata, c='muted')
タプルをn回、加える	aTuple * n
nがn2の倍数かどうか調べる	n % n2 == 0
2つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
リストと数列についての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
Pandasで、データフレームのcollのUNIX秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
列でデータフレームを並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
配列とイテラブルについての散布図にカラーコードの下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
＜オプション＞グラフの色をライトグレーに変更する	color = 'lightgray'
データフレームを複数の列によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
文字列中に非アルファベットが含まれる	any(not c.isalpha() for c in s)
データフレームのリストカラムの未入力値を最小値で埋める	df[aList].fillna(df[aList].min())
ファイルパスを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
ヒストグラムを描画して、色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
２つ並べてヒストグラムを描く	plt.hist([データ列, データ列2], color=['b', 'r'])
余弦	math.cos(x)
数列とリストについて散布図を描画して、色を色差別ないに指定する	plt.plot(xdata, ydata, c='colorblind')
nの8進表現を使う	oct(n)
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
文字列が全て空白からなるかどうか調べる	s.isspace()
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
＜オプション＞グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
黒い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列を区切りで区切って、列挙する	s.split(sep)
初期値で全要素を初期化された行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
＜オプション＞改行をセパレータで用いる	sep = '\n'
＜オプション＞ダークマゼンタを使用する	color = 'darkmagenta'
ヒストグラムを描画して、色をビスクに変更する	plt.hist(データ列, color='bisque')
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
破線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dashed')
データ列とラベル列を指定して積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
二つの値を改行なしに表示する	print(value, value2, end='')
データ列とデータ列の散布図に▲マーカーを描画する	plt.plot(xdata, ydata, marker='^')
一点鎖線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
データ列を折れ線グラフに描画して、印を▼にする	plt.plot(データ列, データ列2, marker='v')
nがリストのどれかか調べる	n in aList
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
最後の部分文字列で文字列を二つに区切って、最初の文字列を使う	s.rpartition(sub)[0]
リストと数列についての散布図に黒色の下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
文字列が片仮名	('ァ' <= ch <= 'ン')
変数が無限大に近づく場合の数値の極限値を求める	sympy.limit(e, z, oo)
n番目のシートをエクセルファイルファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムを描画してその色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
カラーコードのダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
散布図を黒い星マーカーを用いて描画する	plt.plot(xdata, ydata, marker='*', c='k')
データ列が正規分布からどの程度尖っているか見る	ds.skew()
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
リストとリストについて濃いを描画し、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
表データをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
実数は無限大か調べる	math.isinf(x)
リストを横軸と指定して、折れ線グラフを描く	plt.plot(range(len(xdata)), xdata)
データフレームのカラムの中にと日付データがいくつあるか求める	df[col].isin([value, value2]).sum()
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
ヒストグラムを描画してその色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
リストとリストについて散布図をプロットし、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
濃い色でリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='deep')
データフレームを'A'列によって整列し、NaNを先頭にする	df.sort_values(by='A', na_position='first')
リストとデータ列についての散布図に四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s')
カウンタの各文字列をその出現回数だけ列挙する	aCounter.elements()
配列を累加する	itertools.accumulate(iterable)
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
＜オプション＞色をオールドレースに変更する	color = 'oldlace'
データフレームを各列毎にグループ化して、文字列というグループを求める	df.groupby(column).get_group(s)
タプルのn番目以降の要素を得る	aTuple[n:]
カラーコードの三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c=rgb)
配列とリストについて破線グラフを描画して色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
コマンドの第一引数を調べる	sys.argv[1]
数字を使う	string.digits
真上位集合	aSet > aSet2
破壊的に'A'列によって降順にデータフレームをソートする	df.sort_values(by='A', ascending=False, inplace=True)
辞書から項目名の値	aDict.get(key)
リストを等量で分割数nでビン分割する	pd.qcut(aList, n)
にy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
集合が空か	len(aSet) == 0
正規表現patternでreplにデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
要素がタプルの値に含まれていないか	element not in aDict.values()
第二引数のファイル名	sys.argv[1]
リストとリストの散布図を描いて、マーカーをポイントに指定する	plt.plot(xdata, ydata, marker='.')
イテラブルとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
n回文字列が続く列	itertools.repeat(element, n)
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
文字列はタイトルケース	s.istitle()
データ列とラベル列を指定して横棒グラフを描画する	plt.barh(ラベル列, データ列)
データフレームをグループ化し、列に対し平均値を求める	df.groupby(column)[column2].mean()
マッピング上で項目名が定義済みかどうか判定する	key in aDict
赤色の丸マーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='o', c='r')
カラーコードの大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c=rgb)
散布図をカラーコードの四角マーカーとして描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
ふたつの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
配列と配列についての散布図を重なりを見やすく暗い色として描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
明るい色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='bright')
日付時刻データが月曜日かどうか	aDatetime.weekday() == 0
＜オプション＞色をダークオレンジに設定する	color = 'darkorange'
predicateFuncを適用したときTrueとなるイテラブルの要素を消す	itertools.dropwhile(predicateFunc, iterable)
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
イテラブルを文字列リストに変換して'改行で結合する	'\n'.join(map(str, iterable))
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの列を千の位で丸めて、整数にする	df[col].round(-3).astype(int)
数列とリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
日付データが日付データより前	aDate < aDate2
n2がn以上、かつ、n3以下かテストする	n <= n2 and n2 <= n3
＜オプション＞シート名をnamesに指定する	sheet_name = names
リストとリストを用いて明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞茶色色を使用する	color = 'brown'
＜オプション＞コロンをセパレータで用いる	sep = ':'
シーケンスを周期的に繰り返す	itertools.cycle(iterable)
集合の全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
破線の色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
列名リストによってデータフレームをまとめた表を使う	df.groupby(columns)
行列の形	aArray.shape
濃い色で重なりを見やすくリストと配列についての散布図を描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
等量でリストをn個にビン分割する	pd.qcut(aList, n)
赤い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
文字列の終了位置より前に部分文字列がないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
タイムスタンプデータにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
配列とイテラブルについて散布図を描き、、▲マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
数値を太字でプリントする	print(f'\033[1m{value}\033[0m')
淡い色としてヒストグラムを描画する	plt.hist(xdata, color='muted')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
列を配列として選択する	df[column].values
暗いを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
線グラフを描画して、その色をブランチドアーモンドに指定する	plt.plot(データ列, データ列2, color='blanchedalmond')
ヒストグラムを描画してその色をベージュに指定する	plt.hist(データ列, color='beige')
データフレームを'A'列によってによって破壊的に並べる	df.sort_values(by='A', inplace=True)
データフレームから重複する行を削除し、、更新する	df.drop_duplicates(inplace=True)
本日のローカルな日付時刻	datetime.datetime.today()
黒いポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
色差別ない色でデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
折れ線グラフを描画してその色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
折れ線グラフを描画して、色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
＜オプション＞スチールブルーにグラフの色をセットする	color = 'steelblue'
イテラブルとデータ列について破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
赤色の左三角マーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
＜オプション＞オリーブを使う	color = 'olive'
淡い茶色にヒストグラムの色を変更する	plt.hist(データ列, color='tan')
散布図を黒い△マーカーとして描く	plt.plot(xdata, ydata, marker='^', c='k')
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
データフレームから数値データのカラムのみ選択する	df.select_dtypes('number')
オブジェクトが組の要素でないかどうか調べる	element not in aTuple
リストとイテラブルについて散布図を描画し、、マーカーを▽に設定する	plt.plot(xdata, ydata, marker='v')
イテラブルとリストの折れ線グラフを描いてその色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
列を等しい量になるようにビン数nを用いて分割する	pd.qcut(ds, n)
実数から整数を引く	x - y
カラーコードの丸マーカーをリストとリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフを描画してその色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
文字列の開始位置番目からと終了位置までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
データ列とリストの黒色の色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
配列とリストについて散布図を描いて、マーカーを右三角にする	plt.plot(xdata, ydata, marker='>')
文字列の右端から改行を除去する	s.rstrip('\n')
データフレームのリスト列の中に日付データがあるか調べる	df[aList].isin([value])
数列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
最小値でデータ列の欠損値を置換する	ds.fillna(ds.min())
＜オプション＞グラフの色を淡い茶色に指定する	color = 'tan'
配列を明るい色の柱状図でプロットする	plt.hist(xdata, color='bright')
キーワード引数でマッピングに加えて、更新する	aDict.update(**kwargs)
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
＜オプション＞色をホットピンクにする	color = 'hotpink'
タプルからキーで指定されたエントリをポップする	aDict.pop(key)
ヒストグラムを描画して、その色をティールに指定する	plt.hist(データ列, color='teal')
列のコンビネーションを得る	itertools.combinations(iterable, n)
データフレームを列によってグループ化してそれぞれのグループ毎の個数を計算する	df.groupby(column).count()
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
バツマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='x')
配列とリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
整数nを2進表現にする	bin(n)
二つの文字列は同じ	s == s2
オブジェクトは論理値型かどうか調べる	isinstance(obj, bool)
文字列中に非大文字が含まれるか調べる	any(not c.isupper() for c in s)
エラーなくマッピングからキーの値を参照する	aDict.get(key, None)
要素が集合の要素	element in aSet
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
双方向キューに要素をenqueueする	deq.appendleft(element)
Pandasで、文字列のUNIX時間から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームから指定された二列を取り出す	df[[column, column2]]
整数個からk個取り出したときの並べ方の総数	math.perm(n, k)
既存のファイルパスを追加できるように文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='a', encoding=s)
xが-9以上、9以下か	-9 <= x <= 9
データフレームを表示するとき、n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
データフレームの列の母標準偏差	df[col].std(ddof=0)
文字列の中のパターンによるマッチを使う	re.findall(pattern, s)
行列の次元数を求める	aArray.ndim
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
濃い青にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
文字列内にアルファベットがある	any(c.isalpha() for c in s)
1で全要素を初期化された配列	np.ones(要素数, dtype=np.int)
データフレームの中の列をビン数nを用いてビニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
プロットのx軸にラベルをつける	plt.xlabel(untitled)
折れ線グラフを描画して、色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフを描画してその色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
2つの実行結果を文字列で区切ってプリントする	print(value, value2, sep=s)
データ列とラベルを指定して、縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
データフレームを各列毎にグループ分けして列の最大値を計算する	df.groupby(column)[column2].max()
＜オプション＞下三角印を使う	marker = 'v'
データフレームとしてエクセルデータファイルを読み込む	pd.read_excel(filename)
リストとリストについて色差別ないグラフを描画してその色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
線グラフを描画して、色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
ケンドール相関係数を用いてデータフレームの相関行列を計算する	df.corr(method='kendall')
データフレームを'A'列と'B'列を用いて小さい順に並べ直して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
日付時刻データの時間を使う	aDatetime.hour
カウンタ間で和集合	aCounter | aCounter2
データフレームを'A'列と'B'列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
濃い色テーマをプロットの描画で使う	sns.set(pallete='deep')
＜オプション＞ダークグリーンを使う	color = 'darkgreen'
リストを順に表示する	print(*aList)
データフレームをまとめてValueMapで置き換える	df.replace(ValueMap)
＜オプション＞グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
数列と数列の淡いグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
部分文字列が文字列の開始位置以降に存在しないか調べる	s.find(sub, start) == -1
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
ヒストグラムを描画して、その色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
プロットの描画でパステル調のパレットを使う	sns.set(pallete='pastel')
黒色の下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='k')
リストとデータ列の散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データ列の値がNaNか	ds.isna()
イテラブルを配列にする	np.array(iterable)
n個分双方向キューの順序を右にローテンションする	deq.rotate(n)
ヒストグラムを描画してその色を暗い赤に設定する	plt.hist(データ列, color='darkred')
データフレームを関数の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフを描画してその色を小麦色にセットする	plt.plot(データ列, データ列2, color='wheat')
２つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムを描画して、その色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
小数点数の2進対数	math.log2(x)
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
散布図に黒い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
データフレームのリストカラムの中にある文字列の数をカウントする	df[aList].isin([value]).sum()
配列と数列の散布図を描画してクロスマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='x', c=rgb)
プロットの用途をポスターに設定する	sns.set(context='poster')
データフレームのリスト列の中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
数列とリストの散布図を描いて菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
リストを昇順にソートする	sorted(aList, reverse=True)
実数を実数で割って切り捨てる	x // y
棒を描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
データフレームの列をドロップしてインプレイスする	df.drop(column, axis=1, inplace=True)
実数のtanを算出する	math.tan(x)
有理数をインポートする	import fractions
双方向キューをリストに変換する	list(deq)
カウンタを低頻度な方から列挙する	aCounter.most_common()[::-1]
文字列中に非空白が含まれる	any(not c.isspace() for c in s)
折れ線グラフを描画して、その色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
マッピングから最後の値をポップする	aDict.popitem()
リストとリストのカラーコードの暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
Pandasでデータフレームのcollをフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
二つのカウンタのいずれかに含まれる値を計算する	aCounter | aCounter2
エクセルファイル形式としてデータフレームをJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフを描画してその色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
破壊的に2つの列によってによってデータフレームを整列する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを二つの列を用いて並べる	df.sort_values(by=['A', 'B'])
データフレームを列によって破壊的に降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフを描画してその色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
nがn2以上かどうか調べる	n >= n2
データ列とリストについて散布図を描画して、マーカーを大バツに変更する	plt.plot(xdata, ydata, marker='X')
散布図にカラーコードの菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D', c=rgb)
リストとリストについてパステル調の色の折れ線グラフをプロットして、その線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='pastel')
配列と数列についての散布図を淡い色で描く	plt.plot(xdata, ydata, c='muted')
色差別ないグラフをリストと数列で描いて、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
＜オプション＞パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
浮動小数点数を実数で割った余り	x % y
データ列をn個に分割する	pd.cut(ds, n)
文字列リストを結合し、ひとつの文字列にする	''.join(map(str, iterable))
データフレームの中で、カラムと列に重複があるか確認する	df.duplicated(subset=[column, column2])
＜オプション＞３二ビット整数型を使う	dtype = np.int16
グラフのx軸の軸ラベルをuntitledに設定する	plt.xlabel(untitled)
８進数字を全部見る	string.octdigits
配列の要素を集合に追加する	aSet.update(iterable)
ヒストグラムを描画して、色をネイビーに変更する	plt.hist(データ列, color='navy')
配列とリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
文字列にイテラブルを変換してタブによってつなげる	'\t'.join(map(str, iterable))
リストとイテラブルについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
文字列の示すエンコーディングで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=s)
線グラフの色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
リストとリストの散布図に星マーカーをプロットする	plt.plot(xdata, ydata, marker='*')
パステル調の色でリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='pastel')
赤いクロスマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
双方向キューのstart〜endの部分データを使う	collections.deque(itertools.islice(deq, start, end))
今日の月数	datetime.datetime.today().month
凡例をグラフに被らない位置に付ける	plt.legend(loc='best')
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
データフレームのstart行目からend行目までを抽出する	df[start:end]
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの値は未入力値かどうか調べる	df.isna()
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
濃いグラフを描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームを列によってソートし、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフを描画して、色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
3変数の最も小さい値を求める	min(x, y, z)
データフレームのn行以降取り出す	df[n:]
青色の淡いをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='b')
カウンタ間で∪演算する	aCounter | aCounter2
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
リストをビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
＜オプション＞暗い赤色を用いる	color = 'darkred'
線グラフの色をターコイズに指定する	plt.plot(データ列, データ列2, color='turquoise')
リストと数列について濃い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストと数列のパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
リストとリストの明るいグラフを描画し、色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
配列のユニークな要素を算出する	np.unique(aArray)
前の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='ffill')
＜オプション＞グラフの色をシエナに変更する	color = 'sienna'
データ列と配列について散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
本日が月曜日か	datetime.datetime.today().weekday() == 0
配列と配列の淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
シーケンスを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
データフレームを列の値ごとに集計してそれぞれのグループ毎の分散を算出する	df.groupby(column).var()
ゼロ埋めされた論理値型の行列	np.zeros(要素数, dtype=np.int32)
辞書に別のマップのエントリを追加する	aDict.update(aDict2)
＜オプション＞色をミッドナイトブルーに設定する	color = 'midnightblue'
＜オプション＞グラフの色をスラグレーにセットする	color = 'slategray'
折れ線グラフを描画してその色をミディアムスプリンググリーンにする	plt.plot(データ列, データ列2, color='mediumspringgreen')
列の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
線グラフを描画してその色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
＜オプション＞ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
リストとリストで折れ線を描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
２つのリストから辞書	dict(zip(aList, aList2))
数値の変数の解を方程式として求める	sympy.solve(e, z)
数列とリストについての散布図に黒色のバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
双方向キューの先頭を使う	deq[0]
リストとリストのカラーコードの濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
折れ線グラフの上三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
ランダムにデータフレームから選ぶ	df.sample()
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
セットを更新不能なセットに変換する	frozenset(aSet)
データ列を四分位数で分割する	pd.qcut(ds, 4)
パステル調のの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
データフレームのカラムのNaNを後の行の値で置き換える	df[col].fillna(method='bfill')
データ列のNaNをxに設定する	ds.fillna(x)
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
ポイントマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='.')
赤い丸マーカーで散布図を描く	plt.plot(xdata, ydata, marker='o', c='r')
ヒストグラムを描画して、その色をラベンダーにセットする	plt.hist(データ列, color='lavender')
辞書の項目名の値	aDict[key]
折れ線グラフを描画して、その色を黄色に指定する	plt.plot(データ列, データ列2, color='yellow')
リストとリストについての散布図にカラーコードの菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
＜オプション＞アクアにグラフの色を設定する	color = 'aqua'
データ列とリストについての散布図に赤い下三角マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='r')
データ列のNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
横棒グラフを描画し、、xに幅を設定する	plt.barh(ラベル列, データ列, width=x)
文字列の左側から部分文字列を除去する	s.removeprefix(sub)
＜オプション＞△印を描画する	marker = '^'
数列と配列の散布図を色差別ない色として描画する	plt.plot(xdata, ydata, c='colorblind')
'A'列によって昇順にデータフレームを並べ直す	df.sort_values(by='A', ascending=True)
線グラフを描画して、その色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgray')
＜オプション＞印を三角に変更する	marker = '^'
明るいグラフをリストと配列で描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
ひとつでも英数字が文字列内に含まれるか調べる	any(c.isalnum() for c in s)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
破線グラフの色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ヒストグラムを描画して、その色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
配列とリストについて明るい色の折れ線を描いてその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
濃いグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
リストと数列の折れ線を描画してuntitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
オブジェクトが整数クラスか調べる	isinstance(obj, int)
＜オプション＞アクアマリンを使う	color = 'aquamarine'
折れ線グラフを描画して、色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
折れ線グラフに黒い星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
データ列とリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
日付時刻データが日付時刻データより早いか確認する	aDatetime < aDatetime2
カウンタ間で積集合演算する	aCounter & aCounter2
イテラブルと数列について散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
キューに要素をプッシュする	deq.append(element)
表データの重複した行数を数える	df.duplicated().sum()
配列とリストについて散布図を描画し、、大バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームを列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
プログラムのファイル名	sys.argv[0]
配列とリストの散布図を描画して、マーカーを左三角にセットする	plt.plot(xdata, ydata, marker='<')
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
辞書をクリアする	aDict.clear()
データ列とリストについての散布図に赤色のバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
折れ線グラフにサイズnの▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
オブジェクトはリストかどうか	isinstance(obj, list)
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
マップのキーとその値をペアとして取り出す	aDict.items()
折れ線グラフのダイアモンド印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
＜オプション＞パープルに色を設定する	color = 'purple'
グラフ中の(x,y)の位置に凡例を付ける	plt.legend(loc=(x, y))
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
実行結果をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
＜オプション＞ダークスラテグレー色を用いる	color = 'darkslategray'
データフレームを複数の列によってを用いて大きい順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフを描画して、その色をホットピンクにセットする	plt.plot(データ列, データ列2, color='hotpink')
パステル調の色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
実数がNaNかどうか調べる	math.isnan(x)
データフレームの相関行列ピアソン相関係数を用いて	df.corr(method='pearson')
実数のn乗を計算する	pow(x, n)
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
シーケンスから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
Pandasでデータフレームのcollをフォーマットで日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
赤い大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c='r')
タプルが少なくとも一つ真かどうか判定する	any(aTuple)
ファイルからファイル名を見る	os.path.basename(filepath)
数列とリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
データフレームの指定された三つの列を取り出す	df[[column, column2, column3]]
赤い大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c='r')
線グラフを描画して、色をミントクリームに変更する	plt.plot(データ列, データ列2, color='mintcream')
Pandasで、フォーマットfmtで文字列を日付データにする	pd.to_datetime(s, format=fmt)
折れ線グラフを描画してその色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して、その色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
グラフの描画で色差別ないカラーパレットを使用する	sns.set(pallete='colorblind')
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
線グラフを描画して色をダークレッドに設定する	plt.plot(データ列, データ列2, color='darkred')
リストとデータ列の散布図を描いて、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ヒストグラムを描画して色をリネンに指定する	plt.hist(データ列, color='linen')
リストとリストについて散布図を描いてマーカーをバツに指定する	plt.plot(xdata, ydata, marker='x')
'A'列によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
リストをシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ピアソンを用いてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
パステル調のグラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
両端キューのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
ヒストグラムの色をブラウンに指定する	plt.hist(データ列, color='brown')
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
リストとリストの青い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
リストとリストについての散布図に黒色の菱形マーカーをプロットする	plt.plot(xdata, ydata, marker='D', c='k')
カウンタの最も頻出の項目	aCounter.most_common()[0]
データフレームのリスト列の値は欠損値か調べる	df[aList].isna()
枠なしのデータラベルをグラフの中に入れる	plt.legend(frameon=False)
二つの列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
最大値・最小値の範囲として一様な乱数を生成する	random.uniform(最小値, 最大値)
列名リストによってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
配列とリストで色差別ないグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
黒い大バツマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='X', c='k')
文字列が全て数字	s.isdigit()
リストとリストのパステル調のを描画して、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
配列と数列についての散布図にカラーコードの右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c=rgb)
＜オプション＞色をパパイヤウィップに設定する	color = 'papayawhip'
イテラブルと配列として色差別ないグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームとデータフレームの列を横方向に合体させる	pd.concat([df, ds], axis=1)
リストとリストで明るいを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストとイテラブルの散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
データフレームの列の値がxでない行を取り除く	df[df[column] == x]
折れ線グラフを描画して、色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
JSONフォーマットの文字列を辞書にする	json.loads(jsonString)
変数が0に近づくとき、数値の極限値を求める	sympy.limit(e, z, 0)
リストと配列についての散布図に赤色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
パステル調の色のヒストグラムでリストを描画する	plt.hist(xdata, color='pastel')
ヒストグラムを描画して、色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
線グラフを描画して、その色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
パステル調のグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
文字列をカンマで分割して文字列リストにする	s.split(',')
文字列リストにシーケンスを変換して、カンマで一つにする	','.join(map(str, iterable))
データフレームをインデックスで昇順に並べ直す	df.sort_index(ascending=True)
折れ線グラフのポイント印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
タイムスタンプデータからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフを描画して、その色をスチールブルーに変更する	plt.plot(データ列, データ列2, color='steelblue')
データフレームを二つの列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
列を用いてで破壊的にデータフレームを整列する	df.sort_values(by=column, inplace=True)
配列とリストについて散布図を描画して、星マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='*', c=rgb)
白色で変数をプリントする	print(f'\033[37m{value}\033[0m')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
＜オプション＞グラフの色をインディゴに変更する	color = 'indigo'
データフレームのリストカラムの値をValueMapで一度に置き換える	df[aList].replace(ValueMap)
タイムスタンプデータにn週間分加える	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムを描画してその色を紺碧に設定する	plt.hist(データ列, color='azure')
パステル調の色でヒストグラムをプロットする	plt.hist(xdata, color='pastel')
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
データフレームを列によって並べ、、上の方n件を取り出す	df.sort_values(columns).head(n)
データフレームの中にある文字列との合計を数える	df.isin([value, value2]).sum()
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
データフレームのカラムの中に存在する文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
要素が辞書の値として含まれているか確認する	element in aDict.values()
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
要素をセットから取り除く	aSet.remove(element)
リストと配列について黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
配列とリストの折れ線を透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
リストとリストについての散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright')
文字列中に非数字が含まれるか判定する	any(not c.isdigit() for c in s)
データフレーム全体をインデックスでソートする	df.sort_index()
折れ線グラフを描画してその色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
柱状図の間を設定する	plt.hist(データ列, range=(start, end))
データフレームを列によってで降順にソートする	df.sort_values(by=column, ascending=False)
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
暗いを使って配列についてのヒストグラムをプロットする	plt.hist(xdata, color='dark')
データフレームのカラムの中にと日付データが存在するか調べる	df[col].isin([value, value2])
データフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
データフレームのリスト列が正規分布からどの程度、尖っているか見る	df[aList].skew()
データ列と配列の折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データフレームから型リストデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
日付データが日曜日かどうか	aDate.weekday() == 6
データフレームの中で、カラムの重複を見る	df.duplicated(subset=column)
線グラフの色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
リストとリストの散布図を描画してマーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
データ列と配列について散布図を描画してその大きさをnに変更する	plt.scatter(xdata, ydata, s=n)
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
リストとリストについての散布図を淡い色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストを縦軸、リストを横軸として大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
JSONLファイルにデータフレームをSJISで保存する	df.to_csv(filename, encoding='shift_jis')
２つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
＜オプション＞ダークバイオレットにグラフの色を設定する	color = 'darkviolet'
濃いの折れ線をリストとリストでプロットし、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
浮動小数点数のアークタンジェント	math.atan(x)
表データを列でグループ化し、列の要約統計量を求める	df.groupby(column).describe()[column2]
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
要素が集合に含まれないか	element not in aSet
リストと配列について破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
リストとリストについての散布図にカラーコードの▲マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
マップを複製する	dict(aDict)
列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
明るいの折れ線の色をカラーコードにする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞ピンクに色を設定する	color = 'pink'
自然数の最大公約数を求める	math.gcd(n, n2)
折れ線グラフのクロスマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
nが無限に続くイテラブルを得る	itertools.repeat(n)
データ列とリストを用いてパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームのNaNを削除する	df.dropna()
二数の最も小さい値	min(x, y)
淡い色のヒストグラムを用いてデータ列をプロットする	plt.hist(xdata, color='muted')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
データフレームを列の値によってグループ化して、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
英字の小文字を全て使う	string.ascii_lowercase
データフレームの列の第一四分位数を求める	df[col].quantile(0.25)
ヒストグラムを描画して、色をペルーに設定する	plt.hist(データ列, color='peru')
線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
漢字が文字列に含まれるかどうか	re.search('[\u4E00-\u9FD0]', s)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列を部分文字列で二つに区切って、残りの文字列を使う	s.partition(sub)[-1]
最頻値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].mode().iloc[0])
異なるカラムをキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームの列の未入力値を平均で埋める	df[col].fillna(df[col].mean())
異なる列をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
数列とリストの暗いグラフを描画してその色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
イテラブルを文字列に変換して、空白でつなげる	' '.join(map(str, iterable))
見やすいグラフを使う準備をする	import seaborn as sns
配列の合計	np.sum(aArray)
リストとイテラブルについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リストから新しいカウンタを作成する	collections.Counter(iterable)
2つの値を順にプリントする	print(value, value2)
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
文字列が全て識別子名かどうか	s.isidentifier()
データフレームのカラムの欠損値を直前の値に減らす	df[col].fillna(method='ffill')
データ列と数列の青い暗いをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
データ列とリストのカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
アンティークホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='antiquewhite')
整数の順列の総数	math.perm(n)
２つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
データフレームを'A'列でで降順に並べる	df.sort_values(by='A', ascending=False)
実数を十の位で四捨五入する	round(x, -1)
実数を実数に掛ける	x * y
BOM付きで既存のファイルパスを追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
データ列とリストの青色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
nがn2より大きいか	n > n2
ベクトルの最小値	np.min(aArray)
折れ線グラフを描画して色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
CSVファイルタブ区切りのファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
列によってデータフレームをグループ化して、各グループ毎の最大値を求める	df.groupby(column).max()
リストとリストについて破線グラフを描いて、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
出力ストリームに文字列を書き込む	f.write(s)
数式のインテグラルを行う	sympy.integrate(e)
データ列とリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して、色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
追加できるように既存のファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
三つの文字列を順に出力する	print(value, value2, value3)
データ列の中にと文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
nがn2以下または、n3以上か	n <= n2 or n >= n3
ヒストグラムを描画して色を青緑に変更する	plt.hist(データ列, color='turquoise')
リスト内の要素が全て真かどうか調べる	all(aList)
複数カラムの散布図を一度に描く	sns.pairplot(df[[column, column2, column3]])
nが2で割り切れるかどうか調べる	n % 2 == 0
赤い下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='r')
データ列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
データ列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
小数点以下の表示精度を増やす	pd.set_option('precision', n)
データフレームのNaNを最小値で埋める	df.fillna(df.min())
辞書上で項目名がまだ定義されていない	key not in aDict
データフレームを各列と列の組み合わせ毎に集計して合計を計算する	df.groupby([column, column2], as_index=False).sum()
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフを描画して、その色をカデットブルーに指定する	plt.plot(データ列, データ列2, color='cadetblue')
イテラブルとイテラブルのデカルト積	itertools.product(iterable, iterable2)
異なる列をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
配列とリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
大文字・小文字を無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
複数のデータフレームを横方向に一つにする	pd.concat([df, df2, df3], axis=1)
マッピングでカウンタを更新する	aCounter.update(aDict)
カウンタを多い順にリストとして得る	aCounter.most_common()
0で全要素を初期化した行列	np.zeros(要素数)
データフレームを破壊的に昇順に列名リストで並べる	df.sort_values(by=column, ascending=True, inplace=True)
行列の型	aArray.dtype()
正規表現でまとめてreplにデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
＜オプション＞マゼンタに色を設定する	color = 'magenta'
数列とリストについての散布図に赤色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
データフレームを各列毎にグループ化し、列の標準偏差を計算する	df.groupby(column)[column2].std()
小数点数の双曲線余弦の逆数	math.acosh(x)
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
部分文字列で部分文字列が始まるか確認する	s.startswith(sub)
配列についての柱状図を濃いでプロットする	plt.hist(xdata, color='deep')
折れ線グラフを描画してその色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
辞書から計数器を準備する	collections.Counter(aDict)
昇順にタプルの要素をソートする	sorted(aTuple, reverse=True)
折れ線グラフを描画して、色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフを描画して、その色をミディアムスレートブルーに指定する	plt.plot(データ列, データ列2, color='mediumslateblue')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームから指定された列名リストの列を選択する	df[columns]
カラムの中にいくつ文字列があるか数える	ds.isin([value]).sum()
列をダミー変数に変換する	pd.get_dummies(iterable)
イテラブルをstartからendの区間のヒストグラムを用いて描く	plt.hist(データ列, range=(start, end))
グラフの色を全般的に明るくする	sns.set(pallete='bright')
項目名が辞書に存在しているいる	key in aDict
キーがタプルに存在するかどうか調べる	key not in aDict
Pandasでデータ列をフォーマットfmtとして日付データに変換する	pd.to_datetime(ds, format=fmt)
リストとリストについて色差別ない色の折れ線グラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムを描画してその色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
オプションで出力先を標準エラーに変更する	file = sys.stderr
プロットで使うタイトルをuntitledに設定する	plt.title(untitled)
列にイテラブルを続けたイテラブルを求める	itertools.chain(iterable, iterable2)
リストとイテラブルを用いて淡いを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
配列とリストの黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
ボックスチャートを2つ並べる	plt.boxplot([データ列, データ列2])
＜オプション＞色をダークグリーンに設定する	color = 'darkgreen'
文字列がキーワードか調べる	keyword.iskeyword(s)
オブジェクトの無限イテラブルを求める	itertools.repeat(element)
折れ線グラフでデータフレームのカラムとカラムを描画する	plt.plot(df[col], df[col2])
ファイルパスから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
＜オプション＞色をミディアムオーキッドに指定する	color = 'mediumorchid'
文字列中に非小文字があるか調べる	any(not c.islower() for c in s)
原点から点までの距離を求める	math.hypot(x, y)
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
n2がnより大きく、かつ、n3より小さいか確認する	n < n2 and n2 < n3
線グラフの色をシルバーにセットする	plt.plot(データ列, データ列2, color='silver')
リストとデータ列の黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
折れ線グラフの色を真紅に変更する	plt.plot(データ列, データ列2, color='crimson')
最初の要素を双方向キューから取り除く	deq.remove(element)
パステル調のグラフをリストと配列として描画し、、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
組の先頭を取り除く	aTuple[1:]
nが一桁の整数	0 <= n <= 9
エポック秒を使う	import time
昇順にデータフレームを二つの列で並べる	df.sort_values(by=['A', 'B'], ascending=True)
赤色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームを欠損値を含めて列でグループ化する	df.groupby(column, dropna=False)
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
辞書のキー一覧を参照する	list(aDict)
グラフのパレットを淡くする	sns.set(pallete='muted')
折れ線グラフを描画して色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
ゼロ埋めされた８ビット整数型のベクトル	np.zeros(要素数, dtype=np.int8)
文字列がタプルに含まれるかどうか調べる	element in aTuple
折れ線グラフを描画して色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
イテラブルとリストの散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
データフレームから指定された４列を抽出する	df[[column, column2, column3, column4]]
折れ線グラフにクロスマーカーを使う	plt.plot(データ列, データ列2, marker='x')
要素は集合に含まれるか調べる	element in aSet
＜オプション＞ディムグレーにグラフの色を指定する	color = 'dimgray'
リストとイテラブルの散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
データ列を箱髭図にする	plt.boxplot(データ列)
8進文字列を整数に変換する	int(s, 8)
predicateFuncがTrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
折れ線グラフを描画して、その色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
列の名前の一覧を使う	df.columns

辞書からカウンタを用意する	collections.Counter(aDict)
イテラブルを集合に追加する	aSet.update(iterable)
データフレームのリスト列の欠損値を直後の値にする	df[aList].fillna(method='bfill')
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのカラムを折れ線グラフとして可視化する	plt.plot(df[column], df[column])
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
マッピングにキーワード引数で加えて、更新する	aDict.update(**kwargs)
データフレームを２つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
タブで区切って二つのリストをプリントする	print(value, value2, sep='\t')
フクシア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
リストの推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書から最後のエントリをポップする	aDict.popitem()
破壊的に複数の列でデータフレームを小さい順に並べる	df.sort_values(by=column, ascending=True, inplace=True)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
真⊂か調べる	aSet < aSet2
タンジェントを求める	math.tan(x)
データ列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
二つのデータフレームをジョインする	pd.merge(df, df2)
配列とリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
クラス分類の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
一点鎖線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
常用対数	math.log10(x)
option: 小麦色にグラフの色を設定する	color = 'wheat'
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
両端キューの右	deq[-1]
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを散布図で可視化し、、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
二つの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
浮動小数点数を小数点第一位で丸める	round(x, 1)
option: ▼マーカーを使用する	marker = 'v'
配列を等しい量になるように分割数nで分割する	pd.qcut(aArray, n)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
ファイルパスを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
イテラブルにシーケンスを続ける	itertools.chain(iterable, iterable2)
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
小数点数以下の最大の整数を算出する	math.floor(x)
option: ライトコーラルにグラフの色を指定する	color = 'lightcoral'
配列を横ベクトルに変形する	aArray.reshape(1, -1)
option: 色を耐火レンガに設定する	color = 'firebrick'
BOM付きでファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
データフレームのカラム概要	df.info()
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
nとkの組合せ	math.comb(n, k)
２ベクトル間のユークリッド距離	math.dist(point, point2)
データフレームのリストカラムの値をreplにまとめて正規表現patternで置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームを関数の値によってグループ化し要約統計量を求める	df.groupby(関数).describe()
データフレームのリスト列の中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
イテラブルを多重集合に変換する	collections.Counter(iterable)
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
漢字が文字列にあるかどうか判定する	re.search('[\u4E00-\u9FD0]', s)
x座標の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データ列を等しい量になるように分割数nで分割する	pd.qcut(ds, n)
文字列は文字列より辞書順で前かどうか調べる	s < s2
列の値ごとにデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
縦棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
列の値でデータフレームをグループ化してそれぞれのグループごとの平均値を求める	df.groupby(column).mean()
データ列を分割数nで分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
文字列の右側が部分文字列か調べる	s.endswith(sub)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データフレームのリストカラムの中に文字列とがある	df[aList].isin([value, value2])
データフレームを各列と列の組み合わせ毎に集約して平均値を算出する	df.groupby([column, column2], as_index=False).mean()
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
データフレームのリスト列の相関行列ケンドール順位相関係数で	df[aList].corr(method='kendall')
データ列とリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
標準入力から1行読む	sys.stdin.readline()
データフレームの中にある日付データと文字列の合計をカウントする	df.isin([value, value2]).sum()
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
データフレームをグループ化して、ヒストグラムでプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームを小さい順にインデックスによってソートする	df.sort_index(ascending=True)
option: 色をダークグレーに設定する	color = 'darkgray'
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
option: パールゴールデンロッドにフォントの色を設定する	color = 'palegoldenrod'
データ列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
xが-9以上、9以下	-9 <= x <= 9
現在の時間を求める	datetime.date.today().hour
ファイルを読み込む	pd.read_excel(filename)
option: データ型を指定する	dtype = bool
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
ダイアモンド印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
option: スノーに色を変更する	color = 'snow'
整数nを八進数文字列に変換する	oct(n)[2:]
データフレームのstart行目からend行目まで選択する	df[start:end]
両端キューが空かどうか確認する	len(deq) == 0
配列の行ごとの合計を求める	np.sum(aArray, axis=1)
option: ミディアムスレートブルーにフォントの色を設定する	color = 'mediumslateblue'
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
カーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オブジェクトはタプル型か調べる	isinstance(obj, tuple)
タプルの最初	aTuple[0]
追加できるように文字コードtextとしてファイルをオープンする]	open(filepath, mode='a', encoding=text)
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: フォントの色をクリムゾンに設定する	color = 'crimson'
文字列はリストの要素でないか調べる	element not in aList
実線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのカラムの中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
列と列の直積	itertools.product(iterable, iterable2)
グラフで用いるフォントを指定する	sns.set(font=フォント名)
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストとリストについての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
rgbの丸マーカーを配列と数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
最大長を指定して、両端キューを生成する	collections.deque(maxlen=n)
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
箱ひげ図を２つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームのリストカラムのNaNを50パーセンタイルに設定する	df[aList].fillna(df[aList].median())
データ列の未入力値を最小値で埋める	ds.fillna(ds.min())
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
xでデータフレームのカラムのNaNを埋める	df[col].fillna(x)
データフレームを列名リストによってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
部分文字列を安全に文字列の接頭辞から消す	s.removeprefix(sub)
データ列の推移を折れ線グラフで描画する	plt.plot(range(len(データ列)), データ列)
アイボリー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
プロットのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
双方向キューのn番目	deq[n]
セットを更新不能に変換する	frozenset(aSet)
リストとリストの散布図を描画し、、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
特異値分解で多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
日付時刻データが土曜日	aDatetime.weekday() == 5
データフレームからインプレイスで重複した行を削除する	df.drop_duplicates(inplace=True)
イテラブルを文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
小麦色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
箱ひげ図を用いてデータ列を描画する	plt.boxplot(データ列)
本日が水曜日	datetime.datetime.today().weekday() == 2
配列の要素ごとの最小公倍数を計算する	np.lcm(aArray, aArray2)
双方向キューをデキューする	deq.popleft()
リストとイテラブルについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
グラフの描画で色差別なく色を用いる	sns.set(pallete='colorblind')
カテゴリで色付けして、データフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgrey')
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
option: 追加モードに変更する	mode = 'a'
option: 色をミディアムブルーに指定する	color = 'mediumblue'
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
文字列の両端から余分な空白を取り除く	s.strip()
タプルの最初を捨てる	aTuple[1:]
折れ線グラフを青い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
要素がマッピングの値として含まれているか	element in aDict.values()
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
双方向キューの最大長	deq.maxlen
両端キューの中に要素が存在するか確認する	element in deq
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
行列の合計	np.sum(aArray)
データフレームのリストカラムを百の位で四捨五入して整数型にする	df[aList].round(-2).astype(int)
データフレームを表示するとき、表示する最大行数をnに設定する	pd.set_option('display.max_rows', n)
カウンタの和集合演算する	aCounter | aCounter2
データフレームの列の値がNaN	df[col].isna()
データフレームの中にある文字列の合計を求める	df.isin([value]).sum()
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色を濃いシアンにセットする	plt.hist(データ列, color='darkcyan')
折れ線グラフを半透明の一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: ゴールド色を用いる	color = 'gold'
文字列がリストに含まれないかどうか調べる	element not in aList
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
kを底とする対数	math.log(x, k)
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
散布図を黒い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図のダイアモンドマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
リストと数列について散布図を描画してマーカーを△に変更する	plt.plot(データ列x, データ列y, marker='^')
ライム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
データフレームを形式でJSONLファイルに保存する	df.to_excel(filename)
昇順にリストの値をソートする	sorted(aList, reverse=True)
双方向キューのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
パターンに大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの欠損値を直前の値にセットする	df.fillna(method='ffill')
nがリストのどれかか調べる	n in aList
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
カラムの欠損値を後の行の値に設定する	ds.fillna(method='bfill')
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
option: 色をモカシンに変更する	color = 'moccasin'
リストと配列についての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
マッピングの項目名の値	aDict[key]
シーケンスの組み合せ	itertools.combinations(iterable, n)
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
y座標の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
オブジェクトは集合クラスのインスタンスかどうか確認する	isinstance(obj, set)
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
データフレームを各列と列の組み合わせ毎にグループ分けして、最小値を求める	df.groupby([column, column2], as_index=False).min()
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
データフレームのリスト列の欠損値を直前の値で置換する	df[aList].fillna(method='ffill')
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
数列と数列についての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
色付きの一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='grey')
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データフレームからカテゴリデータのカラム名リスト	df.select_dtypes('object').columns
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
データフレームの中に文字列と文字列があるか	df.isin([value, value2])
２次元タプルをフラット化する	sum(aTuple)
印字可能な文字を使う	string.printable
作画の色を指定する	sns.set(pallete=パレット名)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
データフレームを列によってグループ化して、合計を求める	df.groupby(column).sum()
列'A'と列'B'をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを列でグループ分けして、列の要約統計量を求める	df.groupby(column).describe()[column2]
カラムのNaNを平均値で補う	ds.fillna(ds.mean())
option: 文字列をセパレータで使用する	sep = s
文字列の開始位置より後に部分文字列がないか	s.find(sub, start) == -1
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを'A'列によってによって破壊的に並べる	df.sort_values(by='A', inplace=True)
リストの文字列が最初に見つかる場所	aList.index(element)
データフレームの列を削除して更新する	df.drop(column, axis=1, inplace=True)
カラムが正規分布からどれだけ、歪んでいるか見る	ds.kurt()
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データ列の欠損値を直後の値で補う	ds.fillna(method='bfill')
ファイル全体を行分割して読み込む	f.readlines()
データフレームの全カラムを散布図として描画する	sns.pairplot(df)
データフレームを'A'列によって小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
パウダーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='powderblue')
データフレームから指定された二つの列のみ取り出す	df[[column, column2]]
データ列の中にいくつNaNがあるか数える	ds.isna().sum()
UTF8で書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
配列とリストについて散布図を描画して、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのカラムの中に日付データと文字列があるか調べる	df[col].isin([value, value2])
配列とリストの散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
２つの文字列が等しくないか調べる	s != s2
option: 読み込むシート名をnamesに減らす	sheet_name = names
option: 先頭のカラムを行に変更する	index_col = 0
データフレームを列名リストによって昇順に並べ直す	df.sort_values(by=column, ascending=True)
グラフを論文用に変更する	sns.set(context='paper')
データフレームの重複した行数のマスクを使う	df.duplicated()
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
イテラブルを文字列リストに変換して空白を使ってつなげる	' '.join(map(str, iterable))
Pandasで日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
nを8進表現に変換する	oct(n)
TSVファイルでJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
二つのデータフレームを異なる列をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
書き込み用にファイルをオープンして]、fとする	f = open(filepath, mode='w')
イテラブルを文字列リストに変換してタブによってつなげる	'\t'.join(map(str, iterable))
データフレームを表示するとき、列の最大幅をnに増やす	pd.set_option('max_colwidth', n)
▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^')
リストとデータ列の散布図を描き、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームを列名リストの値ごとに集計して列挙する	[(name, group) for name, group in df.groupby(columns)]
棒グラフを青紫色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
横向きに２つのデータフレームをマージする	pd.merge(df, df2)
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
配列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
枠なしの簡単な説明を入れる	plt.legend(frameon=False)
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
option: コロンを分割記号で用いる	sep = ':'
黒い三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
本日が木曜日	datetime.datetime.today().weekday() == 3
真上位集合かどうか調べる	aSet > aSet2
option: イエローグリーンにフォントの色を変更する	color = 'yellowgreen'
データフレームの列の各データ値の出現回数	df[col].value_counts()
半透明の点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストとリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
ビン数nを使って列をビン分割する	pd.cut(ds, n)
Pandasで、書式fmtを用いて文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
option: 改行コードを動作環境依存に変更する	newline = None
データフレームを列でソートする	df.sort_values(by=column)
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
整数nの十六進表記	hex(n)
項目名が辞書にないとき、要素を追加する	aDict.setdefault(key, element)
0からnまでの整数リスト	list(range(n+1))
ボックスチャートでデータフレームの複数の列を並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
データフレームの相関行列スピアマン相関係数で	df.corr(method='spearman')
文字列をコロンによって分割して、列挙する	s.split(':')
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
半透明の点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
折れ線グラフの右三角印の色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームのカラムは正規分布からどの程度尖っているか見る	df[col].skew()
オブジェクトは整数型のインスタンスか確認する	isinstance(obj, int)
データフレームの列と列の相関行列ケンドール順位相関係数として	df[[column, column2]].corr(method='kendall')
数列とリストについての散布図に簡単な説明用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
データフレームのcollのエポック秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
ラインを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
文字列全体を正規表現にケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
実行結果を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
赤い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
２つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
データフレームの列の値がx未満の行を抽出する	df[df[column] < x]
ペールグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='palegreen')
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
自然数個からk個取り出した時の並べ方の総数	math.perm(n, k)
線形モデルの回帰変数を使う	model.coef_
2つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
データを最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームを列でグループ分けして、それぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
文字列を最初の部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
線グラフをマルーン色を使って描画する	plt.plot(データ列x, データ列y, color='maroon')
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
日本語が文字列内に含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ニューラルネットとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
Pandasで、UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ふたつの集合は集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
小麦色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームを複数の列の値によってグループ化し要約統計量を求める	df.groupby(columns).describe()
散布図を右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
半透明の実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
列の値によってデータフレームをグループ化して各グループごとの個数を求める	df.groupby(column).count()
nをn2で割ったモジュロ	n % n2
データフレームを各列毎にグループ分けして、列の標準偏差を計算する	df.groupby(column)[column2].std()
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
ファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムがどの程度分散しているか調べる	df[col].var()
マッピングのキー一覧を見る	list(aDict)
マッピングをコピーする	aDict.copy()
タプルの平均値を計算する	sum(aTuple)/len(aTuple)
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームを'A'列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
タブ区切りのファイルを読む	pd.read_csv(filename, sep='\t')
リストをビン数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
サンディーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの中の列をビン数nを用いてビン分割する	pd.cut(df[col], n)
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をミスティローズにする	plt.hist(データ列, color='mistyrose')
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
茶色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ベクトルのユニークな値を要素とする配列	np.unique(aArray)
リストを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: 茶色に色を設定する	color = 'brown'
データフレームの値がNaN	df.isna()
折れ線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
データフレームを列名リストによって小さい順に並べ直して更新する	df.sort_values(by=column, ascending=True, inplace=True)
バイアスなしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
リストと配列の散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
データフレームの相関行列ピアソンで	df.corr(method='pearson')
文字列中の部分文字列の登場をカウントする	s.count(sub)
双方向キューの末尾に要素を追加する	deq.append(element)
双方向キューをクリアする	deq.clear()
オブジェクトはリストの要素	element in aList
文字列を末尾から空白で分割する	s.rsplit()
値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
黒い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列を変数にして、パラメータにする	z = sympy.Symbol(s)
等間隔でデータフレームの中の列をn個に分割する	pd.cut(df[col], n)
データフレームを列でソートしてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
辞書のコピーを作る	aDict.copy()
折れ線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
文字列を水色で出力する	print(f'\033[36m{value}\033[0m')
最初の要素を両端キューから取り出す	deq.remove(element)
平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図を▽マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
リストとリストについて散布図をプロットして、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
リストのn番目からn2番目までの部分を取り出す	aList[n:n2]
双方向キューの左にシーケンスの値を追加する	deq.extendleft(iterable)
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームのリストカラムを四捨五入して、整数にする	df[aList].round().astype(int)
タブ区切りのファイルからCSVファイルを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
イテラブルとデータ列について散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
2進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: ゴールドにグラフの色を設定する	color = 'gold'
バイナリ書き込みモードとしてファイルパスをオープンする]	open(filepath, mode='wb')
文字列はタイトル大文字小文字	s.istitle()
シーグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
黒い右三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列が無限に繰り返す列を得る	itertools.repeat(element)
リストとリストについて散布図を描き、、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: 印を右三角に変更する	marker = '>'
CSVTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ファイルをオープンして]読み込みストリームを見る	open(filepath, mode='r')
ヒストグラムを破線に指定する	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をライトスチールブルーにする	plt.plot(データ列x, データ列y, color='lightsteelblue')
既にロードされたモジュールの一覧	sys.modules
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
キーが辞書に存在する	key in aDict
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
バギングとして回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
ナバホホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
２つの文字列は大文字小文字を無視して同じか	s.casefold() == s2.casefold()
データ列の中に文字列があるかどうか	ds.isin([value])
リストと配列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
イテラブルとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
文字列は全て十進数字か確認する	s.isdecimal()
データフレームを'A'列を用いてソートする	df.sort_values(by='A')
正規分布か仮説検定する	scipy.stats.shapiro(データ列)
日付時刻データにn時間分加える	aDatetime + datetime.timedelta(hours=n)
集合から別の集合の要素を取り除く	aSet.difference_update(aSet2)
中央値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
データフレームを複数の列によってで降順にソートする	df.sort_values(by=column, ascending=False)
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
データ列と配列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
集合のすべての要素が別の集合に含まれるか	aSet.issubset(aSet2)
リストとリストについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列タブ区切りのファイルからn番目の列をインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
二つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
プラットホームがLinuxかどうか	sys.platform.startswith('linux')
浮動小数点数のn乗して数による余り	pow(x, n, y)
データフレームを列の値によって集約して、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
要素が集合に含まれない	element not in aSet
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
xが1もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
からデータフレームを読む	pd.read_excel(filename)
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
半透明の一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストと数列について散布図をプロットし、、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
疑似乱数平均と標準偏差からを得る	random.normalvariate(mu=0.5, sigma=0.2)
option: フォントの色をライトブルーに設定する	color = 'lightblue'
データフレームをグループ化し、各列に対し合計を求める	df.groupby(column)[column2].sum()
箱ひげ図でデータ列を描く	plt.boxplot(データ列)
データフレームのインデックス名をnameからname2に付け直す	df.rename(index={name: name2})
整数が負の数か調べる	x < 0
上三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列の中の未入力値の数を数える	ds.isna().sum()
文字列が平仮名	('ぁ' <= ch <= 'ん')
リストの推移を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
Pandasで、フォーマットfmtとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
二つの変数を文字列で区切って表示する	print(value, value2, sep=s)
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
青い点線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
プロットにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
オブジェクトは辞書かどうか調べる	isinstance(obj, dict)
データフレームのリストカラムの中に存在する文字列との数を数える	df[aList].isin([value, value2]).sum()
処理中の例外を情報	sys.exc_info()
環境がWindows	sys.platform.startswith('win32')
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
文字列中にひとつでも非アルファベットが含まれるか	any(not c.isalpha() for c in s)
x座標の目盛を対数に変更する	plt.xscale('log')
nの八進表記を見る	oct(n)
option: グラフの色を濃いシアンに指定する	color = 'darkcyan'
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
nはn2か	n == n2
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
変数を黄色で出力する	print(f'\033[33m{value}\033[0m')
オブジェクトはバイト列かどうか調べる	isinstance(obj, bytes)
データフレームの列の文字列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
イテラブルを文字列リストに変換してカンマによって結合する	','.join(map(str, iterable))
線グラフをシルバー色を使って描画する	plt.plot(データ列x, データ列y, color='silver')
切片なしの重回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの列のNaNをxに減らす	df[col].fillna(x)
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
キーが辞書にあるいるか調べる	key not in aDict
双方向キュー中の要素の数を数える	deq.count(element)
データ列の折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: ナバホホワイトを用いる	color = 'navajowhite'
変数を下線付き化する	f'\033[4m{value}\033[0m'
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームの標本標準偏差を求める	df.std()
リストの推移を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームのリストカラムの中にある文字列の数を数える	df[aList].isin([value]).sum()
追加できるように既存のファイルをEUCで開く]	open(filepath, mode='a', encoding='euc_jp')
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
nがセットのひとつか調べる	n in aSet
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
配列の最小	np.min(aArray)
ゴーストホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ひとつでも非数字が文字列中に含まれるかどうか確認する	any(not c.isdigit() for c in s)
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
option: 色をオレンジにする	color = 'orange'
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
データ列の欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
option: ライトスレイグレーを用いる	color = 'lightslategray'
カラーコードで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
ビン数nを使ってデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
列'A'と列'B'をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
実数に整数をかける	x * y
縦棒グラフを描画し、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
カンマで文字列を区切って、列挙する	s.split(',')
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
半透明の破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タプルから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
配列をベースに全要素が0の配列	np.zeros_like(aArray)
カテゴリ別で色分けして、データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
集合が空	len(aSet) == 0
option: 色をオールドレースに設定する	color = 'oldlace'
option: 行を連番に指定する	index_col = None
プロットの使途をポスターに変更する	sns.set(context='poster')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
破壊的にデータフレームを昇順に列によって並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを各列毎にグループ分けし、文字列というグループの個数を算出する	df.groupby(column).size()[s]
リストと数列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームからn行をランダムに選択する	df.sample(n)
データフレームからカテゴリデータの列を選択する	df.select_dtypes('object')
グラフの描画で明るく色を使う	sns.set(pallete='bright')
データフレームのNaNが含まれる箇所を	df.style.highlight_null()
マッピングをカウンタに変換する	collections.Counter(aDict)
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
rgbのバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフに四角印を用いる	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
本日の年数を使う	datetime.datetime.today().year
option: ダークオーキッド色を用いる	color = 'darkorchid'
論文にグラフの用途を指定する	sns.set(context='paper')
整数nが組のいづれかかどうか調べる	n in aTuple
リストとリストの散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをプロットして中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストとリストについて散布図を描き、、マーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
リストを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
リストとリストについて散布図を描いて、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
上位集合もしくは等しい	aSet > aSet2
'A'列を用いてデータフレームをソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
散布図の▲印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
ValueMapでデータフレームの列をまとめて置換する	df[col].replace(ValueMap)
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
リストとリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列と配列について散布図を描き、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのカラムの中に文字列がある	df[col].isin([value])
配列とリストの散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
リスト中の要素が全て真か	all(aList)
データ列を百の位で四捨五入する	ds.round(-2)
データフレームから指定した３つの列を抽出する	df[[column, column2, column3]]
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを各列毎にグループ分けし、、列の平均値を算出する	df.groupby(column)[column2].mean()
ベクトルを元にして全要素が1の配列	np.ones_like(aArray)
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
ファイルパスを開いて]追加ストリームを見る	open(filepath, mode='a')
最大長nの双方向キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
書式をタプルでフォーマットする	formatText.format_map(aDict)
リストと配列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
変数をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
浮動小数点数のcosの逆数	math.acos(x)
実数を実数に足す	x + y
タブ文字	'\t'
データフレームをグループ化し、それぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
円プロットを円にする	plt.axis('equals')
中央値でカラムのNaNを埋める	ds.fillna(ds.median())
大きい順に破壊的にデータフレームを'A'列と'B'列によってソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列の開始位置以降に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
数列と数列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
リストとイテラブルについて散布図を描画して、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
文字列を最後の部分文字列で二つに区切って後半の文字列を見る	s.rpartition(sub)[-1]
option: スラグレーにグラフの色を指定する	color = 'slategray'
リストを緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
文字列はキーワードか調べる	keyword.iskeyword(s)
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
両端キューが空でないか確認する	len(deq) != 0
文字列をセパレータで区切って、文字列リストに変換する	s.split(sub)
モードでデータ列の欠損値を埋める	ds.fillna(ds.mode().iloc[0])
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
両端キューの値をインプレースに逆に並べ直す	deq.reverse()
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
タプルの末尾のn要素を除く	aTuple[:-n]
ベクトルの分散	np.var(aArray)
option: グラフの色をライムに指定する	color = 'lime'
データフレームを表示するとき、ヘッダー行を左寄せにする	pd.set_option('colheader_justify', 'left')
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
線グラフを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
整数nは配列のひとつか	n in aArray
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
データフレームをグループ化し、各列に対し分散を計算する	df.groupby(column)[column2].var()
標準出力のバッファを即時表示する	sys.stdout.flush()
データフレームの列がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
配列を縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ナバホホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='navajowhite')
データ列の中にあるの合計を数える	ds.isin([value]).sum()
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
グラフの見栄えをデフォルトでいい感じにセットする	sns.set()
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
predicateFuncが真になるイテラブルの要素を得る	itertools.takewhile(predicateFunc, iterable)
文字列をdatetime64型に変換する	pd.to_datetime(s)
実行結果を太字でプリントする	print(f'\033[1m{value}\033[0m')
型のサブクラス	issubclass(サブクラス, クラス)
辞書の項目名を列挙する	list(aDict)
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
環境はMacOSか	sys.platform.startswith('darwin')
折れ線グラフの菱形マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列の示すエンコーディングとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列の開始位置からと終了位置番目までの範囲に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
MLPでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ファイル名がJSONファイル	filename.endswith('.json')
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
クラス分類の偽陽性をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
列を2回あわせた直積	itertools.product(iterable, repeat=2)
option: フォントの色をコーンズシルクに指定する	color = 'cornsilk'
横軸の目盛りを表示しない	plt.xticks([])
シーケンスとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
日付データが月曜日	aDate.weekday() == 0
データ列をリストを境界値として分割する	pd.cut(ds, aList)
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
表データを破壊的に複数の列によってで整列する	df.sort_values(by=column, inplace=True)
改行なしに二つの変数を出力する	print(value, value2, end='')
データ列とリストについての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データ列と配列について散布図を描画して文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
赤い右三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
オブジェクトのフィールドの値を値に指定する	setattr(obj, プロパティ名, 値)
ラインを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ValueMapでデータ列の値をまとめて変更する	ds.replace(ValueMap)
ふたつのリストの積集合を計算する	list(set(aList) & set(aList2))
データフレームのリスト列の中央値	df[aList].median()
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
文字列の先頭から空白やタブを取り除く	s.lstrip()
データフレームのn行目を取り除い、、更新する	df.drop(n, axis=0, inplace=True)
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
カラムの値を正規表現patternでまとめてreplに変更する	ds.replace(pattern, repl, regex=True)
集合にイテラブルの要素を追加する	aSet.update(iterable)
文字列の中のASCII限定としてパターンによる全マッチを求める	re.findall(pattern, s, flags=re.ASCI)
列の一意な値の個数	ds.nunique()
option: 色をゴーストホワイトに変更する	color = 'ghostwhite'
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
項目名が辞書上で未定義かどうか調べる	key not in aDict
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームを散布図で見て、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
青い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ファイルから1文字読み込む	f.read(1)
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
キューの最後から要素を取り出す	deq.pop()
デックの要素をn個分回転させる	deq.rotate(n)
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
リストとイテラブルについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
行列をベースにして全要素が初期値の行列	np.full_like(aArray, 初期値)
リストの各値を関数に適用した結果で並べる	sorted(aList, key=func)
データフレームの列の中の欠損値の個数を数える	df[col].isna().sum()
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
セパレータで文字列を分割し、列挙する	s.split(sep)
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
実数の双曲線正弦の逆数を求める	math.asinh(x)
赤い右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
option: 色をブルーバイオレットに設定する	color = 'blueviolet'
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
n番目のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=n)
双方向キューに要素をスタックする	deq.append(element)
要素は辞書の値に含まれていない	element not in aDict.values()
文字列を走査し、パターンに大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストの散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
データ列の未入力値を平均値に設定する	ds.fillna(ds.mean())
option: グラフの色をフォレストグリーンにセットする	color = 'forestgreen'
二つのオブジェクトが同一参照	obj is obj2
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
ファイル名がテキストファイル	filename.endswith('.txt')
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
３2ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
説明変数と目的変数を用いて回帰モデルを学習する	model.fit(説明変数, 目的変数)
列を更新不能な集合にする	frozenset(iterable)
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
カウンタをイテラブルを回数して、更新する	aCounter.update(iterable)
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: 色を白に設定する	color = 'white'
データフレームのリスト列の中にいくつ文字列が含まれるかカウントする	df[aList].isin([value]).sum()
データフレームの列の中にある文字列の数を数える	df[col].isin([value]).sum()
データフレームのリストカラムを千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
2つの文字列は同じか調べる	s == s2
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームのカラムを四捨五入する	df[col].round()
option: クロスマーカーを使う	marker = 'x'
赤い実線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
データフレームを二つの列によってソートし、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームのカラムの欠損値を中央値に変更する	df[col].fillna(df[col].median())
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
タブ区切りのファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: スプリンググリーンを使用する	color = 'springgreen'
最初の列をデータフレームから除く	df[df.columns[1:]]
option: スレートブルーにフォントの色を設定する	color = 'slateblue'
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
nが1、もしくは2かどうか	n == 1 or n == 2
データフレームのカラムの歪度を求める	df[col].kurt()
八進数文字列を整数にする	int(s, 8)
文字列を最後の部分文字列で分けたときの前半の文字列を取り出す	s.rpartition(sub)[0]
二つのカウンタの共通する値	aCounter & aCounter2
リストとリストについて散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
データフレームを二つの列でを用いて降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
辞書に別の辞書の項目を加えて、更新する	aDict.update(aDict2)
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームを列の値によってグループ化して、各グループの分散を計算する	df.groupby(column).var()
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
横棒グラフをフローラルホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームを関数ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフをライムグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='limegreen')
リストと数列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
黒いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
option: 色をシャルトリューズに設定する	color = 'chartreuse'
ゼロ埋めされた符号なし８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.uint8)
数値の数値	float(e)
変数が0に近づくとき数値の極限値を求める	sympy.limit(e, z, 0)
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームを'A'列と'B'列によってグループ化する	df.groupby(['A', 'B'])
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ゼロ埋めした８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
カテゴリで色分けして、データフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
n個にデータフレームの中の列を分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームの列の中に文字列と文字列がいくつ存在するかカウントする	df[col].isin([value, value2]).sum()
変数を黒色にする	f'\033[30m{value}\033[0m'
ホワイトスモーク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
option: コーラルにグラフの色をセットする	color = 'coral'
クラス分類の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムを上限から下限までの上限下限で描く	plt.hist(データ列, range=(start, end))
集合が空でないかどうか判定する	len(aSet) != 0
両端キューの先頭に文字列をつけ加える	deq.appendleft(element)
データ列の折れ線グラフを描画して、色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを'A'列と'B'列を用いてによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
Pandasで、文字列のエポック秒からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
昇順にデータフレームを２つの列でソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
各列毎にデータフレームをグループ化して列の合計を求める	df.groupby(column)[column2].sum()
リストと数列の散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: 紺に色を設定する	color = 'darkblue'
ヒストグラムをブラック色を使って描画する	plt.hist(データ列, color='black')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームを複数の列でソートし、、更新する	df.sort_values(by=column, inplace=True)
リストと配列について散布図を描画して、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
プロットの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
箱ひげ図を描画し、、平均を加える	plt.boxplot(データ列, showmeans=True)
等間隔でデータ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: ライトグレー色を用いる	color = 'lightgray'
散布図の▲マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.')
データフレームのリストカラムの値をValueMapで一度に置き換える	df[aList].replace(ValueMap)
リストの要素数	len(aList)
丸マーカーを用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をアクアに変更する	color = 'aqua'
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
フォーマットで文字列をPandasの日付型にする	pd.to_datetime(s, format='%Y-%m-%d')
データフレームの未入力値を最頻値に変更する	df.fillna(df.mode().iloc[0])
タプルの全項目をクリアする	aDict.clear()
分類モデルのPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
イテラブルとリストについて散布図を描き、バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのリストカラムの未入力値を平均値で埋める	df[aList].fillna(df[aList].mean())
データ列の中に日付データとが含まれる	ds.isin([value, value2])
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
データフレームの列を正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
リストとリストについて散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームからランダムに取り出す	df.sample()
折れ線グラフの色をアイボリーにする	plt.plot(データ列x, データ列y, color='ivory')
列'A'と列'B'をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
前もってASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
数列を箱ひげ図にする	plt.boxplot(データ列)
オブジェクトは文字列型か調べる	isinstance(obj, str)
数列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
重複した行を抽出する	df[df.duplicated(keep=False)]
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームを'A'列と'B'列の値にグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
縦棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をアイボリーにセットする	plt.hist(データ列, color='ivory')
ペルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
破壊的に列を用いてによってデータフレームを並べる	df.sort_values(by=column, inplace=True)
破壊的にデータフレームを昇順に'A'列によってソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの指定された列の名前一覧の列を選択する	df[columns]
rgbのクロスマーカーをリストとデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
双方向キュー中の数値のインデックス	deq.index(element)
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
整数nの二進数表記	bin(n)
オブジェクトが論理値か調べる	isinstance(obj, bool)
ヒストグラムをシエナ色を使って描画する	plt.hist(データ列, color='sienna')

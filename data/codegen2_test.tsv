部分文字列を文字列の後ろから探す	s.rfind(sub)
option: 色をラベンダーブラッシュに設定する	color = 'lavenderblush'
ヒストグラムの色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
整数乱数で要素を埋めた配列を作る	np.random.randint(開始値, 終了値, N)
データフレームの一部のカラムの欠損値をxに指定する	df[['列A', '列B']].fillna(x)
折れ線グラフの色をRGBでする	plt.plot(データ列x, データ列y, color='#800080')
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
スレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
整数nの十六進数リテラル	hex(n)
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
点線に線グラフのラインスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
棒グラフをナバホホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='navajowhite')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: コーラルにグラフの色を設定する	color = 'coral'
点線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
オブジェクトの参照カウントを確認する	sys.getrefcount(obj)
キューに要素を積む	deq.append(element)
行列の合計値を求める	np.sum(aArray)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
日付時刻データは何曜日か知る	aDatetime.weekday()
データフレームの選択したカラムのNaNをその最頻値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
スクリプトの名前を知る	sys.argv[0]
2つの浮動小数点数が十分に近いかどうか確認する	math.isclose(x, x2)
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
データシリーズの欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
ポスターにプロットの用途を設定する	sns.set(context='poster')
実数の双曲線余弦の逆数を計算する	math.acosh(x)
折れ線グラフの丸マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線形回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
重複ありで10行をランダムにデータフレームからサンプリングする	df.sample(10, replace=True)
option: 色をターコイズに変更する	color = 'turquoise'
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
整数nの2進表現	bin(n)
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
プロットを表示する	plt.show()
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
ふたつの列を組み合わせてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
疑似乱数	random.random()
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
トマト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
柱状図のビンを設定する	plt.hist(データ列, bins=区関数)
既存のファイルを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの選択した列の母標準偏差	df[['列A', '列B']].std(ddof=0)
両端キューの順序を左にn個分ローテンションする	deq.rotate(-n)
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
浮動小数点数を整数に変換する	int(x)
文字列の最後から部分文字列を見つける	s.rfind(sub)
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
option: グラフの色をミディアムスレートブルーに変更する	color = 'mediumslateblue'
データフレームからn行を重複ありでランダムにサンプリングする	df.sample(n, replace=True)
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
option: 茶色にグラフの色を設定する	color = 'brown'
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのカラムをカテゴリデータにする	df[col].astype(object)
ヒストグラムをパパイヤウィップ色を使って描画する	plt.hist(データ列, color='papayawhip')
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
option: シーグリーンを用いる	color = 'seagreen'
データフレームを小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
モカシン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
オプションで出力先を標準出力に設定する	file = sys.stdout
EUCで書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding='euc_jp')
整数nを二進文字列にする	bin(n)[2:]
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
二つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
グラフに使うフォントを指定する	sns.set(font=フォント名)
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
文字列中の小文字を大文字にする	s.upper()
option: ベージュ色を用いる	color = 'beige'
シーケンスから集合を使う	set(iterable)
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
ヒストグラムの色を淡いピンク色にする	plt.hist(データ列, color='lightpink')
カラーバーを設定する	plt.colorbar()
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ディムグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
部分文字列で文字列が終わるか判定する	s.endswith(sub)
横棒グラフをシスル色を用いて描画する	plt.barh(データ列x, データ列y, color='thistle')
空白文字を全部見る	string.whitespace
タイムスタンプデータの日数	aDatetime.day
オリベドラブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ドジャーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='dodgerblue')
predicateFuncが真となるイテラブルの部分を得る	itertools.takewhile(predicateFunc, iterable)
指定した列の値で集計し、平均値を算出する	df.groupby('列A').mean()
option: ダークオーキッド色を使用する	color = 'darkorchid'
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
option: ダークオレンジ色を用いる	color = 'darkorange'
option: ライトシアンにグラフの色をセットする	color = 'lightcyan'
option: サドルブラウンを使う	color = 'saddlebrown'
標準入力から1文字分読み込む	sys.stdin.read(1)
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
小数点数のk進対数	math.log(x, k)
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
デフォルトでグラフの見栄えをいい感じに指定する	sns.set()
option: グラフを点線にセットする	linestyle = 'dotted'
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
option: オリベドラブを用いる	color = 'olivedrab'
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
リストを分割する	pd.cut(aList, aList)
データフレームの指定した列の中にある文字列の合計を数える	df['列A'].isin([value]).sum()
データシリーズがどの程度、分散しているか確認する	ds.var()
ファイルを絶対ファイルパスにする	os.path.abspath(filepath)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフの三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列のn番目の文字を使う	s[n]
正規分布にしたがって配列の値が発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
オブジェクトにプロパティが存在するか	hasattr(obj, プロパティ名)
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: 半透明にする	alpha = 0.5
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
文字列がリストに含まれないかどうか	element not in aList
黒いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
本日の月数を使う	datetime.datetime.today().month
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
グラフの描画で暗くパレットを使用する	sns.set(pallete='dark')
サポートベクトル分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ミディアムシアグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ミディアムシアグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
現在は何分か知る	datetime.date.today().minute
データフレームの指定したカラムの中にいくつが存在するか調べる	df['列A'].isin([value]).sum()
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
折れ線グラフの丸マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
オブジェクトのバイトサイズを調べる	sys.getsizeof(obj)
option: グラフの色をブラックに変更する	color = 'black'
nの2乗を求める	n ** 2
データフレームのカラムの名前を全て置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームの指定した列の欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
２つの列を組み合わせてグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
棒グラフをプラム色を使って描画する	plt.bar(データ列x, データ列y, color='plum')
オブジェクトは文字列か調べる	isinstance(obj, str)
option: 区切りをスラッシュにする	sep = '/'
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
三自然数のLCMを算出する	math.lcm(n, n2, n3)
option: ダークスラテグレー色を使用する	color = 'darkslategray'
折れ線グラフの下三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
本日のローカルなタイムスタンプ	datetime.datetime.today()
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
Pythonパス	sys.path
散布図を丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
散布図の▼印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームの指定したカラムの欠損値を直前の値に変更する	df['列A'].fillna(method='ffill')
表データのあるカラムのタイムゾーンをセットする	df['列A'].tz_convert('Asia/Tokyo')
タプル中の最初の文字列を探す	aTuple.index(element)
データフレームのあるカラムをリストとして選ぶ	df['列A'].values.tolist()
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームの列の第一四分位数を求める	df['列A'].quantile(0.25)
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
等量でn個にリストをビン分割する	pd.qcut(aList, n)
データフレームのある列の平均値を求める	df['列A'].mean()
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
オブジェクトが論理値クラスのインスタンスかどうか	isinstance(obj, bool)
option: リネン色を用いる	color = 'linen'
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
ダークスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
重複ありで100行をデータフレームからランダムにサンプリングする	df.sample(100, replace=True)
データシリーズの空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
配列の次元数を求める	aArray.ndim
配列の型	aArray.dtype()
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
タプルをカウンタにする	collections.Counter(iterable)
全要素を1で初期化した配列を作成する	np.ones(要素数, dtype=np.int)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: スプリンググリーン色を使用する	color = 'springgreen'
変数について数式の積分を行う	sympy.integrate(e, z)
データフレームのデータを条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
マッピングの項目名に対応した値	aDict.get(key)
データフレームのある列の値がx以下の行を取り出す	df[df['列A'] <= x]
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
本日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
データ列をヒストグラムとして可視化する	plt.hist(データ列)
rgbの右三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の丸マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
パターンによって文字列を置換する	re.sub(pattern, newsub, s)
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
横棒グラフをダークシアン色を使って描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ある列の値ごとの合計	df.groupby('列A').sum()
コマンドの第二引数	sys.argv[1]
二つの実行結果をタブで区切ってプリントする	print(value, value2, sep='\t')
折れ線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
赤い下三角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
第2コマンド引数	sys.argv[1]
両端キューに文字列をプッシュする	deq.append(element)
非アルファベットが文字列中にあるか	any(not c.isalpha() for c in s)
数式を簡略化する	sympy.sympify(e)
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
列の種類	df.info()
カラム間のスピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
リストから配列を作成する	np.array(iterable)
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
変数を紫色で出力する	print(f'\033[35m{value}\033[0m')
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
浮動小数点数をn乗する	x ** n
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
nが組のひとつか調べる	n in aTuple
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
日付データと日付データの時間差を求める	aDate - aDate2
主成分分析で多次元データをパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
折れ線グラフのバツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ダーク・スラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
スライド用にグラフを指定する	sns.set(context='talk')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
リストを分割数nを用いてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列は全て識別子名	s.isidentifier()
データ列を対数する	np.log(データ列)
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
行列の平均値	np.mean(aArray)
option: レモンシフォンに色を設定する	color = 'lemonchiffon'
数列を円グラフにする	plt.pie(データ列, startangle=90)
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
小数点数の逆双曲線正接	math.atanh(x)
日付時刻データは日付時刻データより後ろか判定する	aDatetime > aDatetime2
乱数のベクトルを作る	np.random.random(N)
数列とリストについて散布図を描いてマーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
nとn2が等しいか	n == n2
データフレームをグループ化し、ある列に対し平均値を計算する	df.groupby('列A')['列B'].mean()
option: 色をリネンに指定する	color = 'linen'
文字列がタプルの要素でないかどうか調べる	element not in aTuple
色付きの一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフの上三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ダークスラテグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ファイルに文字列を書く	f.write(s)
グラフの色テーマをパステル調にする	sns.set(pallete='pastel')
データフレームから型リストで指定したデータ型の列を取り出す	df.select_dtypes(include=typeList)
乱数で要素を埋めた行列	np.random.random(N)
実行結果を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
正規表現を複数行対応として事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
cosを計算する	math.cos(x)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
nが2で割り切れないかどうか調べる	n % 2 == 1
線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフのアルファを指定する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームをグループ化しそれぞれの個数を求める	df.groupby('列A').count()
線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
マップから項目名で指定されたエントリを取り出す	aDict.pop(key)
option: 列の名前をリストで設定する	names = 列名リスト
組の最初の文字列を探す	aTuple.index(element)
両端キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
文字列の両端から部分文字列を除去する	s.strip(sub)
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
積み上げ横棒プロットを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ダークバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
スノー色としてヒストグラムを描画する	plt.hist(データ列, color='snow')
リストとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列内にひとつでも英数字が含まれるか確認する	any(c.isalnum() for c in s)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
2つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
option: フォントの色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
色付きの点線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ライトグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lightgreen')
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ベクトルの最小を使う	np.min(aArray)
eの浮動小数点数乗	math.exp(x)
リストの推移を点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
色付きの点線で数列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
option: ライトシアン色を使用する	color = 'lightcyan'
タイムスタンプデータが何月か知る	aDatetime.month
データフレームの重複を確認する	df.duplicated()
RANSACとしてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームを行によって昇順にソートする	df.sort_index(ascending=True)
赤い実線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
カラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
現在のワーキングディレクトリ	os.getcwd()
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
配列を分割数nでビン分割する	pd.cut(aArray, n)
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
列を分割数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
10を底とする対数を求める	math.log10(x)
option: インディアンレッドを用いる	color = 'indianred'
データフレームの母標準偏差を求める	df.std(ddof=0)
ある列をドロップしてみる	df.drop('列A', axis=1)
option: ペルーを用いる	color = 'peru'
リストの値のみプリントする	print(*aList)
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
二つの数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
マップに辞書の値を加えて、更新する	aDict.update(aDict2)
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームを関数の値でグループ化する	df.groupby(関数)
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフのポイント印の色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列を二つに分ける	s.partition(sep)
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
折れ線グラフをナバホホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='navajowhite')
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
あるカラムのKurtosis	df['列A'].kurt()
2つの変数を同じ値にする	x = y = n
列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
日付時刻データが日曜日	aDatetime.weekday() == 6
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
カラム名を指定して二つのデータフレームを左結合する	pd.merge(df, df2, on='列A', how='left')
配列の推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
リストとリストについての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
赤い▼マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データ列を対数変換する	np.log(データ列)
コロンで区切って２つの変数をプリントする	print(value, value2, sep=':')
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
整数nを16進文字列に変換する	hex(n)[2:]
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
今日が水曜日	datetime.datetime.today().weekday() == 2
勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
３変数の最大値	max(x, y, z)
散布図を青紫色を用いて描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームから列を１つ選択する	df[['列A']]
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
n個に等量でリストを分割する	pd.qcut(aList, n)
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
option: グラフの色をサドルブラウンにする	color = 'saddlebrown'
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
ある列のカテゴリごとの合計を求める	df.groupby('列A').sum()
列名を指定して二つのデータフレームを結合する	pd.merge(df, df2, on='列A')
2つのデータフレームを結合する	pd.merge(df, df2)
option: コロンを区切りで使う	sep = ':'
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
貝殻色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
列の一意な値	ds.unique()
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列中に部分文字列がいくつか存在するか調べる	s.count(sub)
双方向キューの値を左にn個分ローテンションする	deq.rotate(-n)
KNNとして回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
行列をリストから初期化する	np.array(aList)
ヒストグラムをビンを設定して描画する	plt.hist(データ列, bins=区関数)
双方向キューの最後に数値を入れる	deq.append(element)
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
sepを区切りにして文字列リストを一つの文字列にする	sep.join(aStringList)
両端キューに要素をenqueueする	deq.appendleft(element)
小数点数の逆双曲線余弦を求める	math.acosh(x)
データフレームを出力する	df.to_csv('file.csv')
ブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
スラグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
option: 三２ビット整数型を用いる	dtype = np.int16
option: 青緑に色を設定する	color = 'teal'
ひとつ飛ばしでリストを抽出する	aList[::2]
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
黒い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
2つの実行結果をタブで区切ってプリントする	print(value, value2, sep='\t')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
本日が水曜日	datetime.datetime.today().weekday() == 2
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
箱ひげ図を描画して平均を追加する	plt.boxplot(データ列, showmeans=True)
青い点線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
配列とイテラブルの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
二つのデータフレームを縦に結合する	pd.concat([df, df2], axis=0)
散布図をスノー色を使って描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームから指定した2つの列のみ抽出する	df[['列A', '列B']]
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
データフレームを関数の値によってグループ化し、要約統計量を計算する	df.groupby(関数).describe()
文字列の開始位置と終了位置の間に部分文字列が含まれるか確認する	s.find(sub, start, end) != -1
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
クラス分類の感度を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
散布図を濃いシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: 線の種類を点線に指定する	linestyle = 'dotted'
データシリーズの値がNaNか調べる	ds.isna()
数式の変数に数値を代入する	e.subs(z, e2)
文字列の無限なイテラブル	itertools.repeat(element)
リストと配列についての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストと配列の散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
predicateFuncを適用したときTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
指定したカラムのカテゴリで集計しそれぞれの分散を求める	df.groupby('列A').var()
データフレームのカラムの歪みを求める	scipy.stats.skew(df['列A'], bias=False)
option: スラッシュを分割記号で使う	sep = '/'
いつまでもカウントアップする	itertools.count()
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーをバツに設定する	marker = 'x'
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
データフレームの文字列をNaNにする	df.replace(値, np.nan)
日付データが日付データと同時	aDate == aDate2
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
青い破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
配列のn次モーメントを計算する	scipy.stats.moment(配列, moment=n)
ダークグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
ある列の値でNaNを含めてデータフレームをグループ化する	df.groupby('列A', dropna=False)
データフレームをソートし、、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
0で全要素を初期化した配列を初期化する	np.zeros(要素数)
線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
列をフォーマットで日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
赤い一点鎖線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームをグループ化し、それぞれの平均値を計算する	df.groupby('列A').mean()
アイボリー色を用いてヒストグラムを描画する	plt.hist(データ列, color='ivory')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
指定したカラムのメディアン	df['列A'].median()
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
インプレースにスタックの値を逆順にする	deq.reverse()
データフレームの選択した列の相関行列をケンドール相関係数として計算する	df[['列A', '列B']].corr(method='kendall')
文字列が全て空白文字か	s.isspace()
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
双方向キューの最後	deq[-1]
ExcelファイルファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームを2つの列の値でグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
散布図でデータフレームの列を可視化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
棒グラフをタン色を使って描画する	plt.bar(データ列x, データ列y, color='tan')
棒グラフをスラグレー色を使って描画する	plt.bar(データ列x, データ列y, color='slategray')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
option: ライトコーラルを用いる	color = 'lightcoral'
イテラブルに配列を続けたイテラブル	itertools.chain(iterable, iterable2)
数式のパラメータにnを代入する	e.subs(z, n)
青色で文字列をプリントする	print(f'\033[34m{value}\033[0m')
option: 右三角印を用いる	marker = '>'
ファイル名がCSVファイル	filename.endswith('.csv')
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
指定した列だけデータフレームの重複を見る	df.duplicated(subset='列A')
線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: グレーにグラフの色を設定する	color = 'gray'
箱ヒゲ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
列をビン分割する	pd.cut(ds, aList)
データシリーズのタイムゾーンを変更する	ds.tz_convert('Asia/Tokyo')
ヒストグラムを３つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
option: 珊瑚色を使う	color = 'coral'
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
３つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
nまでのスライス	slice(n)
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
データをL1ノルムとして正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
真部分集合	aSet < aSet2
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgrey')
タプルのキーを列挙する	list(aDict)
文字列をISO8601形式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
セットが空でないか調べる	len(aSet) != 0
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
度数分布図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
実数のハイパボリック・タンジェント	math.tanh(x)
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
グリーンイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ファイルをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
option: 右三角印を描画する	marker = '>'
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
２次元タプルをflattenする	sum(aTuple)
縦棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
nからn2を引いてnに代入する	n -= n2
文字列中にひとつでも非空白が含まれるか確認する	any(not c.isspace() for c in s)
配列と配列について散布図を描画し、、マーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
option: ブルーバイオレットにグラフの色を変更する	color = 'blueviolet'
option: 左三角印を使う	marker = '<'
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
シーケンスを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
要素一つのタプル	(element,)
option: スチールブルーを用いる	color = 'steelblue'
変数を入れ替える	x, y = y, x
リストと配列について散布図をプロットして、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
option: 深紅を使う	color = 'crimson'
イテラブルと配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
カラムのKurtosis	scipy.stats.kurtosis(df['列A'], bias=False)
option: 分割記号を改行にする	sep = '\n'
文字列をファイルに書き込む	f.write(s)
値を太字にする	f'\033[1m{value}\033[0m'
データシリーズの尖度を計算する	ds.skew()
カデットブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
横棒グラフをホットピンク色を使って描画する	plt.barh(データ列x, データ列y, color='hotpink')
文字列を置換する	s.replace(sub, newsub)
二進対数	math.log2(x)
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
柱状図の範囲を変更する	plt.hist(データ列, range=(start, end))
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
スカイブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
上位集合もしくは等しいか	aSet > aSet2
文字列をセンタリングする	s.center(文字列幅)
データフレームの指定したカラムの中に文字列と文字列がいくつ存在するか求める	df['列A'].isin([value, value2]).sum()
nの各桁の和	sum(map(int, str(n)))
ペアリストpairsからカウンタを準備する	collections.Counter(dict(pairs))
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択したカラムの欠損値をその中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームのNaNを平均に設定する	df.fillna(df.mean())
option: アクア色を用いる	color = 'aqua'
ゼロ埋めされた行列を初期化する	np.zeros(行数, 列数)
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフの色をティールに指定する	plt.plot(データ列x, データ列y, color='teal')
リストとリストの散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カラーパレットを全般的に濃くする	sns.set(pallete='deep')
option: ペールグリーンにグラフの色を変更する	color = 'palegreen'
データフレームの指定したカラムの中にと文字列があるか判定する	df['列A'].isin([value, value2])
データフレームのある列をリストにする	df['列A'].values.tolist()
option: ▼マーカーを描画する	marker = 'v'
データシリーズがどれだけ、分散しているか確認する	ds.var()
整数nの二進表記	bin(n)
データフレームのあるカラムのNaNをモードで置換する	df['列A'].fillna(df['列A'].mode().iloc[0])
リストとリストについて散布図を描いて、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
文字の文字コードを使う	ord(ch)
散布図の▽マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
カウンタをイテラブルとして更新する	aCounter.update(iterable)
値を両端キューのn番目に差し込む	deq.insert(n, element)
option: グラフの色をブラウンに設定する	color = 'brown'
データフレームの一部の列を千の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
文字列を小文字にする	s.casefold()
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
ふたつの関係が上位集合もしくは等しいか確認する	aSet > aSet2
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
Excelファイルから複数のシートをロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: ライムグリーン色を用いる	color = 'limegreen'
xが真かどうか調べる	bool(x)
棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
実行環境の再帰の最大回数	sys.getrecursionlimit()
UNIX秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
3つ並べて数列を柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
黒いポイントマーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
指定した列の値で集計し各分散を求める	df.groupby('列A').var()
散布図の印を三角印にする	plt.scatter(データ列x, データ列y, marker='^')
配列の散布を可視化する	plt.scatter(データ列x, データ列y)
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームを二つの列によって集約する	df.groupby(['列A', '列B'])
リストと配列の散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフに△印を使う	plt.plot(データ列x, データ列y, marker='^')
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
辞書を浅く複製する	dict(aDict)
文字列を部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
本日の日付を使う	datetime.date.today()
Excelファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
サポートベクトル分類器を準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
配列の形状を求める	aArray.shape
文字列の末尾は部分文字列か調べる	s.endswith(sub)
option: ダークターコイズを使用する	color = 'darkturquoise'
グラフで使うカラーパレットを指定する	sns.set(pallete=パレット名)
要素が集合に含まれるか判定する	element in aSet
コンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
あるカラムの欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
option: オーキッドにグラフの色を設定する	color = 'orchid'
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
option: マーカーを上三角に変更する	marker = '^'
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: どの行もヘッダに設定しない	header = None
データフレームの選択したカラムの欠損値をメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
小数点数のハイパボリック・タンジェントを計算する	math.tanh(x)
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
option: グラフのラインスタイルを破線に設定する	linestyle = 'dashed'
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
データフレームの列の標本分散を求める	df['列A'].var(ddof=0)
option: ゴールドにグラフの色を設定する	color = 'gold'
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
データ列を日付データに変換する	pd.to_datetime(ds)
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
横軸を対数に変更する	plt.xscale('log')
カテゴリ列で色分けしてデータフレームをにバイオリン図で描く	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ある列の値がxに等しく、かつ別のカラムの値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームの指定した列の値をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
データフレームの選択したカラムがどれだけ、正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
プロットの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
1行から２つの浮動小数数値を読む	A, B = map(float, input().split())
リストの末尾に要素を加える	aList.append(element)
リストの推移を一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
あるカラムの値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームの選択したカラムの中に文字列と文字列がある	df[['列A', '列B']].isin([value, value2])
実行時に標準出力がパイプ	not sys.stdout.isatty()
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: NaNを先頭に来るようにする	na_position = 'first'
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図の星印の線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: スラグレー色を用いる	color = 'slategrey'
リストが空	len(aList) == 0
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
option: ペルーを使う	color = 'peru'
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
ピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
画面用にグラフを設定する	sns.set(context='notebook')
日付データが日曜日かテストする	aDate.weekday() == 6
文字列を文字のリストにする	list(s)
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
グラフのデザインをデフォルトでいい感じに指定する	sns.set()
整数nを2進数リテラルにする	bin(n)
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
文字列をアンダーライン付きで出力する	print(f'\033[4m{value}\033[0m')
列名を指定して2つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
ヒストグラムと勾配ブースティングとして回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームを並べて、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
option: 行を連番に設定する	index_col = None
option: 色をスプリンググリーンに変更する	color = 'springgreen'
二つ並べて度数分布図を描画する	plt.hist([データ列, データ列], color=['b', 'r'])
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ファイルパスからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
既存のファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
黒いバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: 印を左三角に変える	marker = '<'
データフレームをグループ化し、ある列に対し最小値を計算する	df.groupby('列A')['列B'].min()
文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
要素がセットに含まれないか	element not in aSet
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
リストとリストの散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
実数のハイパボリック・サイン	math.sinh(x)
option: 濃いシアンを使う	color = 'darkcyan'
option: グラフの色を珊瑚に設定する	color = 'coral'
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v')
リストとリストの散布図を描いて、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
ある列の値によってデータフレームをグループ化する	df.groupby('列A')
棒グラフをライム色を用いて描画する	plt.bar(データ列x, データ列y, color='lime')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
今日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
データフレームの選択した列の空文字を未入力値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
疑似乱数平均値と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの選択したカラムの文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データシリーズの欠損値をその最小値で補う	ds.fillna(ds.min())
リストを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
文字列内にひとつでも空白がある	any(c.isspace() for c in s)
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
あるカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
option: マーカーをダイアモンドに変える	marker = 'D'
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
ゼロ埋めされた3２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ファイルパスをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
０で全要素を初期化した3二ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
大文字と小文字を逆にする	s.swapcase()
データフレームを並べ直して、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
既存の配列を元に全要素が0の行列	np.zeros_like(aArray)
文字列に漢字が含まれるか	re.search('[\u4E00-\u9FD0]', s)
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
連番の配列の作成する	np.arange(開始値, 終了値, 等差)
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
ヒストグラムをライトグリーン色を使って描画する	plt.hist(データ列, color='lightgreen')
キーが辞書にないとき要素を追加する	aDict.setdefault(key, element)
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
数列とリストについての散布図に文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データフレームの選択したカラムの欠損値を直後の値に変更する	df[['列A', '列B']].fillna(method='bfill')
インデックスとしてCSVファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
nからn2までの整数列を作る	list(range(n, n2+1))
データフレームの指定した列の第三四分位数	df['列A'].quantile(0.75)
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
平均値付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
要素が両端キューの中に含まれてるかテストする	element in deq
空白で文字列を区切って文字列リストにする	s.split()
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
バイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
数式の微分を計算する	sympy.diff(e)
平均値と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームのデータ型のリスト	df.dtypes
スレートブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
目盛り線	plt.grid(linestyle='--')
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームの選択したカラムはどの程度正規分布から尖っているか見る	df[['列A', '列B']].skew()
実数で実数を割る	x / y
ブルーバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
日付時刻データが日付時刻データより後ろかどうか調べる	aDatetime > aDatetime2
指定したカラムの欠損値を平均値に指定する	df['列A'].fillna(df['列A'].mean())
リストの要素を並べ直す	sorted(aList)
option: フォントの色をネイビーに設定する	color = 'navy'
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データフレームのあるカラムのNaNをxに変更する	df['列A'].fillna(x)
ファイルパスの区切り記号	os.sep
実数のn乗して浮動小数点数による余り	pow(x, n, y)
option: 文字列の示すエンコーディングを用いる	encoding = s
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
文字列の末尾から部分文字列を除去する	s.removesuffix(sub)
option: フォントの色をアクアに設定する	color = 'aqua'
数列と配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームのNaNを中央値で埋める	df.fillna(df.median())
辞書の項目名とその値をペアとして取り出す	aDict.items()
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
直前の値でデータシリーズのNaNを埋める	ds.fillna(method='ffill')
整数nのバイト長を見る	(n.bit_length() + 7) // 8
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
分割数nとしてデータフレームの中のカラムをビニングする	pd.cut(df[col], n)
option: 紺にグラフの色を設定する	color = 'darkblue'
黒いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
オレンジレッドにヒストグラムの色を変更する	plt.hist(データ列, color='orangered')
option: やわらかい青にグラフの色を指定する	color = 'cornflowerblue'
ダークブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
コロンで区切って2つのリストをプリントする	print(value, value2, sep=':')
option: グラフの種類を一点鎖線にする	linestyle = 'dashbot'
option: マーカーを▽に変更する	marker = 'v'
データフレームを列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
折れ線グラフをシャルトリューズ色を使って描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: マーカーの色をティールにする	markerfacecolor = 'teal'
組をリストに変換する	list(aTuple)
データフレームの選択したカラムの相関行列を求める	df[['列A', '列B']].corr()
オプションで標準エラーを出力にする	file = sys.stderr
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムをクリムゾン色を用いて描画する	plt.hist(データ列, color='crimson')
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
列を日付データに変換する	pd.to_datetime(df['列A'])
時間を使用する	import time
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
部分文字列で文字列を区切り、文字列リストにする	s.split(sub)
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
あるカラムの平均を算出する	df['列A'].mean()
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
カラムのエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフの色をトマトにセットする	plt.plot(データ列x, データ列y, color='tomato')
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか確認する	df['列A'].kurt()
二つの集合がセットと交わりを持たないか確認する	aSet.isdisjoint(aSet2)
暗い赤色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
数値をマゼンタ化する	f'\033[35m{value}\033[0m'
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
カウンタから最頻出なキーの件数	aCounter.most_common()[1]
ふたつの集合の差集合を使う	aSet.difference(aSet2)
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
文字列を区切り記号で分割して文字列リストに変換する	s.split(sep)
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
ダークブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
散布図の上三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: 色をタンに設定する	color = 'tan'
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
日付時刻データからn時間を引く	aDatetime - datetime.timedelta(hours=n)
散布図の菱形印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
紺碧色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
文字列の中のASCII限定としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
ブラック色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
数式の簡単化を行う	sympy.sympify(e)
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
配列の標準誤差	scipy.stats.sem(配列)
二つの集合の対称差	aSet.symmetric_difference(aSet2)
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
リストをマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
option: ダークグレーを使う	color = 'darkgrey'
表データをある列を用いて昇順に並べ直し、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
文字列を小文字に変換する	s.lower()
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 色をコーンズシルクにセットする	color = 'cornsilk'
rgbのポイントマーカーを配列とイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データシリーズの曜日が何日目か知る	ds.dt.dayofweek
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
タプルのオブジェクトが最初に見つかる場所	aTuple.index(element)
数値の部分分数化する	sympy.apart(e)
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
タプルのキー一覧	list(aDict)
リストを四分位数でビン分割する	pd.qcut(aList, 4)
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフのダイアモンド印の大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
option: 色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
CSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
縦棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
折れ線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
列名を指定して２つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
データフレームの一部の列の欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
茶色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
数列とデータ列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
赤い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
表データの相関行列をケンドール相関係数を用いて求める	df.corr(method='kendall')
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
レベッカパープルにヒストグラムの色を指定する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
データシリーズの値をreplに正規表現patternで一度に置き換える	ds.replace(pattern, repl, regex=True)
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
縦棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
nが5の倍数か確認する	n % 5 == 0
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
環境がMacOSか調べる	sys.platform.startswith('darwin')
値を下線付きにする	f'\033[4m{value}\033[0m'
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
実数のn乗を求める	pow(x, n)
ヒストグラムを真紅色を使って描画する	plt.hist(データ列, color='crimson')
折れ線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
タプルを浅く複製する	dict(aDict)
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
option: グラフの色をミディアムシアグリーンにする	color = 'mediumseagreen'
文字列に漢字があるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列が全て空白文字からなるか確認する	s.isspace()
rgbの三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
双方向キューの最後に列の各要素を追加する	deq.extend(iterable)
辞書の全をクリアする	aDict.clear()
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
辞書にキーが存在しないとき、要素を追加する	aDict.setdefault(key, element)
タプルの最初	aTuple[0]
データフレームの指定した列の欠損値を直後の値で補完する	df['列A'].fillna(method='bfill')
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
一度にreplにデータフレームの選択したカラムの値を正規表現patternで置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
現在の作業ディレクトリを使う	os.getcwd()
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: フォントの色をライトブルーに変更する	color = 'lightblue'
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
nが偶数か確認する	n % 2 == 0
積率相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
データフレームがどの程度、正規分布から尖っているか確認する	df.skew()
配列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
今日が何年か知る	datetime.datetime.today().year
関数のカテゴリによってデータフレームをグループ化する	df.groupby(関数)
今日の曜日を整数で使う	datetime.datetime.today().weekday()
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
コーンズシルク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
データフレームの選択したカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
モジュールを検索するパスにを追加する	sys.path.append(dir)
データフレームの欠損値を直前の値で置換する	df.fillna(method='ffill')
十六進数字を全部求める	string.hexdigits
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
実数の余弦の逆数を計算する	math.acos(x)
グラフの色を指定する	sns.set(pallete=パレット名)
多次元データをSVDとして淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
行列の行ごとの合計	np.sum(aArray, axis=1)
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
アイボリー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームのあるカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
日付データが日付データより後ろかどうか調べる	aDate > aDate2
データフレームの一部の列の母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
コサイン	math.cos(x)
配列を四分位数ごとにビニングする	pd.qcut(aArray, 4)
ローングリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
集合の全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
整数nの二進表現を使う	bin(n)
散布図をドジャーブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
配列の各要素の積	np.multiply(aArray, aArray2)
赤い実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ダーク・スラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
グラフのインチを変更する	plt.figure(figsize=(横幅, 高さ))
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
文字列を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
２つのデータフレームを結合する	pd.merge(df, df2)
列を文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
option: フォントの色を貝殻に変更する	color = 'seashell'
整数を実数で割った余り	x % y
stringをインポートする	import string
option: フォントの色をピンクに設定する	color = 'pink'
折れ線グラフでデータ列の移り変わりを描画する	plt.plot(range(len(データ列)), データ列)
リストとリストの散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
整数nがセットのどれか	n in aSet
xが1、もしくは2、もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
データシリーズの中のNaNの合計を数える	ds.isna().sum()
マッピングのキー一覧	list(aDict)
ファイルを一行ずつ読む	f.readline()
グラフの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
ベクトルの要素ごとに加算する	aArray + aArray2
横棒グラフを耐火レンガ色を使って描画する	plt.barh(データ列x, データ列y, color='firebrick')
カウンタのユニークなキーをリストとして得る	list(aCounter)
文字列は数値か調べる	s.isnumeric()
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
predicateFuncが真とならないタプルの要素	itertools.dropwhile(predicateFunc, iterable)
整数を複素数に変換する	complex(x)
データフレームの行列を入れ替える	df.T
最後の部分文字列で文字列を二分し、最初の文字列を使う	s.rpartition(sub)[0]
データフレームの一部の列の分散	df[['列A', '列B']].var()
option: グラフの色をライムグリーンにセットする	color = 'limegreen'
実数の逆正弦を求める	math.asin(x)
浮動小数点数を小数点以下で四捨五入する	round(x, n)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
データシリーズは正規分布からどの程度尖っているか見る	ds.skew()
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームのあるカラムを千の位で丸める	df['列A'].round(-3)
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームから列を3つだけ選択する	df[['列A', '列B', '列C']]
option: フォントの色をハニーデューに設定する	color = 'honeydew'
複数のデータフレームを縦向きに結合する	pd.concat([df, df2, df3], axis=1)
キューの長さを制限する	collections.deque(maxlen=n)
折れ線グラフの色をダークゴールデンロッドにする	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データが木曜日か	aDatetime.weekday() == 3
要素は集合のメンバー	element in aSet
ふたつのマッピングを結合する	aDict | aDict2
データフレームからカテゴリデータの列のみ取り出す	df.select_dtypes('object')
イエローグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
縦棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
散布図を赤いバツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図に黒い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をミディアムターコイズにセットする	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列を改行によって分割する	s.splitlines()
ふたつの列を組み合わせてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
耐火レンガ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: スチールブルーを使用する	color = 'steelblue'
辞書のコピーを作成する	aDict.copy()
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの色をミディアムバイオレットレッドにする	plt.hist(データ列, color='mediumvioletred')
データフレームを指定した列によってまとめたグループ	df.groupby('列A')
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
option: シアン色を用いる	color = 'cyan'
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: ライトイエローにグラフの色を指定する	color = 'lightyellow'
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
実数を実数に加える	x + y
既存のファイルをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
オプションで、出力先を標準出力に指定する	file = sys.stdout
データフレームの指定したカラムを十の位で丸めて整数型にする	df['列A'].round(-1).astype(int)
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
配列を出現回数して、カウンタを更新する	aCounter.update(iterable)
nが奇数	n % 2 == 1
文字列中にひとつでも非小文字があるか	any(not c.islower() for c in s)
ヒストグラムの色をダークオリーブグリーンにセットする	plt.hist(データ列, color='darkolivegreen')
option: グラフの色をペルーに指定する	color = 'peru'
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
赤い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
無限数列	itertools.count()
シルバー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
文字コードに対応する文字を使う	chr(unicode)
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ファイルパスからストリームを開いて]、fileとする	file = open(filepath)
データシリーズの中に存在するの数を数える	ds.isin([value]).sum()
書き込み用に文字コードtextを用いてファイルをオープンする]	open(filepath, mode='w', encoding=text)
ふたつの列でグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
データフレームの選択した列の中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
option: ライトグリーンを使う	color = 'lightgreen'
nとn2の積を計算する	n * n2
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
option: 淡いピンク色を用いる	color = 'lightpink'
データ列間のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
カラム名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
プログラムのファイルの名前を知る	sys.argv[0]
リストの合計を計算する	sum(aList)
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
小数点数を切り下げて整数に変換する	math.floor(x)
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
option: フォントの色をインディゴに指定する	color = 'indigo'
option: ダークサーモン色を用いる	color = 'darksalmon'
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
リストのn番目に文字列を差し込む	aList.insert(n, element)
データフレームの選択した列のNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
option: インディアンレッドにグラフの色を設定する	color = 'indianred'
リストとリストについて散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのあるカラムは何日か知る	df['列A'].dt.day
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
nのバイト長	(n.bit_length() + 7) // 8
データフレームのカラムを四捨五入する	df['列A'].round()
予測値とデータの離れ具合を見る	sns.residplot(x='列名', y='列名', data=df)
データフレームとデータシリーズをくっつける	pd.concat([df, ds], axis=1)
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
リストと配列について散布図を描画し、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
リストとリストについて散布図を描画し、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
真スーパーセットか調べる	aSet > aSet2
タイムスタンプデータにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの左三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
タプルを昇順に並べ直す	sorted(aTuple, reverse=False)
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
現在が火曜日か確認する	datetime.datetime.today().weekday() == 1
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
珊瑚色でヒストグラムを描画する	plt.hist(データ列, color='coral')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: 印の線幅を変更する	markeredgewidth = 2.5
option: ライトシアン色を用いる	color = 'lightcyan'
やわらかい青色を使ってヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームのある列の値がxより多い行を取り出す	df[df['列A'] > x]
データフレームのふたつの列を削除する	df.drop(['列A', '列B'], axis=1, inplace=True)
データフレームのSkewnessを計算する	df.skew()
データフレームのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
文字列のケースを交換する	s.swapcase()
option: パープルを使う	color = 'purple'
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
option: スレートブルーを用いる	color = 'slateblue'
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
option: フォントの色をパパイヤウィップに変更する	color = 'papayawhip'
行列を一次元化する	aArray.flatten()
現在の分を求める	datetime.date.today().minute
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ある列の値ごとの標準偏差	df.groupby('列A').std()
作画の背景色を暗くする	sns.set(style='darkgrid')
タプルをn回、接続する	aTuple * n
スノー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームを複数の列をキーにして小さい順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
1からNまでの配列を作る	np.arange(1, N+1)
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムを濃いシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
非ASCII文字が文字列中に含まれる	any(not c.isascii() for c in s)
棒グラフの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームの一部の列がどの程度、分散しているか調べる	df[['列A', '列B']].var()
N未満までの配列を作る	np.arange(N)
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
真部分集合かどうか調べる	aSet < aSet2
データラベルの位置を指定する	plt.legend(loc=(x, y))
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの指定した列の不偏標準偏差	df['列A'].std()
option: レベッカパープルを用いる	color = 'rebeccapurple'
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
データフレームの選択したカラムの最頻値を求める	df[['列A', '列B']].mode()
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
グラフで使える色名の一覧を知る	matplotlib.colors.cnames
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: カーキ色を使用する	color = 'khaki'
option: 区切り記号をタブにする	sep = '\t'
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
文字列の両端から空白と改行を除去する	s.strip()
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
値を黄色にする	f'\033[33m{value}\033[0m'
散布図に△マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
2つのデータフレームを縦方向に合体する	pd.concat([df, df2], axis=0)
シャルトリューズにヒストグラムの色を指定する	plt.hist(データ列, color='chartreuse')
日付データが金曜日か	aDate.weekday() == 4
縦向きに複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
データフレームの列のユニークな要素	df[col].unique()
アクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの相関行列を求める	df.corr()
指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
分類モデルの予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: データ型を指定する	dtype = np.int8
箱ヒゲ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
カウンタの要素を列挙する	aCounter.keys()
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
option: ライトグレーを用いる	color = 'lightgrey'
本日が木曜日かどうか確認する	datetime.datetime.today().weekday() == 3
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの中の列を等しい量になるようにn個に分割する	pd.qcut(df[col], n)
タイムスタンプデータの年	aDatetime.year
２つの文字列は同じでないか調べる	s != s2
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
文字列を部分文字列で二分し後半の文字列を見る	s.partition(sub)[-1]
データフレームのあるカラムの中にいくつ欠損値が存在するか調べる	df['列A'].isna().sum()
指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
配列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
２つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
データフレームの選択したカラムの下位25％	df[['列A', '列B']].quantile(0.75)
青い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
指定した列の値で集計し、各個数を求める	df.groupby('列A').count()
option: サドルブラウン色を用いる	color = 'saddlebrown'
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
散布図の▽印の色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
本日の年	datetime.datetime.today().year
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの指定した列の統計量を全部見る	df['列A'].describe()
スクリプトファイルの絶対パスを見る	os.path.abspath(__file__)
２つのデータフレームを異なる列をキーにして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
要素を双方向キューにプッシュする	deq.append(element)
アクアマリン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
長さnのリストを作る	[0] * n
実数が正	x > 0
option: フクシアにフォントの色を設定する	color = 'fuchsia'
ぐるぐるとイテラブルを繰り返す	itertools.cycle(iterable)
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データ列を平方根変換する	np.sqrt(データ列)
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
カウンタ間で共通部分演算する	aCounter & aCounter2
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
nマイナスn2を計算する	n - n2
十六進数文字列を整数に変換する	int(s, 16)
データフレームの列の名前の一覧を求める	df.columns
組の先頭のn要素を除く	aTuple[n:]
組とタプルを結合する	aTuple + aTuple2
リストと数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの選択したカラムの中にいくつ日付データが存在するか数える	df[['列A', '列B']].isin([value]).sum()
イテラブルとリストの散布図を描画して、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルパスからフォルダ名を使う	os.path.dirname(filepath)
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
辞書のキーに対応した値を参照する	aDict.get(key)
昇順に行によってデータフレームをソートする	df.sort_index(ascending=True)
option: 書き込みモードを使用する	mode = 'w'
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
xが1、もしくは2かどうか調べる	x == 1 or x == 2
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
イテラブルを行列に変換する	np.array(iterable)
データフレームを表示するとき、表示される行数を増やす	pd.set_option('display.max_rows', n)
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
二つのオブジェクトは等しいかどうか調べる	obj == obj2
option: シエナ色を用いる	color = 'sienna'
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
KNNを用いてクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフをマルーン色を用いて描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図の菱形印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
文字列を二分割する	s.partition(sep)
nが一桁の数かどうか調べる	-9 <= n <= 9
データフレームの指定したカラムの第一四分位数を計算する	df['列A'].quantile(0.25)
option: ダークバイオレットを使う	color = 'darkviolet'
クラス分類の偽陰性をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
多次元データを特異値分解を用いてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
nが無限に続くイテラブル	itertools.repeat(n)
リストにリストを追加し、拡張する	aList.extend(aList2)
横棒グラフをダークオリーブグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
何か試しに動かす	print('Hello World')
イテラブルをイミュータブルなセットにする	frozenset(iterable)
左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<')
データ列を閾値を使って二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
正規表現に文字列の先頭で大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
大バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
重複ありでランダムに10行をデータフレームからサンプリングする	df.sample(10, replace=True)
option: ミスティローズを使う	color = 'mistyrose'
線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
option: ロイヤルブルーを用いる	color = 'royalblue'
ヒストグラムの色をスカイブルーにセットする	plt.hist(データ列, color='skyblue')
データフレームのカラムの尖りを求める	scipy.stats.kurtosis(df['列A'], bias=False)
横棒グラフをダークオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorchid')
双方向キューの先頭の値	deq[0]
タイタニック号のデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
指定したカラムにおいてどの値が最も出現するか見る	df['列A'].mode()
option: フォントの色をシーグリーンにセットする	color = 'seagreen'
option: モカシン色を使用する	color = 'moccasin'
八進文字列を整数にする	int(s, 8)
ある列の最大値	df.groupby('列A').max()
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
茶色にヒストグラムの色を指定する	plt.hist(データ列, color='brown')
オブジェクトは整数クラスか確認する	isinstance(obj, int)
ライトスチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
データ列と配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
正規分布の確率密度関数を使用する	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームのNaNを直後の値で補う	df.fillna(method='bfill')
散布図の三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
n÷n2を計算する	n / n2
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
データシリーズの月を使う	ds.dt.month
印字可能な文字列	ascii(x)
折り返しをオフに増やす	pd.set_option('expand_frame_repr', False)
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
チョコレート色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データシリーズを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
データフレームのある列を取り除いてみる	df.drop('列A', axis=1)
キューが空でないか調べる	len(deq) != 0
折れ線グラフをホットピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='hotpink')
黄色色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
リストとリストの散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
シーケンスをセットに追加更新する	aSet.update(iterable)
デックの末尾から要素を取り出す	deq.pop()
option: グラフの色をオールドレースに変更する	color = 'oldlace'
データフレームをグループ化し、各個数を求める	df.groupby('列A').count()
線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ファイルパスの絶対パス	os.path.abspath(filepath)
データフレームの指定した列の第一四分位数	df['列A'].quantile(0.25)
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
横棒グラフをライムグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='limegreen')
作画のグリッドを白くする	sns.set(style='whitegrid')
rgbの下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの選択したカラムの値はNaNか調べる	df[['列A', '列B']].isna()
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
散布図を黒い右三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 複素数型を使用する	dtype = bool
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
データ列の移り変わりを折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
rgbの大バツマーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: スチールブルーに色を指定する	color = 'steelblue'
ファイルパスが存在しない	not os.path.exists(filepath)
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
日付データの年を使う	aDate.year
行列の差	aArray - aArray2
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
配列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフのバツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: 右三角マーカーを用いる	marker = '>'
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
option: 読み込みモードを使用する	mode = 'r'
データ列を等量でビン数nを用いてビン分割する	pd.qcut(ds, n)
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
値∉集合	element not in aSet
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
日付時刻データが火曜日か確認する	aDatetime.weekday() == 1
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
セットにイテラブルを追加更新する	aSet.update(iterable)
xでデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
データシリーズの標準偏差を求める	ds.std()
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
辞書順で文字列が文字列より前か調べる	s < s2
データフレームを調べる	df.head()
option: 左三角印を描画する	marker = '<'
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
折れ線グラフに大バツ印を使用する	plt.plot(データ列x, データ列y, marker='X')
色を暗くする	sns.set(pallete='dark')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
散布図に赤い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの列の欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
文字列を最後の部分文字列で二分し、残りの文字列を求める	s.rpartition(sub)[-1]
データフレームの選択したカラムのどの値が頻出か見る	df[['列A', '列B']].mode()
option: やわらかい青色を使う	color = 'cornflowerblue'
線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
option: 左三角印を使用する	marker = '<'
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
散布図に菱形マーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
貝殻色を用いてヒストグラムを描画する	plt.hist(データ列, color='seashell')
折れ線グラフの印をポイント印にする	plt.plot(データ列x, データ列y, marker='.')
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
列の各値の出現回数	ds.value_counts()
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
タプルのn番目のの値を使う	aTuple[n]
線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
数値の出力を改行なしに行う	print(value, end='')
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
クラスのサブ型	issubclass(サブクラス, クラス)
option: 大バツマーカーを使用する	marker = 'X'
option: グラフを点線に設定する	linestyle = 'dotted'
小さい順に組の要素をソートする	sorted(aTuple, reverse=False)
データフレームの欠損値が含まれる部分に	df.style.highlight_null()
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
カウンタをクリアする	aCounter.clear()
ケンドール相関係数を用いてデータフレームの相関行列を求める	df.corr(method='kendall')
データ列とリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
ある列の文字列が部分文字列で終わらないデータを選択する	df[~ df['列A'].str.endswith(部分文字列)]
行列の分散	np.var(aArray)
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
右から部分文字列で文字列を区切る	s.rsplit(sub)
オブジェクトが数値か	isinstance(obj, (int,float))
カウンタを多い順番に列挙する	aCounter.most_common()
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
まとめてValueMapでデータフレームの選択したカラムを置き換える	df[['列A', '列B']].replace(ValueMap)
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
コーンフラワーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
実数を複素数にする	complex(x)
データフレームの選択したカラムの標本分散を計算する	df[['列A', '列B']].var(ddof=0)
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
列の各データが何回出現するか見る	ds.value_counts()
改行で文字列を分割し、文字列リストにする	s.splitlines()
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
実数で実数を除算する	x / y
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
n個にリストをビニングする	pd.cut(aList, n)
部分文字列が文字列中に含まれるか調べる	sub in s
タイタニック号のデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
二つの集合の積集合を求める	aSet.intersection(aSet2)
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームの選択したカラムを千の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
タイムスタンプ型の表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
option: フォントの色をマルーンに設定する	color = 'maroon'
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
指定した列で集計し、平均値を求める	df.groupby('列A').mean()
標準入力を	sys.stdin
データフレームの選択した列の欠損値を最大値に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ヒストグラムの色をバイオレットに変更する	plt.hist(データ列, color='violet')
集合にイテラブルの要素を追加する	aSet.update(iterable)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
あるカラムの文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
リストとリストについての散布図にrgbの菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
上限を指定して、両端キュー	collections.deque(maxlen=n)
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
オリーブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
配列のSkewnessを求める	scipy.stats.skew(配列, bias=False)
本日の曜日を使う	datetime.datetime.today().weekday()
三整数の最大公約数を求める	math.gcd(n, n2, n3)
カラムの歪度を使う	scipy.stats.skew(df['列A'], bias=False)
nが正の数	n > 0
書き出すCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
nがセットのひとつかどうか	n in aSet
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの指定したカラムのNaNをその最小値で埋める	df['列A'].fillna(df['列A'].min())
ある列によってデータフレームをグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
二つの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ミディアムブルーに色を指定する	color = 'mediumblue'
データシリーズの50パーセンタイルを求める	ds.median()
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
option: フォントの色をライトサーモンに指定する	color = 'lightsalmon'
等量でn個に列を分割する	pd.qcut(ds, n)
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
option: 大きい順にする	ascending = False
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
option: データ型として論理値型を使う	dtype = np.int32
option: オールドレースにグラフの色をセットする	color = 'oldlace'
タプルにタプルの項目を加えて、更新する	aDict.update(aDict2)
赤い一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
OSはMacOS	sys.platform.startswith('darwin')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
横方向に2つのデータフレームをつなぐ	pd.concat([df, df2], axis=1)
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ライトイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
改行で区切って２つの変数をプリントする	print(value, value2, sep='\n')
データフレームのカラムを目的変数にする	目的変数 = df['列名']
ファイルを文字列の示すエンコーディングとして追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
データフレームの選択したカラムの分位数を求める	df[['列A', '列B']].quantile(パーセント/100)
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームのn行目より前取り出す	df[:n]
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
シーケンスを計数器に変換する	collections.Counter(iterable)
辞書順で文字列が文字列より後	s > s2
整数nがリストのどれかか	n in aList
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: オレンジレッドを使用する	color = 'orangered'
ロバスト分類モデルを準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
両端キュー中の数値の数を数える	deq.count(element)
そのメディアンでデータフレームのあるカラムの欠損値を埋める	df['列A'].fillna(df['列A'].median())
３二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
双方向キューの最大長	deq.maxlen
要素を双方向キューの右に追加する	deq.append(element)
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列中に非数字が含まれる	any(not c.isdigit() for c in s)
データフレームのカラムの名前をまとめて文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
要素はマッピングの値に含まれていないかどうか調べる	element not in aDict.values()
折れ線グラフの線の種類を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
辞書から最後に追加した項目をポップする	aDict.popitem()
疑似乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
二つのリストの積集合	list(set(aList) & set(aList2))
２つのオブジェクトが同じ参照か	obj is obj2
データフレームの行を条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
カウンタの最頻出の項目	aCounter.most_common()[0]
option: 青色を使用する	color = 'blue'
クラス名が名前付きタプルか	issubclass(C, tuple)
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
重複した行のみを抽出する	df[df.duplicated(keep=False)]
option: ディムグレーを用いる	color = 'dimgray'
指定したカラムの統計量	df['列A'].describe()
行列の内積を使う	np.dot(aArray, aArray2)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
データフレームのあるカラムの中央値を求める	df['列A'].median()
文字列の左側から空白を取り除く	s.lstrip()
option: 色をダークサーモンに指定する	color = 'darksalmon'
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
データフレームの選択したカラムの中にある文字列と文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
オブジェクトが整数クラスのインスタンス	isinstance(obj, int)
多次元データをSVDとして濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
淡い茶色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ベクトルのスカラー倍を求める	aArray * n
線形回帰モデルの切片	model.intercept_
文字列の先頭の空白を取り除く	s.lstrip()
行列の行ごとの平均値を求める	np.mean(aArray, axis=1)
両端キューを使う	import collections
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
主成分分析としてパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
キーがマップに存在するか調べる	key not in aDict
データシリーズの歪度を求める	ds.kurt()
ミディアムオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
折れ線プロットとしてデータフレームの列を可視化する	plt.plot(df[column], df[column])
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
文字列をシンボル化して、パラメータにする	z = sympy.Symbol(s)
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームを複数の列によって小さい順に整列する	df.sort_values(by=['列A', '列B'], ascending=True)
行列の最小	np.min(aArray)
数値を緑色にする	f'\033[32m{value}\033[0m'
option: フォントの色をダークシアグリーンにセットする	color = 'darkseagreen'
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図のクロス印の色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ケンドール順位相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
グラフのy座標を対数目盛に変更する	plt.yscale('log')
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ふたつの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
option: ディープスカイブルーを用いる	color = 'deepskyblue'
データフレームをグループ化しそれぞれの標準偏差を求める	df.groupby('列A').std()
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
データフレームのあるカラムの時を使う	df['列A'].dt.hour
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
nまでの偶整数列を得る	list(range(2, n, 2))
横棒プロットを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
option: 線種を点線にセットする	linestyle = 'dotted'
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: マルーンに色を設定する	color = 'maroon'
3自然数の最大公約数	math.gcd(n, n2, n3)
オブジェクトが辞書クラス	isinstance(obj, dict)
データシリーズの欠損値を平均に設定する	ds.fillna(ds.mean())
キューは空でないか調べる	len(deq) != 0
小数点数以下の最大の整数を求める	math.floor(x)
データフレームの選択した列が正規分布からどの程度尖っているか見る	df[['列A', '列B']].skew()
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 印の大きさを変える	markersize = 2.0
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
データシリーズの中にある文字列の合計を調べる	ds.isin([value]).sum()
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ダークターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
最初のカテゴリーを除外してデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
赤いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
整数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
データフレームの選択した列の第三四分位数	df[['列A', '列B']].quantile(0.75)
リストの末尾のn要素を捨てる	aList[:-n]
日付データにn分分加える	aDate + datetime.timedelta(minutes=n)
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームの選択した列の値がNaNか調べる	df[['列A', '列B']].isna()
ファイルを書き込み用に開いて]、fとする	f = open(filepath, mode='w')
option: グレーを使う	color = 'gray'
データフレームのあるカラムが何年か調べる	df['列A'].dt.year
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列はタプルに含まれる	element in aTuple
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
タプルを小さい順に並べる	sorted(aTuple, reverse=False)
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
色付きの一点鎖線として配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線を点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームをインデックスによって昇順に並べ直す	df.sort_index(ascending=True)
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
日付データは日付データと同時か調べる	aDate == aDate2
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
カンマで文字列を区切って、列挙する	s.split(',')
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの選択したカラムの欠損値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
双方向キューが空か調べる	len(deq) == 0
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
列から行列を初期化する	np.array(iterable)
データフレームの一部の列を丸める	df[['列A', '列B']].round()
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
イテラブルを文字列に変換して、タブによって結合する	'\t'.join(map(str, iterable))
点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
二つの列を用いて破壊的にデータフレームを大きい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
nがn2以下、それか、n3以上か調べる	n <= n2 or n >= n3
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
集合をリストにする	list(aSet)
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームの選択したカラムの中の欠損値の数を数える	df[['列A', '列B']].isna().sum()
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
option: 耐火レンガ色を用いる	color = 'firebrick'
コマンドの第一引数	sys.argv[1]
線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
リストの末尾から値を除く	aList.pop()
データフレームの指定した列の空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
変数がマイナス無限大に近づく際の数値の極限値を算出する	sympy.limit(e, z, -oo)
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
コーラルにヒストグラムの色を指定する	plt.hist(データ列, color='coral')
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 丸マーカーを使用する	marker = 'o'
データフレームとデータシリーズを横方向に合体させる	pd.concat([df, ds], axis=1)
データフレームを四捨五入して、整数型にする	df.round().astype(int)
実数は有限か調べる	math.isfinite(x)
option: フローラルホワイトに色を設定する	color = 'floralwhite'
折れ線グラフの色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの選択した列の相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
n個にリストを等量でビン分割する	pd.qcut(aList, n)
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
コロンで文字列を分割して文字列リストにする	s.split(':')
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
行列の要素ごとの積	np.multiply(aArray, aArray2)
ヒストグラムの色をミディアムパープルにセットする	plt.hist(データ列, color='mediumpurple')
変数について数値の積分を求める	sympy.integrate(e, z)
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
両端キューの中に値が含まれてる	element in deq
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
異なるカラムをキーとして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
文字列中の部分文字列の出現回数を数える	s.count(sub)
折れ線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
データ列をフォーマットとしてタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ある列でデータフレームをまとめたグループ	df.groupby('列A')
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
集合の補集合を求める	aSet.difference(aSet2)
整数nの二進数文字列	bin(n)[2:]
散布図を▽印で描画する	plt.scatter(データ列x, データ列y, marker='v')
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
option: グラフの色をトマトに変更する	color = 'tomato'
八進文字列をバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: 行方向に処理する	axis = 1
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
散布図を黒い右三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
option: グラフを破線に設定する	linestyle = 'dashed'
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
xが一桁の正の整数か調べる	0 <= x <= 9
マッピングの値を列挙する	aDict.values()
最大値・最小値の範囲で一様な疑似乱数を発生させる	random.uniform(最小値, 最大値)
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: 色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
小数点数の仮数	math.frexp(x)[0]
双方向キューのn番目	deq[n]
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの選択した列の欠損値を直後の値にする	df[['列A', '列B']].fillna(method='bfill')
タプルから項目名で指定された項目をポップする	aDict.pop(key)
配列をヒストグラムにする	plt.hist(データ列)
リストとリストを結合する	aList + aList2
散布図をrgbの星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
rgbの三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
ホットピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
ある列の値がx以上のデータを取り出す	df[df['列A'] >= x]
データフレームの値は欠損値か調べる	df.isna()
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
データフレームの複数のカラムを削除し、みる	df.drop(['列A', '列B'], axis=1)
ふたつの列からグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
縦棒プロットを描画して、バーの幅をする	plt.bar(ラベル列, データ列, width=0.5)
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
あるカラムを丸める	df['列A'].round()
データフレームのKurtosis	df.kurt()
カラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
タプルをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
青い一点鎖線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列の行ごとの標準偏差	np.std(aArray, axis=1)
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
xが1もしくは2もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
ディープスカイブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: グラフの色をシルバーに指定する	color = 'silver'
xが一桁の正の数か確認する	0 <= x <= 9
折れ線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
モジュールを検索するパスを列挙する	sys.path
アイボリー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: 読み込みモードに変更する	mode = 'r'
配列と配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
数を文字列に変換する	str(x)
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
ベクトルは何のデータ型か調べる	aArray.dtype()
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
主成分分析を用いて濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
二つの文字列を出力する	print(value, value2)
データフレームの選択したカラムを十の位で丸める	df[['列A', '列B']].round(-1)
回帰分析を確率的勾配降下で行う	model = sklearn.linear_model.SGDRegressor()
データフレームの列間の相関行列を求める	df.corr()
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ペルーにヒストグラムの色を変更する	plt.hist(データ列, color='peru')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
マップからキーの値を参照する	aDict.get(key)
データフレームを散布図で図示し、、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
モデルのバージョン	version = 'wcce2022-0.1'
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
データシリーズを一万の位で丸める	ds.round(-4)
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
ある列のカテゴリの個数	df.groupby('列A').count()
追加できるようにファイルをオープンする]	open(filepath, mode='a')
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
日付データが水曜日かどうか調べる	aDate.weekday() == 2
データフレームの指定したカラムのKurtosis	df['列A'].kurt()
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
n割るn2	n / n2
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ガウス過程としてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのカラムのケンドールの相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
option: ディープスカイブルーを使う	color = 'deepskyblue'
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
nとn2の差を計算する	n - n2
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
オブジェクトがリスト型か	isinstance(obj, list)
データフレームの欠損値を最大値にする	df.fillna(df.max())
ひとつでもアルファベットが文字列内に含まれるかどうか調べる	any(c.isalpha() for c in s)
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
データフレームが正規分布からどれだけ歪んでいるか見る	df.kurt()
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
整数の3乗	x ** 3
箱ひげ図を描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
散布図の下三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
部分文字列が文字列中にある	sub in s
データフレームをグループ化しそれぞれの平均値を求める	df.groupby('列A').mean()
切片なしの線形モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: デピンク色を用いる	color = 'deeppink'
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
タプルからサンプリングする	random.sample(iterable)
データフレームを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
Pandasのバージョンを調べる	print(pd.__version__)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
データフレームの次元数	df.shape
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
文字列を代数計算の変数にする	sympy.Symbol(s)
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
小数点数のsinの逆数	math.asin(x)
nが-9以上、9以下	-9 <= n <= 9
原点から点までの距離を求める	math.hypot(x, y)
配列の調和平均	scipy.stats.hmean(配列)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
赤い四角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データシリーズにおいてどの値が頻出か調べる	ds.mode()
グラフの色を全般的に明るくする	sns.set(pallete='bright')
セットをタプルに変換する	tuple(aSet)
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
カーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
nからn2を減算する	n - n2
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの色を深紅に変更する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをシエナ色を使って描画する	plt.hist(データ列, color='sienna')
オレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
predicateFuncがTrueとならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
データシリーズの未入力値を直前の値に設定する	ds.fillna(method='ffill')
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
日付時刻データの時間を見る	aDatetime.time()
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: 色をローングリーンに設定する	color = 'lawngreen'
nがn2よりも大きいか	n > n2
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
日付時刻データの時間数を求める	aDatetime.hour
縦軸の目盛りの値を変更する	plt.yticks(目盛りの値リスト)
文字列を空白で区切り、列挙する	s.split()
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
データフレームのNaNを数値で埋める	df.fillna(x)
集合からエラーなく要素を除く	aSet.discard(element)
ベクトルの平均値	np.mean(aArray)
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
ファイルを文字列の示す文字コードで書き込み用に開く]	open(filepath, mode='w', encoding=s)
列を出現回数して、カウンタを更新する	aCounter.update(iterable)
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: グラフの色をダークレッドに変更する	color = 'darkred'
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
データフレームの重複した行だけ	df[df.duplicated(keep=False)]
グローバル変数の一覧を求める	globals()
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
散布図に菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
nが5の倍数	n % 5 == 0
重複を認めてデータフレームから10行をランダムにサンプリングする	df.sample(10, replace=True)
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
データフレームの未入力値が含まれる箇所を色つけする	df.style.highlight_null()
無限に文字列が続く列	itertools.repeat(element)
option: ブール型を用いる	dtype = np.int32
ValueMapで全部指定したカラムの値を置き換える	df['列A'].replace(ValueMap)
グリッド線をグラフに加える	plt.grid(True)
新しいロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームを表示するとき小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
配列を中央値でビニングする	pd.qcut(aArray, 2)
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列はタイトル大文字小文字	s.istitle()
プロットを正方形にする	plt.axis('equals')
コードポイントの最大値	sys.maxunicode
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
BOM付きで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
全要素を０で初期化したブール型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
真スーパーセットかどうかテストする	aSet > aSet2
option: フォントの色をライムに設定する	color = 'lime'
組と組を連結する	aTuple + aTuple2
双方向キューの中に要素が存在するか調べる	element in deq
option: 白色を使用する	color = 'white'
指定したカラムのNaNをxで埋める	df['列A'].fillna(x)
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 真紅色を用いる	color = 'crimson'
キューに数値をプッシュする	deq.append(element)
文字列が大文字	s.isupper()
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
オブジェクトのオブジェクト識別子を求める	id(obj)
ゴールド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図を赤いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 文字コードを文字コードtextに設定する	encoding = text
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
option: オリベドラブ色を用いる	color = 'olivedrab'
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データシリーズの中に含まれる文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
現在実行中の例外を情報	sys.exc_info()
option: ダークバイオレット色を用いる	color = 'darkviolet'
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
異なる列をキーにしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
文字列がアルファベットか調べる	s.isalpha()
option: グラフの色をミッドナイトブルーに変更する	color = 'midnightblue'
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
現在処理中の例外を情報を知る	sys.exc_info()
グラフの描画で明るく色を使用する	sns.set(pallete='bright')
nが1もしくは2、もしくは3に等しいかどうか	n == 1 or n == 2 or n == 3
x軸を対数に変更する	plt.xscale('log')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: パレットトルコイズを用いる	color = 'paleturquoise'
ヒストグラムをダークオレンジ色を使って描画する	plt.hist(データ列, color='darkorange')
データフレームの選択した列の値は欠損値か調べる	df[['列A', '列B']].isna()
配列の標準偏差を求める	np.std(aArray)
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
配列の行を選択する	aArray[行番号]
グラフのグリッドを白くする	sns.set(style='whitegrid')
真紅色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームをインデックスを用いてソートする	df.sort_index()
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: シスルを使用する	color = 'thistle'
実数以上の最小の整数を求める	math.ceil(x)
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: グラフの線種を破線に設定する	linestyle = 'dashed'
リストをビン数nでビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームの下100行を選択する	df.tail(100)
床	math.floor(x)
その最頻値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
グラフの中のy軸にラベルを設定する	plt.ylabel('y軸ラベル')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ティール色を使う	color = 'teal'
赤いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームの中にいくつがあるかカウントする	df.isin([value]).sum()
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(df['列A'], 'norm')
option: 真紅にグラフの色を指定する	color = 'crimson'
部分文字列を文字列中から見つける	s.find(sub)
辞書の項目数を得る	len(aDict)
option: 黄色色を用いる	color = 'yellow'
二変数の最大値を計算する	max(x, y)
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームを２つの列を用いて降順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
整数を小数点以下第一位で丸める	round(x, 1)
全ての印字できる文字	string.printable
データフレームの選択した列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
オブジェクトは整数型のインスタンス	isinstance(obj, int)
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
x座標だけグリッド線	plt.grid(axis='x')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
パウダーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームの指定したカラムの欠損値をxに変更する	df['列A'].fillna(x)
ファイルを書き込みモードを用いてオープンする]	open(filepath, mode='w')
データフレームを関数によってまとめた表	df.groupby(関数)
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
濃い青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
数列と配列について散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
データ列とデータ列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
行列のユニークな要素	np.unique(aArray)
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
辞書のエントリ数を得る	len(aDict)
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データラベルを追記する	plt.legend(['凡例A', '凡例B'])
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図を赤いポイントマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x')
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
実数のハイパボリック・コサイン	math.cosh(x)
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データ列とリストの散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
線形回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
カウンタをシーケンスで更新する	aCounter.update(iterable)
文字列がタプルに含まれる	element in aTuple
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: チョコレート色を用いる	color = 'chocolate'
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
リストの中の最大値を求める	max(aList)
リストの要素を昇順に並べる	sorted(aList, reverse=False)
データフレームのn行目以降を抽出する	df[n:]
散布図の▼マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
グラフの目的を画面に設定する	sns.set(context='notebook')
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データシリーズの日を使う	ds.dt.day
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
xの小数点以下'4'桁の文字列に変換する	':.4f'.format(x)
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
タプルを逆さにする	reversed(aTuple)
データフレームの指定したカラムの欠損値を数値で置換する	df['列A'].fillna(x)
ファイル名がTSVファイルかどうか	filename.endswith('.tsv')
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
文字列の左側から空白を除く	s.lstrip(' ')
列名を指定して2つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
n個分左に双方向キューの要素を輪番で回す	deq.rotate(-n)
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
キューの先頭から値を取り除く	deq.popleft()
オブジェクトが論理値クラスかどうか	isinstance(obj, bool)
nがn2よりも小さいかどうか調べる	n < n2
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの選択したカラムの未入力値を平均値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: オリーブ色を用いる	color = 'olive'
y軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
n2がnより大きく、かつ、n3より小さい	n < n2 and n2 < n3
ファイルパスが存在するか調べる	os.path.exists(filepath)
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
リスト中の要素は少なくともひとつ真かどうか調べる	any(aList)
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
散布図を星マーカーで描画する	plt.scatter(データ列x, データ列y, marker='*')
カテゴリでグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
変数を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
ピアソンでデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='pearson')
データフレームをグループ化しある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
二つのデータフレームを横に結合する	pd.concat([df, df2], axis=1)
現在の時刻	datetime.date.today().hour
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
xとyの商と余りを同時に計算する	divmod(x, y)
表データのあるカラムは何分か調べる	df['列A'].dt.minute
配列とデータ列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
nからn2までの整数リスト	list(range(n, n2+1))
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
折れ線グラフをシルバー色を使って描画する	plt.plot(データ列x, データ列y, color='silver')
散布図をrgbの上三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの右三角印を赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
文字列を文字コード列にする	[ord(ch) for ch in s]
折れ線グラフのクロスマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
シーケンスの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
双方向キューの右にイテラブルの各要素を追加する	deq.extend(iterable)
データフレームの指定した列の尖度を求める	df['列A'].skew()
全要素を０で初期化した三２ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
日付データにn秒分加える	aDate + datetime.timedelta(seconds=n)
オブジェクトが数値かどうか	isinstance(obj, (int,float))
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの選択したカラムの中にが存在するか	df[['列A', '列B']].isin([value])
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
ファイルからnバイト、読む	f.read(n)
文字列を下線付き化する	f'\033[4m{value}\033[0m'
行列を横ベクトルに変形する	aArray.reshape(1, -1)
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
オブジェクトはバイト列クラスかどうか	isinstance(obj, bytes)
集合の濃度を求める	len(aSet)
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
指定したカラムの欠損値を直前の値にセットする	df['列A'].fillna(method='ffill')
散布図を赤い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの指定したカラムが正規分布からどれだけ、歪んでいるか見る	df['列A'].kurt()
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームをグループ化し、あるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
データ列と数列について散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: 色をオーキッドに設定する	color = 'orchid'
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
日付データが月曜日	aDate.weekday() == 0
文字列を右寄せする	s.rjust(文字列幅)
日付を表現した文字列をタイムスタンプ型にする	pd.to_datetime(日付を表現した文字列)
ふたつの列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
ゼロ埋めされた３二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの中にが存在するかどうか調べる	df.isin([value])
データフレームをダミー変数に変換する	pd.get_dummies(df)
文字列の中でASCII限定として正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
option: ミディアムブルーを使う	color = 'mediumblue'
option: 色をフクシアに設定する	color = 'fuchsia'
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
点線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dotted')
キューの末尾	deq[-1]
列名を指定して二つのデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
ダークシアンにヒストグラムの色を変更する	plt.hist(データ列, color='darkcyan')
縦棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
辞書に項目名ワード引数で追加する	aDict.update(**kwargs)
表データのあるカラムを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
タプルを展開して表示する	print(*aTuple)
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
ライトシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
最大長nの双方向キューを作る	collections.deque(maxlen=n)
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
行としてカンマ区切りのファイルのn行目を読む	pd.read_csv('file.csv', index_col=n)
あるカラムの標準偏差	df['列A'].std()
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
ブラック色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: サーモン色を用いる	color = 'salmon'
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
横棒グラフをシルバー色を使って描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのカラムのトリム分散を見る	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
イテラブルを文字列に変換して、カンマでつなげる	','.join(map(str, iterable))
option: バリーウッドにフォントの色をする	color = 'burlywood'
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
折れ線グラフに△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストとリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
折れ線グラフのラインスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
rgbの星マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
タン色を使ってヒストグラムを描画する	plt.hist(データ列, color='tan')
目盛線	plt.grid(color='#800080')
整数nを16進文字列にする	hex(n)[2:]
ビン数nで等しい量になるようにリストをビン分割する	pd.qcut(aList, n)
グラフを画面用に指定する	sns.set(context='notebook')
変数名をキーとして、マッピングを作る	dict(name=element)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列の終了位置以前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
xの小数点以下'5'桁の文字列にする	':.5f'.format(x)
ライトスレイグレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データ列の各データ値の出現数を算出する	ds.value_counts()
小文字を全て使う	string.ascii_lowercase
マップのキーとその値を列挙する	aDict.items()
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
数列とリストについて散布図をプロットし、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
今日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
タブ文字	'\t'
マッピングからカウンタを作る	collections.Counter(aDict)
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
実線でヒストグラムを描く	plt.hist(データ列, linestyle='solid')
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をグリーンイエロー色を使って描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームをCSVファイルにBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
要素は集合のメンバーかどうか	element in aSet
カラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
代数計算モジュールを使う	import sympy
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
データフレームの指定したカラムの統計量をまとめて見る	df['列A'].describe()
散布図に三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
表データから列を一つ選択する	df[['列A']]
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
option: グリーンイエローを使う	color = 'greenyellow'
折れ線グラフのアルファ値を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
列名を指定して二つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
複数のシートをデータフレームとしてExcelファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
デフォルトでプロットの見栄えをいい感じに設定する	sns.set()
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
リストとリストの散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オブジェクトがリストの要素でないか	element not in aList
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
option: ライトスレイグレー色を使用する	color = 'lightslategray'
文字列を空白で区切って、列挙する	s.split()
文字列が印字できるかどうか	s.isprintable()
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
色付きの破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: バイナリ用にする	mode = 'rb'
正規表現を事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムの色を暗い赤にセットする	plt.hist(データ列, color='darkred')
実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: 文字列の示すエンコーディングを使用する	encoding = s
今日の日を使う	datetime.datetime.today().day
bとn2から成るペアを得る	(n, n2)
データフレームの指定した列を100の位で丸める	df['列A'].round(-2)
option: ペルーに色を変更する	color = 'peru'
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
文字列の大文字小文字をする	s.casefold()
ヒストグラムの色をターコイズに指定する	plt.hist(データ列, color='turquoise')
データフレームを縦方向に一つにまとめる	pd.concat([df, df2], axis=0)
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
データフレームの選択した列の中に文字列と文字列があるか確認する	df[['列A', '列B']].isin([value, value2])
データフレームの中に存在する文字列の数を調べる	df.isin([value]).sum()
オブジェクトがリストに含まれるか	element in aList
option: グラフの色をバイオレットに設定する	color = 'violet'
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
データシリーズの曜日の名前を求める	ds.dt.weekday_name
option: 改行コードをUNIXに指定する	newline = '\n'
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
折れ線グラフのクロスマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのカラムの値が欠損値かどうか調べる	df['列A'].isna()
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
2つの変数をそれぞれ定義する	x, y = i, j
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
プロットのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
散布図にrgbの▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
赤い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストとイテラブルの散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
双方向キュー	collections.deque()
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
既存のベクトルを元に全要素が初期値のベクトルを作る	np.full_like(aArray, 初期値)
折れ線グラフに下三角印を用いる	plt.plot(データ列x, データ列y, marker='v')
文字列を変数に変換する	sympy.Symbol(s)
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
タプルのの一覧	aDict.values()
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
マゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='magenta')
データフレームの列のNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
要素が辞書の値として含まれている	element in aDict.values()
データフレームをTSVファイルから読み込む	pd.read_csv('file.tsv', sep='\t')
線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
ふたつの集合の和集合を求める	aSet.union(aSet2)
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
タプルの最後のn要素を除く	aTuple[:-n]
黒い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
赤い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
カウンタのktopを列挙する	aCounter.most_common(k)
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
option: 色をオレンジレッドに指定する	color = 'orangered'
シアンで文字列を出力する	print(f'\033[36m{value}\033[0m')
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
データフレームのふたつの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
データシリーズの欠損値を平均で埋める	ds.fillna(ds.mean())
列の長さnの順列	itertools.permutations(iterable, n)
option: ピーチパフを使用する	color = 'peachpuff'
option: カラムの名前をリストで変更する	names = 列名リスト
データフレームを二つの列の値でグループ化し要約統計量を算出する	df.groupby(['列A', '列B']).describe()
集合の浅いコピーを作る	aSet.copy()
線グラフを色付きの一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データシリーズの不偏標準偏差を求める	ds.std()
回帰分析を行う	model = sklearn.linear_model.LinearRegression()
配列と配列の散布図に黒い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームを千の位で四捨五入する	df.round(-3)
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
nがn2以下、もしくは、n3以上	n <= n2 or n >= n3
表データのある列の値がxより小さいデータを抽出する	df[df['列A'] < x]
折れ線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
プロットの描画で淡くカラーパレットを用いる	sns.set(pallete='muted')
データフレームのカラムのピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
データフレームの先頭100行を抽出する	df.head(100)
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
折れ線グラフの色をライトイエローにセットする	plt.plot(データ列x, データ列y, color='lightyellow')
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
オリーブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
双方向キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
多次元データを特異値分解としてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
配列の歪度	scipy.stats.skew(配列, bias=False)
データフレームをソートし、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
option: グラフの色をドジャーブルーにセットする	color = 'dodgerblue'
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
リストと数列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
nまでの奇整数列を作る	list(range(1, n, 2))
ヒストグラムの色をダークカーキにセットする	plt.hist(データ列, color='darkkhaki')
データフレームの選択したカラムの中に存在する日付データの数をカウントする	df[['列A', '列B']].isin([value]).sum()
多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
外れ値に強い線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
option: 色をロージーブラウンに設定する	color = 'rosybrown'
ハッシュ値	hash(x)
二つの列によって小さい順にデータフレームを整列して更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
xの絶対値を算出する	abs(x)
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
縦棒グラフをミスティローズ色を使って描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: ラインを太くする	linewidth = 3.0
プロットのパレットを淡くする	sns.set(pallete='muted')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームの末尾100行を選ぶ	df.tail(100)
日付時刻データの月数を使う	aDatetime.month
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのカラムを10の位で丸める	df['列A'].round(-1)
ゲインズボロ色を用いてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
predicateFuncがTrueとなる列の要素を消す	itertools.dropwhile(predicateFunc, iterable)
チョコレート色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
正方単位行列	np.identity(n)
データフレームの列の名前一覧を求める	df.columns
配列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
青い一点鎖線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
列のユニークな要素	df[col].unique()
ロバスト推定を使ってクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
線グラフの色を淡いピンク色にする	plt.plot(データ列x, データ列y, color='lightpink')
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
リストとリストについて散布図をプロットして、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
タプルをネスト化する	collections.ChainMap(aDict)
グラフで使える色名の一覧を求める	matplotlib.colors.cnames
点線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
数列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
xが1、もしくは2か	x == 1 or x == 2
プラットホームはリナックスかどうか判定する	sys.platform.startswith('linux')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
代数計算を使用する	import sympy
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: プラムにフォントの色を設定する	color = 'plum'
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
nilに等しい識別子	None
連立方程式の解を計算する	sympy.solve([e, e2])
下三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
文字列がタプルの要素か	element in aTuple
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
数のn乗して実数による余り	pow(x, n, y)
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
option: グレーに色を設定する	color = 'gray'
整数nの十六進表記	hex(n)
最大長nのスタックを作成する	collections.deque(maxlen=n)
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
ライトゴールドロディイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
option: ハニーデューを使う	color = 'honeydew'
数列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: シアン色を使用する	color = 'cyan'
ミディアムオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データシリーズの中に存在する日付データと日付データの合計を数える	ds.isin([value, value2]).sum()
データフレームの指定したカラムの欠損値を後の行の値で補う	df['列A'].fillna(method='bfill')
オプションで、標準エラーを出力先にする	file = sys.stderr
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
オブジェクトをデバッグ向けの文字列にする	repr(obj)
実数以上の最小の整数を計算する	math.ceil(x)
文字列を走査し正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
等間隔でリストをn個にビン分割する	pd.cut(aList, n)
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
指定したカラムのカテゴリで集計し、合計を求める	df.groupby('列A').sum()
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
赤い▼マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
逆順のデック	reversed(deq)
nの2進数文字列を使う	bin(n)[2:]
option: 読み込みモードを用いる	mode = 'r'
ローングリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
集合＼セット	aSet.difference(aSet2)
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
散布図を右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>')
カラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームの選択したカラムの中に文字列がある	df[['列A', '列B']].isin([value])
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
正規分布で乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
リストをn個にビン分割する	pd.cut(aList, n)
option: フォントの色をミディアムパープルにする	color = 'mediumpurple'
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategrey'
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データシリーズの中にいくつNaNが存在するか数える	ds.isna().sum()
四分位数ごとにデータフレームの中のカラムをビン分割する	pd.qcut(df[col], 4)
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームのカラムの不偏分散を計算する	df['列A'].var(ddof=1)
値が集合に含まれないかどうか調べる	element not in aSet
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ファイルパスのフォルダ名	os.path.dirname(filepath)
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
列のパーセンタイル	df['列A'].quantile(パーセント/100)
外れ値を除いたカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
リネンにヒストグラムの色を変更する	plt.hist(データ列, color='linen')
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
ロイヤルブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
両端キューが空でない	len(deq) != 0
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
ベクトルが何のデータ型か調べる	aArray.dtype()
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
option: グラフの色をシエナに指定する	color = 'sienna'
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
データフレームの選択した列を百の位で丸めて整数にする	df[['列A', '列B']].round(-2).astype(int)
組のn番目以降の部分を得る	aTuple[n:]
値を白色化する	f'\033[37m{value}\033[0m'
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
リストの文字列が最初に見つかる位置	aList.index(element)
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
プラム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
直後の値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(method='bfill')
集合から別のセットを全て取り除く	aSet.difference_update(aSet2)
集合から値を取り除く	aSet.remove(element)
option: 色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームから指定した二列だけ抽出する	df[['列A', '列B']]
option: フォントの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
kを底とする実数の対数を求める	math.log(x, k)
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
レベッカパープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: プラム色を用いる	color = 'plum'
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
データフレームの指定した列の歪度	df['列A'].kurt()
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
組の要素をソートする	sorted(aTuple)
データフレームの選択したカラムを百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
グラフのx座標を対数目盛に変更する	plt.xscale('log')
実数を浮動小数点数にかける	x * y
nの二乗を求める	n ** 2
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
リストと配列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ダークターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
日付データが日付データよりあとか確認する	aDate > aDate2
折れ線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
カウンタのキーとカウントをリストとして得る	aCounter.items()
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
文字列を走査し、パターンに大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
二つのカウンタのいずれかに含まれるデータ	aCounter | aCounter2
データフレームを各列毎にグループ分けして、文字列というグループの個数を求める	df.groupby(column).size()[s]
3整数の最大公約数を求める	math.gcd(n, n2, n3)
文字列の右端から余分な改行を取り除く	s.rstrip()
折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
今日は何年か知る	datetime.datetime.today().year
列を2回あわせた直積	itertools.product(iterable, repeat=2)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
部分文字列で文字列を二つに分ける	s.partition(sub)
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
データフレームの欠損値を最大値で置き換える	df.fillna(df.max())
整数nの16進表現	hex(n)
シーケンスからサンプリングする	random.sample(iterable)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
数値を簡略にする	sympy.sympify(e)
テキストファイルファイル名が	filename.endswith('.txt')
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
最大値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: マーカーを星に変える	marker = '*'
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
教師データで回帰モデルを学習する	model.fit(説明変数, 目的変数)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
区切りで文字列を分割して、文字列リストに変換する	s.split(sep)
データフレームの一部の列のNaNを最大値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
最小値であるカラムの欠損値を補う	df['列A'].fillna(df['列A'].min())
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
タプル内の要素は全て真か調べる	all(aTuple)
option: ライトイエローに色を設定する	color = 'lightyellow'
データ列を中央値で分割する	pd.qcut(ds, 2)
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
横棒グラフをプロットする	plt.barh(ラベル列, データ列)
数列とイテラブルについての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字をユニコードに変換する	ord(ch)
オブジェクトはリストの要素か	element in aList
十六進文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
データフレームのカラム間の相関を算出する	df.corr()
文字列の中のケースを無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
数値を展開する	sympy.expand(e)
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
空のロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
マップのキーの一覧を得る	aDict.keys()
その平均でデータシリーズの欠損値を補う	ds.fillna(ds.mean())
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームをCSVファイルにSJISで書き出す	df.to_csv('file.csv', encoding='shift_jis')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
表データのあるカラムの年	df['列A'].dt.year
データフレームから10行を重複ありでランダムにサンプリングする	df.sample(10, replace=True)
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
要素が集合に含まれるか確認する	element in aSet
データシリーズはどれだけ、正規分布から歪んでいるか見る	ds.kurt()
八進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
リストから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
JSONを使用する	import json
赤い破線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
等差数列から乱数を得る	random.randrange(start, end, step)
文字列の左側から部分文字列を除去する	s.lstrip(sub)
option: 紺碧を使う	color = 'azure'
日付時刻データからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
カラムの一意な値	df[col].unique()
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
文字列を別の文字列で置き換える	s.replace(sub, newsub)
文字コードtextでファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
文字列を紫色でプリントする	print(f'\033[35m{value}\033[0m')
文字列内に大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
実数の三乗を計算する	x ** 3
イテラブルを関数でフィルタする	filter(func, iterable)
年月日と時刻から日付時刻を生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
青い一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
実数の余弦の逆数を算出する	math.acos(x)
浮動小数点数が整数か調べる	x.is_integer()
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
入力から２つの浮動小数数を読む	A, B = map(float, input().split())
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
出力するCSVファイルの小数点以下の桁数を増やす	df.to_csv('file.csv', float_format='%.3f')
option: オールドレース色を用いる	color = 'oldlace'
データフレームを異なる列をキーにしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
文字列が小文字	s.islower()
option: データ型としてブール型を使う	dtype = np.int32
カラムを全てタイムスタンプに変換する	pd.to_datetime(df['列A'])
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
オプションでファイルに出力する	file = sys.open(filename, 'w')
option: グラフの色を貝殻に指定する	color = 'seashell'
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
両端キューの大きさを求める	len(deq)
二つのカラムからグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
縦棒グラフをシーグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='seagreen')
書式を辞書で文字列整形する	formatText.format_map(aDict)
データシリーズの中にある文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: 赤色を用いる	color = 'red'
マッピングにキーワード引数を用いて更新する	aDict.update(**kwargs)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
イテラブルから双方向キューを作る	collections.deque(iterable)
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
集合の要素数	len(aSet)
データフレームの最初5行	df.head(5)
２つのオブジェクトが等しいかどうか調べる	obj == obj2
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ある列の文字列に部分文字列が含まれないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
スレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
ファイルを開いて]バイナリストリームを見る	open(filepath, mode='rb')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
時計回りに円プロットを描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: 色をコーンズシルクに設定する	color = 'cornsilk'
データシリーズを10の位で四捨五入する	ds.round(-1)
黄緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
箱ひげ図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
データフレームをあるカラムによって整列する	df.sort_values(by='列A')
貝殻色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
横棒グラフをグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='green')
nとn2の和を計算する	n + n2
データフレームのインデックスリスト	df.index
リストの値を逆順にする	aList[::-1]
リストとリストの散布図を描画して、上三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
タプルのキーを列挙する	aDict.keys()
データ列のユニークな値の個数を確認する	ds.nunique()
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
点線で数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのある列を選択する	df['列A']
データフレームのstart行目からend行目までを抽出する	df[start:end]
データフレームの未入力値を平均値で補う	df.fillna(df.mean())
データフレームの一部の列を千の位で丸める	df[['列A', '列B']].round(-3)
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データシリーズの中の欠損値の数を数える	ds.isna().sum()
折れ線グラフをプラム色を使って描画する	plt.plot(データ列x, データ列y, color='plum')
点線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
赤い実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
option: ダークカーキを使う	color = 'darkkhaki'
高頻度な方からカウンタを列挙する	aCounter.most_common()
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
リストのn番目の値を削除する	del aList[n]
numpyを使用する	import numpy as np
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフをコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
初めてのプログラムを書く	print('Hello World')
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
折れ線グラフの▼マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
エクセルファイルからデータフレームを読む	pd.read_excel('file.xlsx')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
オブジェクトがリストに含まれない	element not in aList
データフレームを各列毎にグループ化し、文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフをダークスラテグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をイエローグリーンにセットする	plt.hist(データ列, color='yellowgreen')
浮動小数点数の最小値を求める	sys.float_info.min
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
データフレームから同じデータを破壊的にドロップする	df.drop_duplicates(inplace=True)
表データの重複していない行のみを取り出す	df[~ df.duplicated(keep=False)]
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
散布図の大バツ印の色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
二つのデータフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データフレームがどの程度、分散しているか確認する	df.var()
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
マップのキーの一覧	aDict.keys()
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
データシリーズは何月か知る	ds.dt.month
実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
文字列を空白によって区切り、、整数のリストに変換する	map(int, s.split())
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
1からnまでの整数リスト	list(range(1, n+1))
組の最後を使う	aTuple[-1]
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
二つのカウンタの共通する値	aCounter & aCounter2
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
文字列を部分文字列で二分し後半の文字列を求める	s.partition(sub)[-1]
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
リストとデータ列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 三二ビット整数型を使用する	dtype = np.int16
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データフレームをグループ化し、それぞれの標準偏差を算出する	df.groupby('列A').std()
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
リストとリストの散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
データフレームから数値データだけ抽出する	df.select_dtypes('number')
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
option: レベッカパープル色を使用する	color = 'rebeccapurple'
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
赤い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
平均と分散としてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
BOM付きでCSVファイルにデータフレームを保存する	df.to_csv('file.csv', encoding='utf_8_sig')
数列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの菱形マーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
カウンタをマッピングとして更新する	aCounter.update(aDict)
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
データ列の一意な要素数	ds.nunique()
イテラブルのパーセンタイルを描画する	plt.boxplot(データ列)
データフレームの一部のカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームを指定した列の値によってグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: フォントの色をサンディーブラウンに設定する	color = 'sandybrown'
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
データフレームの指定したカラムを整数に丸める	df['列A'].round()
タプル内の要素は全て真か確認する	all(aTuple)
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
両端キューをdequeue	deq.popleft()
データ列とデータ列の散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
書き込み用にBOM付きでファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの選択した列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームの一部のカラムの中にある文字列と日付データの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
リストからオブジェクトを取り除く	aList.remove(element)
option: ライトスチールブルーを使う	color = 'lightsteelblue'
シーケンスを関数でフィルタする	map(func, iterable)
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームのカラムの歪みを計算する	scipy.stats.skew(df['列A'], bias=False)
シーケンスとしてカウンタを更新する	aCounter.update(iterable)
グラフの目的をスライドに設定する	sns.set(context='talk')
変数がマイナス無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, -oo)
現在の秒数を使う	datetime.date.today().second
データフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
プロットにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
線グラフをグレー色を使って描画する	plt.plot(データ列x, データ列y, color='gray')
シーケンスの集合	set(iterable)
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
ベクトルの累積積を求める	np.cumprod(aArray)
スプリンググリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームの指定したカラムを千の位で四捨五入して整数型にする	df['列A'].round(-3).astype(int)
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
青い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
折れ線グラフの色をホワイトスモークにする	plt.plot(データ列x, データ列y, color='whitesmoke')
option: フォントの色をダークオーキッドにセットする	color = 'darkorchid'
小数点数が有限か調べる	math.isfinite(x)
散布図の印を下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
option: ブランチドアーモンドにフォントの色を変更する	color = 'blanchedalmond'
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
コマンドの第2引数を知る	sys.argv[1]
データフレームの選択したカラムの未入力値をxで補完する	df[['列A', '列B']].fillna(x)
クラス分類をバギングを用いて行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
データフレームのカラムの標本分散	df['列A'].var(ddof=0)
リスト中の最初の文字列を探す	aList.index(element)
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
行列の行を選択する	aArray[行番号]
棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの▽印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
２つのカウンタのいずれかに含まれる要素を計算する	aCounter | aCounter2
散布図に黒い▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの中のカラムを分割数nで等量でビン分割する	pd.qcut(df[col], n)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
データフレームを破壊的に降順にあるカラムによってソートする	df.sort_values(by='列A', ascending=False, inplace=True)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
リストと配列について散布図を描き、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の末尾が部分文字列	s.endswith(sub)
横軸の目盛りを対数に変更する	plt.xscale('log')
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
指定した列のカテゴリで集計し、それぞれの分散を算出する	df.groupby('列A').var()
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの内である列に重複があればドロップする	df.drop_duplicates(subset='列A', inplace=True)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
option: グラフの色を暗い赤にセットする	color = 'darkred'
データフレームの列間の相関係数をまとめて求める	df.corr()
変数について数値の微分を行う	sympy.diff(e, z)
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
淡い茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
nまでの偶整数列を作る	list(range(2, n, 2))
データフレームの選択した列を100の位で四捨五入する	df[['列A', '列B']].round(-2)
データ列のUNIX秒をタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
既存のファイルをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームから指定した二列を抽出する	df[['列A', '列B']]
データフレームの選択したカラムの中央値を求める	df[['列A', '列B']].median()
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
データフレームのカラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
option: 上三角マーカーを使う	marker = '^'
データフレームのヒストグラムを横に並べて描く	sns.displot(df, x='列名', col='カテゴリ名')
グラフのデザインをよくする	import seaborn as sns
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
指定した列の値で集計し、それぞれの標準偏差を計算する	df.groupby('列A').std()
リストとデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
項目名が辞書上で定義されている	key in aDict
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルパスを文字列の示す文字コードを用いて追加できるように開く]	open(filepath, mode='a', encoding=s)
組の要素を並べ変える	sorted(aTuple)
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
文字列が全て数値かどうか調べる	s.isnumeric()
文字列中に部分文字列が含まれる	sub in s
ダークサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
低頻出方からカウンタをリストとして得る	aCounter.most_common()[::-1]
ヒストグラムの色をサーモンにセットする	plt.hist(データ列, color='salmon')
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
データフレームの選択したカラムの未入力値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
シーケンスとイテラブルのデカルト積	itertools.product(iterable, iterable2)
現在の時間数を見る	datetime.date.today().hour
option: オーキッドを使う	color = 'orchid'
Pythonのバージョンを知る	sys.version
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
時刻を使用する	import datetime
オブジェクトは文字列型のインスタンスか確認する	isinstance(obj, str)
横棒プロットを描画し、、バーの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
タプルをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: フォントの色をダークスラテグレーに指定する	color = 'darkslategray'
データフレームの選択した列の中に文字列と文字列がある	df[['列A', '列B']].isin([value, value2])
行列を変形する	aArray.reshape(行数, 列数)
文字列の中で正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s)
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: 色をオリベドラブに設定する	color = 'olivedrab'
第二引数で指定したファイルの名前	sys.argv[1]
線形回帰モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
安全に部分文字列を文字列の接尾辞から除く	s.removesuffix(sub)
多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
辞書に別の辞書のエントリを追加する	aDict.update(aDict2)
セットの浅いコピー	aSet.copy()
option: 耐火レンガ色を使用する	color = 'firebrick'
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: 四角印を描画する	marker = 's'
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategrey')
nをn2だけ減らす	n -= n2
option: フォントの色をラベンダーに設定する	color = 'lavender'
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
タプルに要素を項目名として加える	aDict[key] = element
データフレームをインデックスによって整列する	df.sort_index()
0からnの範囲で	range(n)
線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
正弦の逆数	math.asin(x)
縦棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
スーパーセットもしくは等しいか調べる	aSet > aSet2
プロットの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
option: スキップする列番号をnamesで指定する	skiprows = names
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
データフレームのカラムの欠損値を平均に指定する	df['列A'].fillna(df['列A'].mean())
option: 黄色を使う	color = 'yellow'
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='grey')
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
文字列を改行を用いて区切る	s.splitlines()
データシリーズの記述統計量を調べる	ds.describe()
JSONLファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
緑色で数値をプリントする	print(f'\033[32m{value}\033[0m')
データ列の推移を半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タプルを累加する	itertools.accumulate(iterable)
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
プロットに使うフォントを指定する	sns.set(font=フォント名)
二つのカウンタのいずれかに含まれる値を求める	aCounter | aCounter2
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色をライムに変更する	color = 'lime'
実数に浮動小数点数を掛ける	x * y
折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
黄色で文字列を表示する	print(f'\033[33m{value}\033[0m')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームの一部のカラムの標準偏差を計算する	df[['列A', '列B']].std()
nがn2の倍数でない	n % n2 != 0
クロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
数列の変遷を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
数値をパラメータについて微分する	sympy.diff(e, z)
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
オブジェクトの大きさを知る	sys.getsizeof(obj)
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
行列の累積積	np.cumprod(aArray)
ミディアムスレートブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
option: ゴールドを使う	color = 'gold'
option: 箱ひげ図に平均を追記する	showmeans = False
リストとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムを破線に変更する	plt.hist(データ列, linestyle='dashed')
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
その最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
データフレームの指定した列の値を正規表現でまとめて置き換える	df['列A'].replace(pattern, repl, regex=True)
文字列の接頭辞は部分文字列かどうか調べる	s.startswith(sub)
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
オブジェクトは集合クラスのインスタンスか	isinstance(obj, set)
データフレームのn行目を除き、みる	df.drop(n, axis=0)
散布図をrgbの星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
列名を指定して二つのデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの指定したカラムを万の位で四捨五入する	df['列A'].round(-4)
リストと数列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
ふたつの集合の共通部分	aSet.intersection(aSet2)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
グラフの描画で濃く色を使う	sns.set(pallete='deep')
データフレームのヒストグラムを縦横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
ある列の標本標準偏差を求める	df['列A'].std(ddof=1)
データフレームの選択したカラムを100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
辞書を浅くコピーする	aDict.copy()
円プロットを真円にする	plt.axis('equals')
option: ディムグレーを用いる	color = 'dimgrey'
折れ線グラフの色をオレンジにセットする	plt.plot(データ列x, データ列y, color='orange')
ひとつでも英数字が文字列内に含まれるかどうか	any(c.isalnum() for c in s)
データシリーズの中にいくつ未入力値があるか数える	ds.isna().sum()
nが一桁の数	-9 <= n <= 9
ヒストグラムをタン色を使って描画する	plt.hist(データ列, color='tan')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
数値を黄色にする	f'\033[33m{value}\033[0m'
毎回異なるように乱数を初期化する	random.seed()
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
リストとデータ列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
浮動小数点数の整数部	math.modf(x)[1]
xをブール値に変換する	bool(x)
グラフの描画で明るくパレットを使う	sns.set(pallete='bright')
データフレームの選択した列の中にある日付データと文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
未初期化のベクトル	np.empty(要素数, dtype=np.int)
表データが重複しているかどうか調べる	df.duplicated()
JSONフォーマットの文字列をデータに変換する	json.loads(jsonString)
折れ線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
中央値で配列を分割する	pd.qcut(aArray, 2)
列に列を続ける	itertools.chain(iterable, iterable2)
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
option: 色をスカイブルーに変更する	color = 'skyblue'
8進文字列を整数にする	int(s, 8)
1行から２つの自然数を読む	A, B = map(int, input().split())
線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
積率相関係数でデータフレームの相関行列を計算する	df.corr(method='pearson')
実数に数を掛ける	x * y
中央値でリストをビニングする	pd.qcut(aList, 2)
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
配列の尖度を使う	scipy.stats.kurtosis(配列, bias=False)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: オリベドラブにフォントの色を指定する	color = 'olivedrab'
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
箱髭図としてデータフレームの２つのカラムを並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
配列とリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
配列間のスピアマンの順位相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
ある列の値がxより小さい行を抽出する	df[df['列A'] < x]
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
論文にグラフの用途を変更する	sns.set(context='paper')
アリスブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
文字列が数字	s.isdigit()
実行結果を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
散布図をライトシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
リストをタプルにする	tuple(aList)
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
値を双方向キューから取り除く	deq.remove(element)
option: 読み込み用に設定する	mode = 'r'
文字列が全てアスキー文字	s.isascii()
縦棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
あるカラムの値毎の平均値	df.groupby('列A').mean()
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
オブジェクトが浮動小数点数クラスのインスタンスか調べる	isinstance(obj, float)
整数個からk個取り出したときの順列の総数	math.perm(n, k)
option: グラフの色をグリーンに指定する	color = 'green'
リストと配列についての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
縦棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフとしてリストを可視化する	plt.plot(データ列x, データ列y)
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
ティール色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
辞書からキーの値を得る	aDict.get(key)
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
文字列を部分文字列で分割した時の前半の文字列を使う	s.partition(sub)[0]
キューをデキューする	deq.popleft()
データシリーズの中にいくつNaNが含まれるかカウントする	ds.isna().sum()
回帰分析を部分的最小二乗法でする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
行列の転置行列を見る	aArray.T
文字列に漢字があるか調べる	re.search('[\u4E00-\u9FD0]', s)
データシリーズの欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
データフレームのあるカラムの中に存在する文字列の合計を数える	df['列A'].isin([value]).sum()
等差数列から整数乱数を得る	random.randrange(start, end, step)
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
プロット中のフォントを変更する	sns.set(font=フォント名)
リストから行列を作る	np.array(aList)
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
フォレストグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
２つのデータフレームを連結する	pd.concat([df, df2])
データフレームの選択したカラムの尖度を計算する	df[['列A', '列B']].skew()
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
キーが辞書にあるか確認する	key in aDict
現在が何年か知る	datetime.datetime.today().year
無限の数列を求める	itertools.count()
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ヒストグラムの色をオレンジにする	plt.hist(データ列, color='orange')
ダークゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームの末尾10行を取り出す	df.tail(10)
カテゴリ列でグループ化して、にバイオリン図を用いてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
実数の指数部	math.frexp(x)[1]
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
option: グラフの色をブルーバイオレットに変更する	color = 'blueviolet'
ベストな場所にデータラベルを表示する	plt.legend(loc='best')
文字列の左側からタブを除去する	s.lstrip('\t')
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
行列式を算出する	np.linalg.det(aArray)
文字列中にひとつでも非空白があるか調べる	any(not c.isspace() for c in s)
ファイルからn文字読み込む	f.read(n)
折れ線グラフの星印の色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データシリーズのNaNを直後の値で埋める	ds.fillna(method='bfill')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
無限にnから数え上げるする	itertools.count(start=n)
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームを列にグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
赤い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
列をカウントしてカウンタから引く	aCounter.subtract(iterable)
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
双方向キューの先頭から要素を取り出す	deq.popleft()
青緑色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームの列名を置き換える	df.columns = columns
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図のマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
円周率を使う	math.pi
散布図を珊瑚色として描画する	plt.scatter(データ列x, データ列y, color='coral')
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列の列ごとの標準偏差を見る	np.std(aArray, axis=0)
折れ線グラフの線の種類を点線にセットする	plt.plot(データ列x, データ列y, linestyle='dotted')
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
日付時刻データの時間数を使う	aDatetime.hour
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
タプルのn番目からn2番目の部分を取り出す	aTuple[n:n2]
JSON文字列をデータに変換する	json.loads(jsonString)
列のUNIX秒をタイムスタンプにする	pd.to_datetime(df['列A'], unit='s', utc=True)
n個にデータ列を等間隔でビン分割する	pd.cut(ds, n)
ロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列内に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
指定したカラムの欠損値を平均で埋める	df['列A'].fillna(df['列A'].mean())
青緑色としてヒストグラムを描画する	plt.hist(データ列, color='teal')
平均値でデータシリーズの未入力値を置換する	ds.fillna(ds.mean())
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
指定した列の中央値を求める	df['列A'].median()
option: 貝殻を使う	color = 'seashell'
三つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
オブジェクトの大きさ	sys.getsizeof(obj)
nとn2の論理和を計算する	n | n2
n×n2	n * n2
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
リストの値を昇順に並べる	sorted(aList, reverse=False)
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
最大値と最小値を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
パールゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図を黒い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームから列を2つ選択する	df[['列A', '列B']]
リストをダミー変数にする	pd.get_dummies(リスト)
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
リストとリストの散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
日付データが日曜日	aDate.weekday() == 6
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
日付時刻データの曜日を整数で求める	aDatetime.weekday()
昇順にデータフレームを破壊的に指定した列を用いて整列する	df.sort_values(by='列A', ascending=True, inplace=True)
ペルーにヒストグラムの色を指定する	plt.hist(データ列, color='peru')
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
組を引数として展開して出力する	print(*aTuple, sep=',')
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ユニコードを文字に変換する	chr(unicode)
空のセット	set()
整数に変換する	int(x)
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
タプルからキーの値をエラーなく得る	aDict.get(key, None)
カウンタのユニオンを求める	aCounter | aCounter2
空の線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
ひとつでも空白が文字列内に含まれるか調べる	any(c.isspace() for c in s)
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
二つの最小値	min(x, y)
確率的勾配降下を使ってクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
黒い上三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列のn番目の文字	s[n]
正規分布にしたがって配列の値が発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームをグループ化し、各平均値を求める	df.groupby('列A').mean()
オブジェクトは辞書型か確認する	isinstance(obj, dict)
数のn乗	x ** n
replに一度に正規表現patternでデータフレームの値を変更する	df.replace(pattern, repl, regex=True)
数を百の位で四捨五入する	round(x, -2)
nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフの色をバリーウッドにする	plt.plot(データ列x, データ列y, color='burlywood')
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
散布図を黒い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
文字列を最初の部分文字列で二分し、最初の文字列を求める	s.partition(sub)[0]
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームの指定したカラムのNaNを直前の値に設定する	df['列A'].fillna(method='ffill')
日付時刻データの年数を見る	aDatetime.year
文字列を出力する	print(value)
折れ線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列をn回だけ置換する	s.replace(sub, newsub, n)
option: 貝殻にグラフの色を設定する	color = 'seashell'
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
リストのオブジェクトの位置をエラーなく求める	aList.index(element) if element in aList else -1
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
option: 文字コードをBOM付きに指定する	encoding = 'utf_8_sig'
グラフをスライド用に変更する	sns.set(context='talk')
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
option: データ型を指定する	dtype = np.int32
散布図を真紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
あるカラムの文字列に部分文字列が含まれないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
option: ダイアモンドマーカーを用いる	marker = 'D'
option: ダークグリーンにグラフの色をセットする	color = 'darkgreen'
行列を2次元1行に変形する	aArray.reshape(1, -1)
ファイルをバイナリモードを使ってオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ある列のカテゴリの標準偏差	df.groupby('列A').std()
タイムスタンプデータと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
リストとデータ列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
指定したカラムの値が欠損値か調べる	df['列A'].isna()
文字列中の部分文字列の出現を数える	s.count(sub)
rgbのバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
範囲から配列	np.linspace(最小値, 最大値, 要素数)
配列の列ごとの平均	np.mean(aArray, axis=0)
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
空のヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
文字列の先頭から空白やタブを除く	s.lstrip()
文字列中にひとつでも非アスキー文字がある	any(not c.isascii() for c in s)
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ある列によって昇順にデータフレームをソートする	df.sort_values(by='列A', ascending=True)
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
文字列中の部分文字列の出現	s.count(sub)
グラフを論文に設定する	sns.set(context='paper')
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
行列の行ごとの合計値	np.sum(aArray, axis=1)
ヒストグラムの色をイエローグリーンにする	plt.hist(データ列, color='yellowgreen')
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
数を万の位で四捨五入する	round(x, -4)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
行列のデータ型	aArray.dtype()
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームの選択したカラムを10000の位で丸める	df[['列A', '列B']].round(-4)
option: ミディアムブルーにグラフの色を変更する	color = 'mediumblue'
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ふたつの集合が共通の要素を持たないか	aSet.isdisjoint(aSet2)
エラーなくタプルからキーの値を見る	aDict.get(key, None)
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
シーグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
配列とリストについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
文字コードtextで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
文字列をバイト配列にする	bytearray(s)
タブを使う	'\t'
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
option: バイナリ書き込みモードに指定する	mode = 'wb'
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
△マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列が全てASCII文字	s.isascii()
option: ダークオレンジ色を使用する	color = 'darkorange'
イテラブルを文字列リストに変換して、カンマでつなげる	','.join(map(str, iterable))
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
グリッド線をグラフに入れる	plt.grid(True)
青い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
目盛線	plt.grid(alpha=0.5)
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
リストとイテラブルについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームをグループ化し、それぞれの合計を計算する	df.groupby('列A').sum()
プロットの色を色差別なくする	sns.set(pallete='colorblind')
ケンドール相関係数でデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
正規表現でデータシリーズの値をまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
rgbの大バツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
カラーパレットをパステル調にする	sns.set(pallete='pastel')
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
option: マーカーの線幅を設定する	markeredgewidth = 2.5
リストを赤色化する	f'\033[31m{value}\033[0m'
箱髭図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データフレームをインポートする	import pandas as pd
option: 読み込まないフッタをnに指定する	skipfooter = n
option: 欠損値を先頭に来るようにする	na_position = 'first'
列の各データは何回出現するか確認する	ds.value_counts()
プロットの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
配列の歪度を算出する	scipy.stats.skew(配列, bias=False)
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
現在が火曜日	datetime.datetime.today().weekday() == 1
横棒グラフをイエローグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
実数の双曲線正接の逆数を計算する	math.atanh(x)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
データシリーズの欠損値を平均値に指定する	ds.fillna(ds.mean())
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
2つの文字列が同じか調べる	s == s2
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフのダイアモンド印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
rgbの四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
数列の推移を青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategrey'
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
小数点数のハイパボリック・サイン	math.sinh(x)
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
配列の累積和を使う	np.cumsum(aArray)
ExcelファイルファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
タプルの末尾を捨てる	aTuple[:-1]
整数nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データ列の変遷を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを降順でインデックスでソートする	df.sort_index(ascending=False)
option: 四角印を加える	marker = 's'
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
option: 星マーカーを使用する	marker = '*'
リストとリストについての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームが重なるいるか確認する	df.duplicated()
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgray')
ファイルが存在するかどうか調べる	os.path.exists(filepath)
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
オブジェクトがタプル型か調べる	isinstance(obj, tuple)
データシリーズの中にいくつ文字列が含まれるかカウントする	ds.isin([value]).sum()
列のユニークな値の個数を確認する	df[col].nunique()
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データシリーズは正規分布からどれだけ、尖っているか見る	ds.skew()
オブジェクトをn回続く列	itertools.repeat(element, n)
option: アリスブルーを使う	color = 'aliceblue'
x座標の最大・最小値を変更する	plt.xlim(最小値, 最大値)
度数分布図をプロットして、ビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
option: 更新する	inplace = True
横棒グラフをミディアムブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumblue')
xのハッシュ値を算出する	hash(x)
プロットをスライド用に変更する	sns.set(context='talk')
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
シアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの一部のカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
タブ区切りのファイルから文字コードを指定して読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列の末尾から空白を取り除く	s.rstrip(' ')
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
option: グレーを用いる	color = 'grey'
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
表データのあるカラムが何分か見る	df['列A'].dt.minute
n個に配列をビン分割する	pd.cut(aArray, n)
実数のn乗を算出する	pow(x, n)
項目名が辞書上で未定義かどうか	key not in aDict
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
TSVから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
集合をイミュータブルにする	frozenset(aSet)
回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
行列の全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
集合が空か	len(aSet) == 0
カウンタ同士で交わり演算する	aCounter & aCounter2
オブジェクトが整数クラス	isinstance(obj, int)
ふたつの列でグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
小数点数の双曲線余弦を求める	math.cosh(x)
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
オブジェクトをイテラブルにする	iter(obj)
データシリーズを千の位で四捨五入する	ds.round(-3)
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
ベクトルを転置する	aArray.T
データフレームを二つの列によって降順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
nがn2で割り切れないか判定する	n % n2 != 0
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームのあるカラムを一万の位で丸める	df['列A'].round(-4)
option: ホットピンク色を用いる	color = 'hotpink'
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
アイリスのデータセットをロードする	df = sns.load_dataset('iris')
本日のタイムスタンプ	datetime.datetime.today()
セットをリストに変換する	list(aSet)
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
リストと数列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
option: インデックスを自動的な連番に指定する	index_col = None
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
option: 大バツマーカーを加える	marker = 'X'
オブジェクトがクラス	isinstance(obj, クラス)
線グラフの色をライトスチールブルーにする	plt.plot(データ列x, データ列y, color='lightsteelblue')
辞書でカウンタを更新する	aCounter.update(aDict)
タプルの値を列挙する	aDict.values()
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
option: 色をドジャーブルーに指定する	color = 'dodgerblue'
データフレームの二つのカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
option: 色をマゼンタに設定する	color = 'magenta'
部分文字列が文字列の開始位置以降にあるかどうか調べる	s.find(sub, start) != -1
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
文字列の左側から部分文字列を消す	s.lstrip(sub)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
option: 文字列の示す文字コードを使う	encoding = s
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
ファイルパスをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのあるカラムを丸めて、整数型にする	df['列A'].round().astype(int)
リストの重複を除く	sorted(set(aList), key=aList.index)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
標準入力を用いる	sys.stdin
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームを2つの列でまとめた表	df.groupby(['列A', '列B'])
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
データフレームの一部のカラムが正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
整数nを二進数文字列に変換する	bin(n)[2:]
日付データが土曜日	aDate.weekday() == 5
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
ラインを色付きの点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
イテラブルの移り変わりを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列の右側から改行を除く	s.rstrip('\n')
グラフで使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
そのメディアンでデータシリーズのNaNを埋める	ds.fillna(ds.median())
リストとイテラブルについて散布図をプロットして大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
あるカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
データシリーズの値をまとめてValueMapで置換する	ds.replace(ValueMap)
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
option: 印の大きさを変更する	markersize = 2.0
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
カラムを千の位で丸める	df['列A'].round(-3)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
日付時刻データがタイムスタンプデータより遅い	aDatetime > aDatetime2
横軸の目盛りを非表示にする	plt.xticks([])
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
既存のファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
nがn2よりも大きいかどうか調べる	n > n2
rgbのポイントマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
option: フォントの色を黄色に指定する	color = 'yellow'
エラーなく集合から要素を除く	aSet.discard(element)
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの指定したカラムの未入力値をその50パーセンタイルで埋める	df['列A'].fillna(df['列A'].median())
データフレームの下n行を抽出する	df.tail(n)
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
回帰分析を確率的勾配降下を使ってする	model = sklearn.linear_model.SGDRegressor()
CSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv('file.csv', index_col=n)
両端キューが空であるか調べる	len(deq) == 0
リストとリストについて散布図を描画して、マーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストの推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
リストとイテラブルを連結する	itertools.chain(iterable, iterable2)
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
文字列が空白文字からなるかテストする	s.isspace()
predicateFuncを適用したとき真となるリストの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
option: 改行コードをWindowsに指定する	newline = '\r\n'
環境がLinuxか調べる	sys.platform.startswith('linux')
空白文字を全て使う	string.whitespace
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
配列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
データフレームの列の尖度	df['列A'].skew()
最初のを外したデータフレーム	df[df.columns[1:]]
データフレームのパーセンタイルを算出する	df.quantile(パーセント/100)
option: 色をパパイヤウィップに指定する	color = 'papayawhip'
ふたつの列からグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
ヒストグラムをコーラル色を使って描画する	plt.hist(データ列, color='coral')
データフレームの最初10行を抽出する	df.head(10)
option: オレンジレッド色を用いる	color = 'orangered'
グラフのグリッドを暗くする	sns.set(style='darkgrid')
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
リストを並べる	sorted(aList)
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
大バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
外れ値を除いたカラムの分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: 色をライトグリーンに設定する	color = 'lightgreen'
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
散布図をディープスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
オブジェクトがクラスかどうか確認する	isinstance(obj, クラス)
散布図の▲マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
option: バイナリモードにする	mode = 'rb'
集合をイミュータブルなセットにする	frozenset(aSet)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
配列とリストについて散布図をプロットし、、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストと配列の散布図を描画して、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームとしてエクセルをロードする	pd.read_excel('file.xlsx')
日付と時刻から日付時刻を生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列はリストの要素でないか調べる	element not in aList
赤い四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの選択したカラムはどれだけ分散しているか確認する	df[['列A', '列B']].var()
NaNが存在する行を取り除いてみる	df.dropna()
オブジェクトはタプル	isinstance(obj, tuple)
データフレームの選択したカラムの未入力値をxに設定する	df[['列A', '列B']].fillna(x)
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
両端キューの先頭に値を追加する	deq.appendleft(element)
数値を下線付きで表示する	print(f'\033[4m{value}\033[0m')
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
配列とリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
カテゴリで色分けして、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
データフレームを各列毎に集約して、文字列というグループの個数を求める	df.groupby(column).size()[s]
nが一桁の数かどうか	0 <= n <= 9
ファイルを全部、読む	f.read()
データ列をdatetime64型にする	pd.to_datetime(ds)
データシリーズが何年か調べる	ds.dt.year
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
列とシーケンスを連結する	itertools.chain(iterable, iterable2)
散布図を黒い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='k')
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
両端キューのn番目に要素を途中追加する	deq.insert(n, element)
ベクトルを元にして全要素が0の配列	np.zeros_like(aArray)
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
オブジェクトはリストの要素	element in aList
option: 色をシスルに設定する	color = 'thistle'
三整数のGCDを計算する	math.gcd(n, n2, n3)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
オブジェクトはバイト列クラスかどうかテストする	isinstance(obj, bytes)
kを底とする小数点数の対数を計算する	math.log(x, k)
option: n番目のカラムをインデックスに指定する	index_col = n
option: パールバイオレットレッドにフォントの色を設定する	color = 'palevioletred'
数列とデータ列の散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
配列が正規分布に従うかどうか調べる	scipy.stats.shapiro(配列)
ミディアムターコイズ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
文字列内に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ある列の値がx以上、y未満の行を選ぶ	df[(x <= df['列A']) & (df['列A'] < y)]
シーケンスをカウンタに変換する	collections.Counter(iterable)
あるカラムの値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
option: ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
文字列を水色にする	f'\033[36m{value}\033[0m'
行列の列ごとの最大を求める	np.max(aArray, axis=0)
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
リストをnから番号付けする	enumerate(aList, start=n)
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
文字列リストを連結して一つの文字列にする	''.join(aStringList)
両端キュー中のデータのインデックス	deq.index(element)
リストを太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
タプルを昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
ふたつのマッピングを合体する	aDict | aDict2
option: タブを区切り記号で使用する	sep = '\t'
線形モデルの切片を使う	model.intercept_
ビン数nとしてリストをビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の両端から空白を消す	s.strip()
option: 平均を追記する	showmeans = False
辞書から計数器を新規生成する	collections.Counter(aDict)
ファイルを全て読む	f.read()
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
折れ線グラフをダークバイオレット色を使って描画する	plt.plot(データ列x, データ列y, color='darkviolet')
英字を全部使う	string.ascii_letters
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームのカラムの名前を列挙する	df.columns
折れ線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
散布図を菱形マーカーとして描く	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
日付データが金曜日	aDate.weekday() == 4
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
タプルのn番目のの要素	aTuple[n]
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: マーカーを四角に変える	marker = 's'
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
データ列の折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの指定した列の分散を求める	df['列A'].var()
実数がNaN	math.isnan(x)
指定した列を1000の位で丸めて、整数にする	df['列A'].round(-3).astype(int)
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
実行結果を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
標準出力のバッファを即時表示する	sys.stdout.flush()
マッピングをJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
線形モデルの係数	model.coef_
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')

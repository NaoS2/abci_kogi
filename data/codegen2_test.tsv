リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
プロットに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
データフレームを表示するとき表示される最大列数を変更する	pd.set_option('display.max_columns', n)
三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
データフレームを丸めて、整数にする	df.round().astype(int)
線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
浮動小数点数のn乗	pow(x, n)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
ヒストグラムをアクアマリン色を使って描画する	plt.hist(データ列, color='aquamarine')
2つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データ列の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
option: グリーンにグラフの色を設定する	color = 'green'
データフレームを列名リストによって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
rgbの▽マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
３二ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
配列とリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
データフレームをインデックスを用いてソートする	df.sort_index()
散布図をモカシン色を用いて描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: 色をデピンクに設定する	color = 'deeppink'
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
小さい順にリストをソートする	sorted(aList, reverse=False)
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
枠なしの凡例をグラフの中に入れる	plt.legend(frameon=False)
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
option: グラフの色をスカイブルーにする	color = 'skyblue'
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
リストとリストを結合する	aList + aList2
データフレームを'A'列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
データフレームの欠損値を削除する	df.dropna()
分割数nでデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームを列名リストによってグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
空文字を求める	''
要素を双方向キューの右から取り出す	deq.pop()
折れ線グラフの色をシエナに指定する	plt.plot(データ列x, データ列y, color='sienna')
列を配列に変換する	df[column].values
3つの最大値	max(x, y, z)
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
option: マーカーをクロスに変更する	marker = 'x'
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: ダークシアグリーンを用いる	color = 'darkseagreen'
データ列がどれだけ分散しているか見る	ds.var()
データフレームのそれぞれのグループ毎の最大値を計算する	df.groupby(column).max()
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
まとめてデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
空の辞書を作る	{}
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
正規分布にしたがってデータ列の値が発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
折れ線グラフの▼マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ケンドールとしてデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
箱ひげ図を描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
nの十六進文字列を使う	hex(n)[2:]
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
線グラフをコーンフラワーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
標準出力を	sys.stdout
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ファイルをEUCを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
nをn2で割った余りをnとする	n %= n2
散布図を黒いダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
SVDで多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
半透明の一点鎖線を用いてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: 追加モードに変更する	mode = 'a'
ヒストグラムを小麦色色を用いて描画する	plt.hist(データ列, color='wheat')
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
option: スレートブルー色を用いる	color = 'slateblue'
option: フォントの色をトマトに設定する	color = 'tomato'
縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
集合を空集合にする	aSet.clear()
本日が日曜日	datetime.datetime.today().weekday() == 6
オブジェクトは辞書クラスのインスタンスか調べる	isinstance(obj, dict)
文字列がリストの要素かどうか調べる	element in aList
項目名がタプル上で未定義か調べる	key not in aDict
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
２つ並べてヒストグラムをプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
ベクトルの列ごとの最大値を求める	np.max(aArray, axis=0)
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
グラフで用いるカラーパレットを指定する	sns.set(pallete=パレット名)
文字列をエンコーディングを使ってバイト列に変換する	s.encode(encoding=encoding)
option: カーキを使う	color = 'khaki'
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
空のタプルを作る	()
折れ線グラフを暗い赤色を使って描画する	plt.plot(データ列x, データ列y, color='darkred')
表データの列の種類を調べる	df.info()
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのカラムは何時か見る	df[col].dt.hour
青い破線で配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列を複数並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
リストをy軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
データフレームのリストで指定された列の相関行列ピアソン相関係数として	df[aList].corr(method='pearson')
リストと配列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
option: フォントの色を青に設定する	color = 'blue'
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
グラフのパレットを濃くする	sns.set(pallete='deep')
列の一覧	df.info()
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
文字列がタプルの要素でない	element not in aTuple
文字列が全て数字か	s.isdigit()
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
十六進数字を使う	string.hexdigits
数列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
タプルをn回連結する	aTuple * n
初めてのプログラムを書く	print('Hello World')
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
スピアマンとしてデータフレームの相関行列	df.corr(method='spearman')
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
部分文字列で文字列を二分する	s.partition(sub)
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
イテラブルと数列についての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームを列で集約して、それぞれのグループの最大値を求める	df.groupby(column).max()
ファイルパスからの読み込みストリームを使う	open(filepath)
部分文字列を文字列中から探す	s.find(sub)
数列とイテラブルの散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
イテラブルを文字列に変換して一つにする	''.join(map(str, iterable))
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
コマンドの第２引数を知る	sys.argv[1]
変数がマイナス無限大に近づくとき数式の極限値を計算する	sympy.limit(e, z, -oo)
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
option: インディアンレッドにフォントの色を設定する	color = 'indianred'
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
リストの折れ線グラフを描画し、、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムの色を暗い赤にする	plt.hist(データ列, color='darkred')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
データ列の標準偏差を求める	ds.std()
シードをnで固定する	random.seed(n)
複数の列でデータフレームをソートする	df.sort_values(by=column)
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
円グラフでイテラブルのパーセントを可視化する	plt.pie(データ列, startangle=90)
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
リストを境界値としてリストを分割する	pd.cut(aList, aList)
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
データフレームを'A'列と'B'列を用いて昇順にソートし、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
グラフの描画で明るく色テーマを使用する	sns.set(pallete='bright')
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: グラフの色を珊瑚にセットする	color = 'coral'
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
中央値でリストをビン分割する	pd.qcut(aList, 2)
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
配列と数列の散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
ダークグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkgrey')
option: シエナ色を使用する	color = 'sienna'
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
後の行の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
option: 色をダークオレンジに設定する	color = 'darkorange'
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
符号付き整数の最大値を知る	sys.maxsize
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
スクリプトファイルのパス	os.path.abspath(__file__)
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
スピアマン順位相関係数でデータフレームのリストカラムの相関行列を算出する	df[aList].corr(method='spearman')
列を丸めて整数型にする	ds.round().astype(int)
データフレームの先頭n行を取り出す	df.head(n)
データフレームから指定された４列のみ抽出する	df[[column, column2, column3, column4]]
改行せず二つの変数を表示する	print(value, value2, end='')
散布図を青色を使って描画する	plt.scatter(データ列x, データ列y, color='blue')
ビン数nでリストをビン分割する	pd.cut(aList, n)
データフレームを使用する	import pandas as pd
全要素を０で初期化した整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
黒い菱形印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
クリムゾン色を用いてヒストグラムを描画する	plt.hist(データ列, color='crimson')
範囲からベクトル	np.linspace(最小値, 最大値, 要素数)
散布図の星印の色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図の△マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列の度数分布図を描画する	plt.hist(データ列)
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
列によってデータフレームを並べる	df.sort_values(by=column)
range関数の無限バージョン	itertools.count(start=n, step=step)
データフレームの列の各値は何回出現するか調べる	df[col].value_counts()
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
最大値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].max())
ドジャーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
テンプレートを引数としてargsをフォーマットする	formatText.format(*args)
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームのグループごとの最小値	df.groupby(column).min()
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
文字列を区切りを用いて区切る	s.split(sub)
文字列の無限な列	itertools.repeat(element)
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: マーカーを△に変更する	marker = '^'
データフレームを'A'列によって昇順に並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの中の未入力値がある行を落とす	df.dropna()
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
option: マゼンタ色を用いる	color = 'magenta'
リストとリストについて散布図を描画して、文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
シーグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
実数の逆正接を計算する	math.atan(x)
option: フォントの色をオリベドラブにセットする	color = 'olivedrab'
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか数える	s.count(sub, start, end)
ファイルを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列中にひとつでも非空白があるかどうか調べる	any(not c.isspace() for c in s)
整数個からk個取り出した時の順列の総数	math.perm(n, k)
option: パパイヤウィップ色を使用する	color = 'papayawhip'
追加できるようにファイルを開く]	open(filepath, mode='a')
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
数値を太文字にする	f'\033[1m{value}\033[0m'
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
白色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
整数の階乗	math.factorial(n)
グラフの色テーマを指定する	sns.set(pallete=パレット名)
データフレームを表示するとき表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
集合をイミュータブルな集合に変換する	frozenset(aSet)
プロットの使途を画面に設定する	sns.set(context='notebook')
キュー中の値の数を数える	deq.count(element)
散布図でデータフレームの全カラムをグラフ化する	sns.pairplot(df)
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
0から始まる無限のイテラブル	itertools.count()
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
データフレームの列がxのデータを抽出する	df[df[column] == x]
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
グラフの見栄えをいい感じに設定する	sns.set()
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
組の最後のn要素を捨てる	aTuple[:-n]
ひとつでも非アルファベットが文字列中に含まれるか	any(not c.isalpha() for c in s)
散布図を赤い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムをティール色として描画する	plt.hist(データ列, color='teal')
option: 複素数型を使用する	dtype = bool
色名をからコードに変換する	matplotlib.colors.cnames[色名]
リストの合計値を求める	sum(aList)
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
カラムの中にいくつ文字列があるか求める	ds.isin([value]).sum()
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
option: グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
データフレームのカラムの中の欠損値の合計を求める	df[col].isna().sum()
データフレームの列の文字列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
列のそれぞれを関数でフィルタする	filter(func, iterable)
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
入力から2つの整数を読み込む	A, B = map(int, input().split())
データフレームの行名をまとめて、nameからname2に変更する	df.rename(index={name: name2})
横棒グラフを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
新しいロッソ回帰モデルを準備する	model = sklearn.linear_model.Rosso(alpha=正則化項)
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
イテラブルを使ってカウンタを更新する	aCounter.update(iterable)
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
タプル内の要素が全て真	all(aTuple)
組内の要素が全て真か調べる	all(aTuple)
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
リストの中の最大値を求める	max(aList)
配列を一次元化する	aArray.flatten()
リストとリストについて散布図を描き、、マーカーを下三角に変更する	plt.plot(データ列x, データ列y, marker='v')
実数の2進対数	math.log2(x)
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ロイヤルブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームからn行ランダムサンプリングする	df.sample(n)
追加できるようにファイルパスを文字コードtextで開く]	open(filepath, mode='a', encoding=text)
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
nが一桁の整数か	-9 <= n <= 9
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
nが-9以上9以下か調べる	-9 <= n <= 9
ライトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームから最初のカラムを除く	df[df.columns[1:]]
リストの最後の要素	aList[-1]
行列の値を使う	aArray[行番号, 列番号]
データフレームのリストカラムの値をValueMapで一度に置き換える	df[aList].replace(ValueMap)
数値を赤色で表示する	print(f'\033[31m{value}\033[0m')
データフレームをグループ化し、それぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
安全に文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
数列を度数分布図にする	plt.hist(データ列)
回帰分析をPLSで行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
文字列全体をパターンに複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムの色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームの列を行に変更する	df.set_index(column)
プログラムの実行をここで終了する	sys.exit()
実行結果をシアンにする	f'\033[36m{value}\033[0m'
イテラブルから重複なく、n個選ぶ	random.sample(iterable, k=n)
リストの末尾のn要素を除く	aList[:-n]
計算機イプシロンを算出する	sys.float_info.epsilon
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
表データを転置する	df.T
option: グラフの色を暗い赤に指定する	color = 'darkred'
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
円プロットの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
レモンシフォン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図を三角マーカーを使い、描画する	plt.scatter(データ列x, データ列y, marker='^')
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
数列と配列について散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームを列でグループ化し、各グループの平均値を算出する	df.groupby(column).mean()
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ホットピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データフレームから破壊的に重複した行を落とす	df.drop_duplicates(inplace=True)
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
イテラブルを文字列リストに変換して'改行で連結する	'\n'.join(map(str, iterable))
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
option: ホットピンクを用いる	color = 'hotpink'
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
エクセルデータファイルを読む	pd.read_excel(filename)
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
'A'列によってデータフレームを昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
タプルの要素数	len(aTuple)
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
小数点数の逆双曲線正接	math.atanh(x)
文字列を空白によって区切って整数リストに変換する	map(int, s.split())
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
浮動小数点数を千の位で丸める	round(x, -3)
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
回帰分析をK最近傍法として行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
リストの最後を取り除く	aList[:-1]
浮動小数点数を千の位で四捨五入する	round(x, -3)
データフレームを各列とカラムの組み合わせ毎に集計して、最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフを色付きの一点鎖線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
文字列を最後の部分文字列で分けた時の後半の文字列を取り出す	s.rpartition(sub)[-1]
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
ダークグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
配列とデータ列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
パパイヤウィップ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
大文字・小文字を無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
'A'列によって昇順にデータフレームをソートする	df.sort_values(by='A', ascending=True)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
浮動小数点数を２乗する	x ** 2
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t')
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
箱ひげ図をプロットし、、平均値を追加する	plt.boxplot(データ列, showmeans=True)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
辞書から項目名で指定されたエントリを取り出す	aDict.pop(key)
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
MSDとして多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
直後の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='bfill')
データフレームの欠損値を直前の値で置換する	df.fillna(method='ffill')
大文字と小文字を交換する	s.swapcase()
データフレームの列の値をValueMapでまとめて置換する	df[col].replace(ValueMap)
ファイルを書き込みモードを用いて開く]	open(filepath, mode='w')
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
二つの集合の対称差集合を算出する	aSet.symmetric_difference(aSet2)
行列の各要素に加算する	aArray + aArray2
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームから指定された列の名前一覧の列を抽出する	df[columns]
配列間の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
nがn2よりも小さいかどうか調べる	n < n2
リスト内の要素が全て真かどうか調べる	all(aList)
珊瑚色でヒストグラムを描画する	plt.hist(データ列, color='coral')
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
縦棒グラフをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームの行を振り直す	df.reset_index()
カラムの欠損値を最小値にセットする	ds.fillna(ds.min())
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
プロットの横軸を対数に変更する	plt.xscale('log')
クラスが名前付きタプルかどうか	issubclass(C, tuple)
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
データ列を四分位数ごとにビニングする	pd.qcut(ds, 4)
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
乱数生成系列をnで固定する	random.seed(n)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
グラフのデザインを綺麗にする	import seaborn as sns
x軸の目盛りを対数に変更する	plt.xscale('log')
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
イテラブルをセットに変換する	set(iterable)
要素ひとつのりストを作る	[element]
八進文字列を整数にする	int(s, 8)
線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
オブジェクトは辞書クラスかどうか	isinstance(obj, dict)
イテラブルを横棒プロットにする	plt.barh(ラベル列, データ列)
列がどの程度、分散しているか見る	ds.var()
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
縦棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームをCSV形式でJSONLファイルに書き込む	df.to_csv(filename)
線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
カンマで文字列を区切って、文字列リストにする	s.split(',')
データフレームのリスト列の中にいくつ欠損値があるか数える	df[aList].isna().sum()
線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
プロットの横軸に軸名を付ける	plt.xlabel('x軸ラベル')
データフレームをにバイオリン図を使って図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
option: データ型を指定する	dtype = bool
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームのインデックスを振り直す	df.reset_index()
列を中央値で分割する	pd.qcut(ds, 2)
データフレームの列を正規表現で一度に置き換える	df[col].replace(pattern, repl, regex=True)
文字列を白色化する	f'\033[37m{value}\033[0m'
データフレームを各列毎に集約して列の標準偏差を求める	df.groupby(column)[column2].std()
表データを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: マーカーを左三角に変える	marker = '<'
リストのn番目以降の要素を取り出す	aList[n:]
データフレームのリスト列の標準偏差	df[aList].std()
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<')
点線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
プロットを論文用に設定する	sns.set(context='paper')
数列とリストについての散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
文字列をパディングする	s.zfill(文字列幅)
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
キューの右側を見る	deq[-1]
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
色付きの点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: オレンジレッドを使う	color = 'orangered'
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
リストとリストについての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
リストと配列についての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
数式を数値にする	float(e)
第二引数で指定されたファイル名	sys.argv[1]
列の各値は何回出現するか見る	df[col].value_counts()
n2がnより大きく、かつ、n3より小さい	n < n2 and n2 < n3
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
イエローグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='yellowgreen')
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
JSON形式のファイルを読み込んでdataとする	data = json.load(fin)
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
区間から行列	np.linspace(最小値, 最大値, 要素数)
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
リストとイテラブルについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
空集合を見る	set()
タイムスタンプデータは日付時刻データと同時	aDatetime == aDatetime2
ふたつの集合が共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
グラフの色を指定する	sns.set(pallete=パレット名)
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
リストとリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
ヒストグラムをダークマゼンタ色を用いて描画する	plt.hist(データ列, color='darkmagenta')
データフレームのカラムを折れ線プロットで可視化する	plt.plot(df[column], df[column])
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
日付データが土曜日かどうか調べる	aDate.weekday() == 5
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
散布図の大バツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ヒストグラムをグリーンイエロー色を使って描画する	plt.hist(データ列, color='greenyellow')
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
option: ダイアモンド印を使う	marker = 'D'
option: ラベンダーを使用する	color = 'lavender'
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
option: クリムゾン色を使用する	color = 'crimson'
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
組の末尾のn要素を取り除く	aTuple[:-n]
ベクトルの逆行列	np.linalg.inv(aArray)
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
データ列とリストについて散布図を描いてダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
配列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
データフレームの列が正規表現文字列にマッチしないデータを取り出す	df[not df[column].str.match(s)]
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
タイムスタンプデータにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
文字列を部分文字列によって二分する	s.partition(sub)
横棒プロットを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
マップにキーワード引数として加えて、更新する	aDict.update(**kwargs)
丸マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
グラフのパレットを明るくする	sns.set(pallete='bright')
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
配列を等量でn個に分割する	pd.qcut(aArray, n)
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
列によってデータフレームをグループ化し、、それぞれのグループごとの分散を算出する	df.groupby(column).var()
浮動小数点数を浮動小数点数で割る	x / y
文字列からformatのパターンを用いてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ゲインズボロ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
データ列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
縦棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
フクシア色を使ってヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
コーンフラワーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cornflowerblue')
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
二つのオブジェクトは等しいか調べる	obj == obj2
option: グラフの種類を実線に指定する	linestyle = 'solid'
実数が正の数	x > 0
カーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
プログラムの実行を強制的に止める	sys.exit()
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
データフレームを'A'列によって昇順に並べる	df.sort_values(by='A', ascending=True)
リストを縦軸リストをx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
２つの実行結果をコロンで区切ってプリントする	print(value, value2, sep=':')
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
文字列が全て大文字	s.isupper()
option: 貝殻を使う	color = 'seashell'
ケンドール相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
文字列の最後の文字	s[-1]
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
リストの平均値を算出する	sum(aList)/len(aList)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
平均値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
文字列中にひとつでも非空白があるか調べる	any(not c.isspace() for c in s)
データフレームを各列毎に集約して列の最小値を求める	df.groupby(column)[column2].min()
option: データ型として８ビット整数型を用いる	dtype = np.int8
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
option: グレーを使う	color = 'grey'
線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
データフレームの内の未入力値がある行を落とす	df.dropna()
データフレームの列が文字列で終わるデータを選択する	df[df[column].str.endswith(s)]
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
ビスク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
ヒストグラムの色をミスティローズにする	plt.hist(データ列, color='mistyrose')
Pandasで、データフレームのcollをdatetime64型にする	pd.to_datetime(df[col])
文字列リストを結合し、一つの文字列にする	''.join(map(str, iterable))
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
option: 印を左三角に変更する	marker = '<'
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを列の値でグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
カラムの各値は何回出現するか見る	df[col].value_counts()
配列をビン数nで等量でビンニングする	pd.qcut(aArray, n)
平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームのNaNをxに変更する	df.fillna(x)
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
小文字を大文字にする	s.upper()
入力ストリームから1文字、読み込む	f.read(1)
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
カウンタをマッピングで更新する	aCounter.update(aDict)
データフレームの75パーセンタイル	df.quantile(0.75)
折れ線グラフを半透明の一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
データフレームのリストカラムが正規分布からどれだけ尖っているか見る	df[aList].skew()
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
棒グラフをバリーウッド色を使って描画する	plt.bar(データ列x, データ列y, color='burlywood')
空白が文字列内にあるかどうか調べる	any(c.isspace() for c in s)
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
項目名が辞書に存在するかどうか調べる	key in aDict
双方向キューをポップする	deq.pop()
文字列中に部分文字列があるかどうかテストする	sub in s
データフレームの末尾を見る	df.tail()
線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームのn行目を消して、更新する	df.drop(n, axis=0, inplace=True)
データフレームのカラムの未入力値を最大値に増やす	df[col].fillna(df[col].max())
浮動小数点数を十六進文字列に変換する	x.hex()
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
▽印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
右三角印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムをパールゴールデンロッド色を使って描画する	plt.hist(データ列, color='palegoldenrod')
リストをnから順番付けする	enumerate(aList, start=n)
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
タプルと組を連結する	aTuple + aTuple2
オブジェクトはリストに含まれるか確認する	element in aList
空のヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
データフレームのリスト列の未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
文字列を積極的に小文字にする	s.casefold()
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームを各列毎にグループ化し、、列の分散を計算する	df.groupby(column)[column2].var()
option: 改行コードをUNIXにセットする	newline = '\n'
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
スーパーセット	aSet.issuperset(aSet2)
行列の標準偏差を調べる	np.std(aArray)
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
縦棒グラフを描画してバーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
オブジェクトがタプルの要素か調べる	element in aTuple
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
nが1、もしくは2かどうか調べる	n == 1 or n == 2
列名リストを用いてデータフレームを並べ、更新する	df.sort_values(by=column, inplace=True)
データフレームを列名リストによってまとめた表	df.groupby(columns)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
ゴールド色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
列のコンビネーションを得る	itertools.combinations(iterable, n)
option: シスルを使用する	color = 'thistle'
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
option: グラフの色をミディアムパープルに指定する	color = 'mediumpurple'
クラス分類の偽陽性をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
JSON形式のファイル入力を読み込んでdataとする	data = json.load(fin)
ダークゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフの菱形マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
漢字が文字列に含まれる	re.search('[\u4E00-\u9FD0]', s)
option: フォントの色をライトコーラルにセットする	color = 'lightcoral'
option: ゴールド色を使用する	color = 'gold'
配列をベースに全要素が0の配列	np.zeros_like(aArray)
データフレームの中の列を分割する	pd.cut(df[col], aList)
プロットの凡例を表示する	plt.legend()
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
データフレームの値を正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
文字列が部分文字列で終了するか調べる	s.endswith(sub)
ホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データ列の推移を赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ファイルにxを文字列にして書き込む	f.write(str(x))
option: 印の線幅を変更する	markeredgewidth = 2.5
エクセルデータファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
option: フォントの色をダーク・スラテグレーにセットする	color = 'darkslategrey'
英字の大文字を全て使う	string.ascii_uppercase
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
小数点数のcos	math.cos(x)
ミディアムターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
nがn2より大きい	n > n2
オブジェクトの参照カウントを求める	sys.getrefcount(obj)
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
option: ライトスレイグレーにグラフの色をセットする	color = 'lightslategray'
データフレームを'A'列と'B'列によってソートし、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
グラフのy座標を対数に変更する	plt.yscale('log')
配列とリストについて散布図を描き、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの列の値がxより大きい行を取り出す	df[df[column] > x]
グラフの縦横の比率を等しくする	plt.axis('equals')
データフレームのカラムと列の相関行列	df[[column, column2]].corr()
データフレームのNaNを直後の値で埋める	df.fillna(method='bfill')
列でデータフレームをグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
半透明の一点鎖線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフの色を紺にセットする	plt.plot(データ列x, データ列y, color='darkblue')
リストと配列について散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをパールバイオレットレッド色を用いて描画する	plt.hist(データ列, color='palevioletred')
option: フォントの色をパープルに指定する	color = 'purple'
PandasでUNIX秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームを列ごとにグループ分けして、個数を算出する	df.groupby(column).count()
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
昇順にデータフレームを列で整列して更新する	df.sort_values(by=column, ascending=True, inplace=True)
タイムスタンプデータの年数を使う	aDatetime.year
実数の余弦を求める	math.cos(x)
文字列をdatetime64型にする	pd.to_datetime(s)
option: アリスブルーを使う	color = 'aliceblue'
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームを２つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
option: 読むシートの名前をnamesに設定する	sheet_name = names
赤い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
テキストファイルファイル名がか調べる	filename.endswith('.txt')
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
Pandasで、フォーマットとして文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
散布図でデータフレームを可視化して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
整数nを八進数文字列に変換する	oct(n)[2:]
２つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
正弦	math.sin(x)
折れ線グラフの星マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: フォントの色をペールグリーンにセットする	color = 'palegreen'
option: グラフの色をシエナに指定する	color = 'sienna'
option: エラーがあるとき例外を発生させるように変更する	errors = 'strict'
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
オプションで標準エラーを出力にする	file = sys.stderr
オブジェクトのハッシュ値を求める	hash(obj)
ゼロ埋めした整数型の行列	np.zeros(要素数, dtype=np.int)
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
縦棒グラフをプロットして、左寄せする	plt.bar(ラベル列, データ列, align='edge')
イテラブルをカウントしてカウンタを更新する	aCounter.update(iterable)
タイムスタンプデータの月数	aDatetime.month
散布図を赤いバツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
実数の正接の逆数を求める	math.atan(x)
折れ線グラフのダイアモンドマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
リストからオブジェクトと等しい最初の要素を除く	aList.remove(element)
データ列の各値の出現回数	ds.value_counts()
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
コロンで区切って２つの数値をプリントする	print(value, value2, sep=':')
option: ピーチパフ色を使用する	color = 'peachpuff'
ヒストグラムを点線としてプロットする	plt.hist(データ列, linestyle='dotted')
データフレームの欠損値を直後の値にする	df.fillna(method='bfill')
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
列でデータフレームをグループ化して、各グループごとの標準偏差を求める	df.groupby(column).std()
グラフを描画する	import matplotlib.pyplot as plt
データフレームを各列毎にグループ化して列の個数を計算する	df.groupby(column)[column2].count()
縦棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
セットが空か調べる	len(aSet) == 0
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
データフレームのn行目より後ろ抽出する	df[n:]
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
データ列の秒を使う	ds.dt.second
データフレームを列によってグループ化してグループごとの分散を求める	df.groupby(column).var()
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームをTSVとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
nがn2の倍数	n % n2 == 0
浮動小数点数をn乗する	x ** n
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
オブジェクトにプロパティが存在するかテストする	hasattr(obj, プロパティ名)
上限から下限の範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
ヒストグラムの色をバリーウッドにする	plt.hist(データ列, color='burlywood')
折れ線グラフをオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='orchid')
リストとリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
xが-9以上9以下か調べる	-9 <= x <= 9
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
色付きの一点鎖線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
セットの浅いコピー	aSet.copy()
半透明の実線としてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
データフレームのリストカラムのpercent分位数を求める	df[aList].quantile(percent/100)
散布図をダークオリーブグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
Pandasで書式で文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
点線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: グリーンイエローにグラフの色を変更する	color = 'greenyellow'
文字列のプレフィックスから部分文字列を除去する	s.removeprefix(sub)
ライトゴールドロディイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
半透明の破線として数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タプルの最初のn要素を除く	aTuple[n:]
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
パープル色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
二つのデータフレームを列'A'と列'B'をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
無限に数え上げるする	itertools.count()
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
今日の月数	datetime.datetime.today().month
option: ライトグリーン色を用いる	color = 'lightseagreen'
文字を文字コードにする	ord(ch)
option: フォントの色をプラムに変更する	color = 'plum'
nをn2だけ増やす	n += n2
option: グラフの色をペルーに変更する	color = 'peru'
左に両端キューの値をn個分回転させる	deq.rotate(-n)
列によってデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
カウンタをマッピングから作る	collections.Counter(aDict)
大文字を小文字に変換する	s.lower()
3変数の最小値	min(x, y, z)
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
グリッド線をグラフから消す	plt.grid(False)
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データ列の値が正規分布にしたがって発生する累積確率を算出する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
データフレームのカラムをカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
ダーク・スラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図を右三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='>')
データフレームを各列と列の組み合わせ毎に集約して個数を求める	df.groupby([column, column2], as_index=False).count()
データ列の欠損値を直前の値に指定する	ds.fillna(method='ffill')
グラフの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
浮動小数点数を小数点で四捨五入する	round(x, n)
nとn2の論理積を求める	n & n2
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
文字列を最初の部分文字列で分けた場合の前半の文字列	s.partition(sub)[0]
列を配列として取り出す	df[column].values
データ列の欠損値を最大値に指定する	ds.fillna(ds.max())
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: ダイアモンドマーカーを用いる	marker = 'D'
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
option: ポイントマーカーを用いる	marker = '.'
縦棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
文字列中にひとつでも非英数字が含まれるかどうか	any(not c.isalnum() for c in s)
散布図の印を大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: タンにグラフの色を設定する	color = 'tan'
データフレームの列の値がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
ヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
データフレームのリストで指定された列の相関行列ケンドール相関係数として	df[aList].corr(method='kendall')
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
ラインを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
整数最小公倍数を算出する	math.lcm(n, n2)
環境の名前	sys.platform
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
２数の最大値	max(x, y)
option: アイボリーにフォントの色を設定する	color = 'ivory'
日付時刻データは何曜日か知る	aDatetime.weekday()
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
辞書から項目名の値をエラーなく参照する	aDict.get(key, None)
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
複数の列でによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
データ列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
浮動小数点数とyの斜辺	math.hypot(x, y)
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
データ列と数列についての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: バッファリングのサイズを大きくする	buffering = 4096
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
ファイルパスをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
rgbの▲マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
オブジェクトが組に含まれないか調べる	element not in aTuple
FIXME:カテゴリーデータを出現頻度順に整列する	df['A'].value_counts().sort_index().index
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
プログラムを異常止める	sys.exit(1)
タプルを昇順にソートする	sorted(aTuple, reverse=True)
日付データが日付データより後ろか	aDate > aDate2
データフレームを列によってグループ分けして、それぞれのグループ毎の標準偏差を算出する	df.groupby(column).std()
折れ線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ライトシアンにグラフの色を指定する	color = 'lightcyan'
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
option: 貝殻色を使用する	color = 'seashell'
データフレームのリストカラムの中に日付データがあるかどうか	df[aList].isin([value])
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
一点鎖線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列の中のパターンによる全てのマッチを見る	re.findall(pattern, s)
箱ヒゲ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
入力ストリームからn文字、読み込む	f.read(n)
整数nを二進数文字列に変換する	bin(n)[2:]
二つの数列を箱髭図にする	plt.boxplot([データ列, データ列])
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
列の全順列	itertools.permutations(iterable)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: バイナリ用にセットする	mode = 'rb'
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: バイナリモードに指定する	mode = 'rb'
データフレームのリストカラムの歪度を求める	df[aList].kurt()
作画の背景色を暗くする	sns.set(style='darkgrid')
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
aListn番目から要素を取り除く	aList.pop(n)
２つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
ファイルパスのセパレータ記号を使う	os.sep
最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
文字列は全て識別子名か	s.isidentifier()
散布図をミディアムスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ライトスカイブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
複数の列によってで破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='turquoise')
上位集合もしくは等しい	aSet > aSet2
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
赤い左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
option: デピンク色を使用する	color = 'deeppink'
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
日付時刻データの年	aDatetime.year
最大長nの両端キューを列から作成する	collections.deque(iterable, maxlen=n)
ベクトルの差	aArray - aArray2
データ列の曜日の名前を使う	ds.dt.weekday_name
辞書から最後のエントリをポップする	aDict.popitem()
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
項目名がタプルに存在するか調べる	key not in aDict
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: トマトに色を変更する	color = 'tomato'
棒グラフをバイオレット色として描画する	plt.bar(データ列x, データ列y, color='violet')
本日が金曜日か	datetime.datetime.today().weekday() == 4
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
option: フォントの色をカーキに変更する	color = 'khaki'
浮動小数点数の小数点以下を丸める	round(x)
option: カラムの名前を自動的な連番に設定する	header = None
柱状グラフのビン数を指定する	plt.hist(データ列, bins=区関数)
数列とリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
ベクトルの和を求める	aArray + aArray2
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: 区切り記号をタブにする	sep = '\t'
option: グラフの種類を破線に変更する	linestyle = 'dashed'
データフレームを表示するとき、最大行数をnに指定する	pd.set_option('display.max_rows', n)
リストと数列についての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
切り上げて整数にする	math.ceil(x)
option: アイボリーを用いる	color = 'ivory'
ユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
データ列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
nが2で割り切れるかどうか調べる	n % 2 == 0
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
コーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
JSONLファイルにデータフレームを書き込む	df.to_csv(filename)
列を等しい量になるように分割数nでビニングする	pd.qcut(ds, n)
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: 事前に説明変数を正規化する	normalize = True
データフレームの列を度数分布図にする	plt.hist(df[column])
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
折れ線グラフを左三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='<')
タプルにマップの項目を加えて、更新する	aDict.update(aDict2)
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
データ列のNaNを直後の値で置き換える	ds.fillna(method='bfill')
配列とリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
日付時刻データをISO8601書式の文字列にする	aDatetime.isoformat()
イテラブルを変更不能な集合に変換する	frozenset(iterable)
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
数列の四分位を可視化する	plt.boxplot(データ列)
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
双方向キューの左から要素を取り除く	deq.popleft()
option: 分割記号をカンマにする	sep = ','
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
option: 色をスプリンググリーンに設定する	color = 'springgreen'
黒いクロス印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
カウンタのそれぞれの項目をそのカウントだけ列挙する	aCounter.elements()
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
箱ひげ図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
折れ線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
双方向キューを空にする	deq.clear()
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
回帰分析をK最近傍法でする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
プロットのグリッドを白くする	sns.set(style='whitegrid')
文字列を変数に変換する	sympy.Symbol(s)
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
横棒グラフを赤色を使って描画する	plt.barh(データ列x, データ列y, color='red')
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームの未入力値を平均値に減らす	df.fillna(df.mean())
表データのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
Pandasで文字列のUNIX秒からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
option: 書き込み用に設定する	mode = 'w'
タプルに要素をキーとして加える	aDict[key] = element
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
散布図の▼印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ファイルを書き込みモードとしてオープンして]fとする	f = open(filepath, mode='w')
option: カデットブルーにグラフの色を指定する	color = 'cadetblue'
要素が全て1の行列を作成する	np.ones(要素数, dtype=np.int)
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
日付データが水曜日かどうか	aDate.weekday() == 2
配列の合計値を算出する	np.sum(aArray)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
ランダムにn行をデータフレームから抽出する	df.sample(n)
実数を十の位で四捨五入する	round(x, -1)
マップの浅いコピーを作る	aDict.copy()
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
nが一桁の整数か調べる	-9 <= n <= 9
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
データフレームのリスト列を百の位で丸める	df[aList].round(-2)
nが無限に続くリスト	itertools.repeat(n)
パールゴールデンロッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
散布図をバツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='x')
黒い菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
マップから最後の項目を取り出す	aDict.popitem()
クラス分類のPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
文字列の開始位置より後に部分文字列が存在しないか調べる	s.find(sub, start) == -1
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
実数で実数を割って、切り捨てる	x // y
リストと数列の散布図をプロットして、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
集合の補集合を使う	aSet.difference(aSet2)
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
JSONファイルファイル名が	filename.endswith('.json')
集合の更新不能版	frozenset(aSet)
線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列を新しい文字列で置換する	s.replace(sub, newsub)
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
データフレームの列と列を消す	df.drop([column, column2], axis=1)
option: オールドレースを使う	color = 'oldlace'
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
色付きの一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームの列の中に文字列があるか調べる	df[col].isin([value])
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
グリーンにヒストグラムの色を指定する	plt.hist(データ列, color='green')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ダークオリーブグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
セットのイミュータブル版	frozenset(aSet)
カウンタをゼロにする	aCounter.clear()
データフレームを表示するとき最大行数をnに設定する	pd.set_option('display.max_rows', n)
散布図の▼マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: スレートブルーを使う	color = 'slateblue'
グラフのデザインを良くする	import seaborn as sns
option: 暗い赤にグラフの色を設定する	color = 'darkred'
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
黒い左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
n個に配列をビン分割する	pd.cut(aArray, n)
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
列の欠損値を最小値で埋める	ds.fillna(ds.min())
列のユニークな値の個数	ds.nunique()
Pandasで、データフレームのcollのUNIX秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームのカラムの欠損値を最頻値にする	df[col].fillna(df[col].mode().iloc[0])
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
プロットを色差別なくする	sns.set(pallete='colorblind')
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
option: ゴールデンロッドを使う	color = 'goldenrod'
文字列をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを列ごとにグループ化し、それぞれのグループ毎の分散を求める	df.groupby(column).var()
マッピングの浅いコピーを新規生成する	aDict.copy()
ヒストグラムの色をパパイヤウィップにする	plt.hist(データ列, color='papayawhip')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
いつまでもカウントアップする	itertools.count()
データ列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームを列によってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
カラムの中にいくつ文字列が存在するかカウントする	ds.isin([value]).sum()
データフレームを'A'列と'B'列によって小さい順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームは正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
現在の再帰の上限を知る	sys.getrecursionlimit()
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
タイムスタンプデータの時間数を使う	aDatetime.hour
散布図をロイヤルブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='royalblue')
nが2で割り切れるかどうか	n % 2 == 0
日付データが土曜日	aDate.weekday() == 5
データ列は何月か確認する	ds.dt.month
折れ線グラフに△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
組をミュータブルにする	list(aTuple)
配列とリストについての散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
n個にデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
赤い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを用いる	import pandas as pd
nの八進数文字列を使う	oct(n)[2:]
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
日付時刻データは日付時刻データより早いかどうか調べる	aDatetime < aDatetime2
option: ホワイトスモークにグラフの色を指定する	color = 'whitesmoke'
JSONLファイルにBOM付きでデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームを'A'列によって昇順に整列する	df.sort_values(by='A', ascending=True)
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
行列の転置行列を調べる	aArray.T
分類モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
nがn2未満、それかn3以上か調べる	n < n2 or n >= n3
option: バイナリ書き込みモードを使用する	mode = 'wb'
列の第三四分位数	ds.quantile(0.75)
線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
表データの重複した行だけを取り出す	df[df.duplicated(keep=False)]
重複をインプレイスで表データから消す	df.drop_duplicates(inplace=True)
要素がセットに含まれない	element not in aSet
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
文字列をセパレータで分割する	s.split(sub)
ピアソン積率相関係数でデータフレームの相関行列	df.corr(method='pearson')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ヒストグラムの色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
option: データ型を指定する	dtype = np.int
イテラブルを文字列リストに変換して空白を使ってつなげる	' '.join(map(str, iterable))
双方向キューのn番目にデータを挿入する	deq.insert(n, element)
データフレームのリストカラムはどの程度、分散しているか見る	df[aList].var()
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
列を小数点以下n桁で四捨五入する	ds.round(n)
横棒グラフを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
nがn2の倍数でない	n % n2 != 0
文字列内に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データ列の欠損値をモードで置換する	ds.fillna(ds.mode().iloc[0])
二つのデータフレームを異なるカラムをキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
イテラブルとイテラブルの散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをリネン色を使って描画する	plt.barh(データ列x, データ列y, color='linen')
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
データ列の中に日付データがあるかどうか	ds.isin([value])
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図に▽印を使う	plt.scatter(データ列x, データ列y, marker='v')
option: 行列のデータ型を指定する	dtype = bool
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
データフレームから重複した行を残さず落とす	df.drop_duplicates(keep=False)
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムのタイムゾーンを東京に変更する	df[col].tz_convert('Asia/Tokyo')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
現在の秒数を使う	datetime.date.today().second
自然数の階乗を算出する	math.factorial(n)
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの欠損値をxで置換する	df.fillna(x)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
指定した値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
データフレームを列によって並べ、、更新する	df.sort_values(by=column, inplace=True)
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームのリストカラムの欠損値をモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
小麦色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームの中の列をn個に分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: フォントの色をチョコレートに設定する	color = 'chocolate'
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームのn行目を取り除く	df.drop(n, axis=0)
option: グラフの色をブルーバイオレットにする	color = 'blueviolet'
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームのカラムを十の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
option: コーンズシルクを使う	color = 'cornsilk'
配列と配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
浮動小数点数以下の最大の整数	math.floor(x)
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ファイル名のセパレータ記号を使う	os.sep
最適な場所に簡単な説明を表示する	plt.legend(loc='best')
数値時刻のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのリストカラムの相関行列をヒートマップを使って描画する	sns.heatmap(df[aList].corr())
辞書順で文字列が文字列より後か確認する	s > s2
データフレームのリストカラムの値を正規表現patternでまとめてreplに変更する	df[aList].replace(pattern, repl, regex=True)
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
データフレームとデータ列をつなぐ	pd.concat([df, ds], axis=1)
データ列の標準偏差	ds.std()
連番のベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
ベクトルの要素ごとに加算する	aArray + aArray2
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データ列を折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
本日のタイムスタンプを見る	datetime.datetime.today()
ゴーストホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
年月日と時刻から日付時刻を新規生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
目盛線をグラフから消す	plt.grid(False)
リストとリストについて散布図をプロットして△マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
両端キューの長さ	len(deq)
CSVファイルファイル名がか調べる	filename.endswith('.csv')
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
1行だけ列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
TSVファイルファイル名がか	filename.endswith('.tsv')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
イテラブルとリストについて散布図を描き、、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
本日の月数を見る	datetime.datetime.today().month
外れ値に強い重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
配列とリストの散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
データフレームを関数の値によってまとめたグループを使う	df.groupby(関数)
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
イテラブルをキューに変換する	collections.deque(iterable)
格子線をグラフから表示しない	plt.grid(False)
白色を使ってヒストグラムを描画する	plt.hist(データ列, color='white')
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
データフレームの欠損値を直後の値に指定する	df.fillna(method='bfill')
データフレームのカラムの名前を列挙する	df.columns
イテラブルとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
辞書から項目名で指定した項目を取り出す	aDict.pop(key)
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
ファイルからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
カウンタのユニークな項目をリストとして得る	list(aCounter)
データフレームの列を柱状図として描画する	plt.hist(df[column])
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
小数点数の双曲線正接の逆数	math.atanh(x)
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
タプルを逆順にする	reversed(aTuple)
プロットの縦軸を対数目盛に変更する	plt.yscale('log')
マッピングのキー一覧	list(aDict)
ファイルを追加モードでオープンして]fとする	f = open(filepath, mode='a')
nが1、もしくは2、もしくは3に等しいかどうか	n == 1 or n == 2 or n == 3
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
列の欠損値をメディアンで埋める	ds.fillna(ds.median())
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
データ列の一意な値の個数を調べる	ds.nunique()
データフレームのリストで指定された列の相関行列	df[aList].corr()
option: タン色を用いる	color = 'tan'
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
数値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームを昇順に'A'列によってソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの列が正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ラインを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
配列を分割数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
組をひとつ置きに取り出す	aTuple[::2]
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
配列の各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列中にひとつでも非英数字があるか確認する	any(not c.isalnum() for c in s)
データフレームのリストカラムの中央値を計算する	df[aList].median()
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
データフレームの列を百の位で丸める	df[col].round(-2)
タブ文字	'\t'
散布図を左三角マーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='<')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
nをn2で割ったモジュロを計算する	n % n2
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
option: フォントの色をミディアムブルーに指定する	color = 'mediumblue'
データフレームを'A'列と'B'列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
双方向キューが空でない	len(deq) != 0
y座標の目盛を表示しない	plt.yticks([])
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
オブジェクトがクラスか確認する	isinstance(obj, クラス)
配列とリストについて散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
リストを引数として展開して出力する	print(*aList)
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームのカラムを十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
文字列を最後から空白で区切る	s.rsplit()
データフレームを二つの列でによって破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
option: エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
キューに値をプッシュする	deq.append(element)
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
データフレームを二つの列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
アリスブルーにヒストグラムの色を指定する	plt.hist(データ列, color='aliceblue')
nからn2を引いてnに代入する	n -= n2
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
実数のハイパボリック・サインの逆数	math.asinh(x)
Pandasで、書式としてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
カテゴリで色分けして、データフレームの全列の相関を見る	sns.pairplot(df, hue='カテゴリ列')
各列毎にデータフレームを集約し、、列の合計を算出する	df.groupby(column)[column2].sum()
データフレームの分散を求める	df.var()
ビン数nで配列を分割する	pd.cut(aArray, n)
option: 改行を区切りで用いる	sep = '\n'
データフレームの列の中に文字列と文字列があるか	df[col].isin([value, value2])
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームを列で並べ直し、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
イテラブルから最大長nの両端キューを生成する	collections.deque(iterable, maxlen=n)
組を引数として展開してプリントする	print(*aTuple, sep=',')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
JSON文字列をデータにする	json.loads(jsonString)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
シスル色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
綺麗なグラフを使う	import seaborn as sns
データフレームの列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
セパレータで文字列を分割して、文字列リストに変換する	s.split(sep)
データ列は何年か見る	ds.dt.year
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームの中にある日付データと文字列の合計をカウントする	df.isin([value, value2]).sum()
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
本日が金曜日	datetime.datetime.today().weekday() == 4
文字列をn回続くイテラブル	itertools.repeat(element, n)
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 青緑にフォントの色を設定する	color = 'teal'
ベクトル間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
現在が日曜日	datetime.datetime.today().weekday() == 6
データフレームのヒストグラムを縦横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
スピアマンとしてデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='spearman')
カウンタの全数を使う	aCounter.total()
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: フクシアにフォントの色を変更する	color = 'fuchsia'
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
真上位集合かどうか調べる	aSet > aSet2
イテラブルと数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
列'A'と列'B'をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
フクシア色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを複数の列によって並べて、更新する	df.sort_values(by=column, inplace=True)
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
オプションで標準出力に出力する	file = sys.stdout
predicateFuncが真となる列の部分を消す	itertools.dropwhile(predicateFunc, iterable)
カラムの中のNaNの合計をカウントする	ds.isna().sum()
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
データ列の折れ線グラフを描き、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
プロットをポスター用に指定する	sns.set(context='poster')
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
現在の作業ディレクトリを見る	os.getcwd()
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: 色をシーグリーンに指定する	color = 'seagreen'
データフレームのn行より前抽出する	df[:n]
オブジェクトが整数か調べる	isinstance(obj, int)
表データの列と列の相関行列ピアソン積率相関係数としてを算出する	df[[column, column2]].corr(method='pearson')
破壊的に'A'列で昇順にデータフレームを整列する	df.sort_values(by='A', ascending=True, inplace=True)
キューの大きさ	len(deq)
データフレームのカラムを散布図でグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
配列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列の左側から部分文字列を探す	s.find(sub)
折れ線グラフを青い実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
マッピングのキーの一覧	aDict.keys()
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ゼロ埋めされたベクトルを作る	np.zeros(要素数)
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
option: パパイヤウィップにグラフの色を変更する	color = 'papayawhip'
文字コードを文字にする	chr(unicode)
タプルの要素を昇順に並べる	sorted(aTuple, reverse=True)
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
データフレームの列の平均値を求める	df[col].mean()
スピアマン順位相関係数を使ってデータフレームのカラムと列の相関行列	df[[column, column2]].corr(method='spearman')
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
リストの最後のn要素を取り除く	aList[:-n]
散布図でデータフレームのカラムを描画してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの列の値を正規表現でまとめて置き換える	df[col].replace(pattern, repl, regex=True)
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
文字列がタプルに含まれないかテストする	element not in aTuple
リストとリストについての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
棒グラフをスラグレー色を使って描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
散布図をバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='violet')
線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
nが一桁の数	-9 <= n <= 9
nがn2	n == n2
三２ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
option: データ型としてブール型を使用する	dtype = np.int32
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
書式を引数としてargsをフォーマットする	formatText.format(*args)
コーンフラワーブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフをダークグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkgreen')
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
列とイテラブルの直積	itertools.product(iterable, iterable2)
文字列が全て小文字	s.islower()
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
JSON形式の文字列を辞書にする	json.loads(jsonString)
配列と配列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
列を出現回数してカウンタから減らす	aCounter.subtract(iterable)
サドルブラウン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
日付時刻データと日付時刻データの時間差を計算する	aDatetime - aDatetime2
二つの変数をカンマで区切って表示する	print(value, value2, sep=',')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
列の分散を求める	ds.var()
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
2進数の文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: ミディアムブルー色を用いる	color = 'mediumblue'
option: マーカーを星に設定する	marker = '*'
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの色を茶色にする	plt.plot(データ列x, データ列y, color='brown')
データフレームを列でソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
option: マーカーの線幅を指定する	markeredgewidth = 2.5
折れ線グラフの三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
日付時刻データがタイムスタンプデータより遅い	aDatetime > aDatetime2
Pandasでフォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
セットに列の要素を追加する	aSet.update(iterable)
散布図に大バツ印を使用する	plt.scatter(データ列x, データ列y, marker='X')
ファイルをBOM付きを使ってオープンする]	open(filepath, encoding='utf_8_sig')
配列の分布を描画する	plt.scatter(データ列x, データ列y)
ファイルがあるか調べる	os.path.exists(filepath)
データフレームをカラムでグループ化して、各グループの件数を知る	df.groupby(column).size()
文字列を二分割する	s.partition(sep)
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データ列が何年か確認する	ds.dt.year
回帰分析をK最近傍法としてする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
データフレームのカラムの欠損値を最大値に変更する	df[col].fillna(df[col].max())
xを浮動小数点数にする	float(x)
キューの先頭にイテラブルのデータを追加する	deq.extendleft(iterable)
実数の双曲線余弦の逆数を算出する	math.acosh(x)
カテゴリ列で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
option: ダークバイオレットを用いる	color = 'darkviolet'
xでデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(x)
散布図をカーキ色を使って描画する	plt.scatter(データ列x, データ列y, color='khaki')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
ラインを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
横棒グラフをチョコレート色を使って描画する	plt.barh(データ列x, データ列y, color='chocolate')
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
ゼロ埋めされた行列を初期化する	np.zeros(行数, 列数)
回帰分析をKNNで行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
シーケンスと列の直積	itertools.product(iterable, iterable2)
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
オールドレース色で線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
部分文字列が文字列の終了位置より前に含まれないか調べる	s.find(sub, 0, end) == -1
データフレームを列の値で集計する	df.groupby(column)
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
少ない順にカウンタをリストとして得る	aCounter.most_common()[::-1]
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: 色をオレンジに設定する	color = 'orange'
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データ列が何分か確認する	ds.dt.minute
マッピングをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
二つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
作画に用いるフォントを指定する	sns.set(font=フォント名)
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
nの各桁の和	sum(map(int, str(n)))
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
データフレームのカラムの中に含まれる文字列の合計を数える	df[col].isin([value]).sum()
グラフをパステル調にする	sns.set(pallete='pastel')
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
浮動小数点数の３乗	x ** 3
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列をカンマを用いて区切って、列挙する	s.split(',')
カラーパレットを暗くする	sns.set(pallete='dark')
両端キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
整数nを二進表記に変換する	bin(n)
柱状図の区間を設定する	plt.hist(データ列, range=(start, end))
三つ並べて度数分布図を描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
シーケンスからn要素サンプリングする	random.sample(iterable, k=n)
集合をイミュータブルにする	frozenset(aSet)
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
ガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
数値の微分を求める	sympy.diff(e)
折れ線グラフのバツ印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: ▲印を加える	marker = '^'
配列と配列についての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
カラムのユニークな要素数を見る	df[col].nunique()
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
日付データが日付データより前か確認する	aDate < aDate2
リストをマゼンタにする	f'\033[35m{value}\033[0m'
二進数文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
セットをタプルに変換する	tuple(aSet)
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
option: グラフの色をグレーにセットする	color = 'grey'
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
イテラブルを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
nがn2で割り切れないか	n % n2 != 0
データフレームのカラムをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
集合が空集合か調べる	len(aSet) == 0
データフレームのカラムの日にち	df[col].dt.day
スーパーセットもしくは等しいかどうか調べる	aSet > aSet2
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
カラムは正規分布からどの程度、尖っているか見る	ds.skew()
サドルブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ファイルパスの絶対パス	os.path.abspath(filepath)
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
リストと配列の散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの欠損値を後の行の値にする	df.fillna(method='bfill')
データフレームの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
分割数nでデータフレームの中のカラムを等量でビン分割する	pd.qcut(df[col], n)
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
カウンタを辞書として更新する	aCounter.update(aDict)
リストとリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
既存の行列を元に全要素が1のベクトル	np.ones_like(aArray)
列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
浮動小数点数の2乗を求める	x ** 2
タプルの最後のn要素を除く	aTuple[:-n]
option: のシートの名前をnamesに設定する	sheet_name = names
ファイルを文字コードtextで書き込みできるように開く]	open(filepath, mode='w', encoding=text)
ファイル名がCSVファイルかテストする	filename.endswith('.csv')
データフレームのリスト列の尖度	df[aList].skew()
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
両端キューの中に値が含まれてる	element in deq
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='gray')
実数の逆正弦を算出する	math.asin(x)
赤い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
Pandasのバージョンを調べる	print(pd.__version__)
ふたつの関係が真部分集合	aSet < aSet2
白色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
青い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
青い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのカラムが何時か確認する	df[col].dt.hour
タプルを展開して出力する	print(*aTuple)
クリムゾン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
浮動小数点数のk進対数	math.log(x, k)
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
シーケンスとリストをペアのリストにする	itertools.zip_longest(iterable, iterable2)
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
シーグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
赤い左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ファイルパスを書き込み用にBOM付きとしてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
スピアマン相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
文字列を青色化する	f'\033[34m{value}\033[0m'
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: ライトサーモンにグラフの色をセットする	color = 'lightsalmon'
ファイルを全部読み込む	f.read()
実数の複素数を計算する	complex(x)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
昇順にデータフレームを列名リストによってソートする	df.sort_values(by=column, ascending=True)
散布図のポイントマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
列を文字列に変換して連結する	''.join(map(str, iterable))
option: スラッシュを区切りで用いる	sep = '/'
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
データ列の中の未入力値の合計を数える	ds.isna().sum()
文字列を正規表現で区切る	re.split(pattern, s)
セットが空集合でないか調べる	len(aSet) != 0
データフレームを複数の列によってによって大きい順に並べる	df.sort_values(by=column, ascending=False)
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
文字列の最後から部分文字列を探す	s.rfind(sub)
行列の全要素の値を変更する	aArray[:, :] = 指定の値
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
option: リネンにグラフの色を設定する	color = 'linen'
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
2つの変数をそれぞれ定義する	x, y = i, j
セットに要素を追加する	aSet.add(element)
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: クリムゾンを使用する	color = 'crimson'
option: グラフの色をホットピンクにセットする	color = 'hotpink'
リストとイテラブルについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
双方向キューの末尾にイテラブルの要素を付け加える	deq.extend(iterable)
逆順の双方向キュー	reversed(deq)
Pandasで、データフレームのcollをPandasの日付型にする	pd.to_datetime(df[col])
option: n番目のカラムを行に設定する	index_col = n
データ列からユニークな値を抽出しリスト化する	ds.unique().tolist()
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
グレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
option: グラフの色をローングリーンにセットする	color = 'lawngreen'
データフレームのカラムの尖度を求める	df[col].skew()
データフレームを'A'列でグループ化する	df.groupby('A')
option: namesを列の名前に変更する	names = names
リストとリストの散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ラベンダー色を使用する	color = 'lavender'
逆双曲線余弦	math.acosh(x)
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
文字列をセパレータで分割して、文字列リストにする	s.split(sep)
いつまでもnからカウントダウンする	itertools.count(start=n, step=-1)
円周率を用いる	math.pi
日付時刻データにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
フローラルホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
縦棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
サインの逆数を求める	math.asin(x)
既存のファイルパスをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
列の正規分布に対する上下広がり	ds.skew()
ファイルパスのファイルサイズ	os.path.get_size(filepath)
最初のカテゴリーを除き、データフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
option: グラフの色をグレーに変更する	color = 'gray'
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの最頻値を求める	df.mode()
n番目の列をインデックスとしてCSVファイルタブ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
イテラブルを円グラフにする	plt.pie(データ列, startangle=90)
赤い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームを四捨五入する	df.round()
入力ストリームからn文字読み込む	f.read(n)
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
Pandasで、書式fmtでデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format=fmt)
縦棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
２つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
集合から全要素を取り除く	aSet.clear()
標準出力がパイプか	not sys.stdout.isatty()
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
ベクトルの内積	np.dot(aArray, aArray2)
データフレームの中の欠損値の数を数える	df.isna().sum()
単位正方行列を作る	np.identity(n)
グリーンイエロー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
文字列が全て数字かテストする	s.isdigit()
数列とリストの散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフをスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='springgreen')
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
option: ドジャーブルー色を使用する	color = 'dodgerblue'
データフレームの列の文字列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
配列をベースに全要素が0の行列	np.zeros_like(aArray)
option: グラフの色をライトグレーにセットする	color = 'lightgrey'
option: 茶色にグラフの色を設定する	color = 'brown'
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
リストとリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのstart行目からend行目までを抽出する	df[start:end]
option: レベッカパープル色を用いる	color = 'rebeccapurple'
option: 色を青紫に設定する	color = 'violet'
マップの値の一覧	aDict.values()
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
データフレームの50パーセンタイル	df.median()
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームのインデックスリスト	df.index
目盛り線	plt.grid(linestyle='--')
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
散布図に▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
行列の累積積	np.cumprod(aArray)
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
データフレームのリストカラムの標本標準偏差を求める	df[aList].std()
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの全列の相関をグラフ化する	sns.pairplot(df)
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
nが3で割り切れる	n % 3 == 0
正規表現patternでデータ列をreplにまとめて置き換える	ds.replace(pattern, repl, regex=True)
ひとつでもアルファベットが文字列内に含まれる	any(c.isalpha() for c in s)
数式の変数の解を方程式として求める	sympy.solve(e, z)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ファイルをバイナリモードを使ってオープンして]fとする	f = open(filepath, mode='rb')
イテラブルを更新不能な集合に変換する	frozenset(iterable)
nが5で割り切れる	n % 5 == 0
オリーブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
ひとつ飛ばしでリストを得る	aList[::2]
option: マーカーを▽に変える	marker = 'v'
スレートブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
nは何桁か	len(str(n))
カラムの値がNaNか調べる	ds.isna()
今日の年	datetime.datetime.today().year
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
二つの集合の共通要素だけにする	aSet.intersection_update(aSet2)
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: データ型として８ビット整数型を使う	dtype = np.int8
数列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
文字列中にひとつでも非アスキー文字が含まれるか	any(not c.isascii() for c in s)
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
コーンズシルク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームのリストカラムの正規分布に対する上下広がり	df[aList].skew()
option: フォントの色をネイビーに変更する	color = 'navy'
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
列をリストにする	df[column].values.tolist()
色付きの実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列の接尾辞が部分文字列か	s.endswith(sub)
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データ列の相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: グラフの色をシルバーに指定する	color = 'silver'
'A'列によってデータフレームを整列する	df.sort_values(by='A')
作画を正方形にする	plt.axis('equals')
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームの列の中にが存在するかどうか判定する	df[col].isin([value])
列を累加する	itertools.accumulate(iterable)
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
クラス分類の真陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
リストの最後	aList[-1]
赤にヒストグラムの色をセットする	plt.hist(データ列, color='red')
入力から2つの実数を読む	A, B = map(float, input().split())
文字列を走査し正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
▼印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフの▽印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
列の長さnの順列を得る	itertools.permutations(iterable, n)
半透明の破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームを列ごとにグループ化し、、個数を求める	df.groupby(column).count()
数値を簡略にする	sympy.sympify(e)
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
Pandasでデータ列をフォーマットでタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
スクリプトのファイルの名前を知る	sys.argv[0]
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
スタックに要素を積む	deq.append(element)
配列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
データフレームを'A'列を用いてソートして、更新する	df.sort_values(by='A', inplace=True)
数式のパラメータを数式で置き換える	e.subs(z, e2)
浮動小数点数を二乗する	x ** 2
下三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの指定された三つの列を取り出す	df[[column, column2, column3]]
線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの左三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを各列毎にグループ化して列の合計を求める	df.groupby(column)[column2].sum()
数式のパラメータにnを代入する	e.subs(z, n)
タイムスタンプデータがタイムスタンプデータより前か	aDatetime < aDatetime2
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームの重複する行をマスクする	df.duplicated()
データフレームのリストカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
縦棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
予測結果の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームが正規分布からどれだけ歪んでいるか見る	df.kurt()
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
option: ライトスレイグレー色を使用する	color = 'lightslategrey'
option: ブルーバイオレットを用いる	color = 'blueviolet'
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
リストとデータ列について散布図を描画し、、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
補助目盛を有効にする	plt.minorticks_on()
option: 大バツ印を加える	marker = 'X'
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
データフレームのリストカラムの欠損値をメディアンで置換する	df[aList].fillna(df[aList].median())
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
下位集合か確認する	aSet.issubset(aSet2)
データフレームのカラムの平均	df[col].mean()
データフレームの列を丸めて整数型にする	df[col].round().astype(int)
二進文字列を整数にする	int(s, 2)
データフレームのカラムの中にある文字列と日付データの合計をカウントする	df[col].isin([value, value2]).sum()
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: インディアンレッドを使う	color = 'indianred'
文字列の開始位置からと終了位置までの間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
横棒グラフをダークグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgreen')
シーケンスを出現回数して、カウンタを更新する	aCounter.update(iterable)
文字列が全て数値か調べる	s.isnumeric()
整数nがリストのどれかかどうか調べる	n in aList
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列を最初の部分文字列で二分し前半の文字列を見る	s.partition(sub)[0]
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
データ列が正規分布からどの程度歪んでいるか確認する	ds.kurt()
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
option: オーキッドを使う	color = 'orchid'
マップからキーの値を参照する	aDict.get(key)
データ列の割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
表データを列によって大きい順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
ライトイエローにヒストグラムの色を指定する	plt.hist(データ列, color='lightyellow')
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
散らばりを作図する	plt.scatter(データ列x, データ列y)
リストとリストの散布図を描画して、その大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
オブジェクトは文字列型のインスタンスか調べる	isinstance(obj, str)
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
オブジェクトはリストに含まれる	element in aList
左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
改行しなくて2つの値をプリントする	print(value, value2, end='')
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
リストを引数として展開してプリントする	print(*aList, sep=',')
配列とリストの散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
組の末尾のn要素を捨てる	aTuple[:-n]
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
黒い星マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの列の名前一覧	df.columns
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
折れ線グラフとしてリストの推移を可視化する	plt.plot(range(len(データ列)), データ列)
型のサブクラスか調べる	issubclass(サブクラス, クラス)
折れ線グラフの色をダークゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='darkgoldenrod')
タブを使う	'\t'
組を展開して出力する	print(*aTuple)
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()//60
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
等差数列から乱数を算出する	random.randrange(start, end, step)
カウンタをタプルとして更新する	aCounter.update(aDict)
nとn2のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
K最近傍法として回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
カウンタ同士でインターセクション演算する	aCounter & aCounter2
UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
option: グラフの線のスタイルを実線に変更する	linestyle = 'solid'
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
ひとつでも数字が文字列内に含まれるかどうか調べる	any(c.isdigit() for c in s)
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
小数点数を切り下げて整数に変換する	math.floor(x)
データ列の正規分布に対する左右対称性	ds.kurt()
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
両端キューをタプルにする	tuple(deq)
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
ファイルを文字コードtextを用いてオープンする]	open(filepath, encoding=text)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
ヒストグラムの色をシエナにする	plt.hist(データ列, color='sienna')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
option: インディゴにグラフの色を設定する	color = 'indigo'
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
リストは少なくとも一つ真か調べる	any(aList)
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
カウンタを高頻出方からリストとして得る	aCounter.most_common()
option: 色をシャルトリューズに設定する	color = 'chartreuse'
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列が全て英字か	s.isalpha()
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームの列の母標準偏差	df[col].std(ddof=0)
線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
文字列を部分文字列によって二分割する	s.partition(sub)
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
切片なしの線形回帰モデルを作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
降順にデータフレームを'A'列でで整列する	df.sort_values(by='A', ascending=False)
二つの列によって昇順にデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
Pandasで、文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
文字列の無限なイテラブル	itertools.repeat(element)
ヒストグラムでデータ列を図示する	plt.hist(データ列)
データフレームを列でソートし、、更新する	df.sort_values(by=column, inplace=True)
option: 青を使う	color = 'blue'
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
x軸の目盛りを非表示にする	plt.xticks([])
折れ線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列の左端からタブを除く	s.lstrip('\t')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
タプル中の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
データフレームの列の値がリストに含まれる行を取り出す	df[df[column].isin(aList)]
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
データフレームの列の中央値	df[col].median()
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
データフレームのカラムの名前の一覧を使う	df.columns
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
データ列を用いる	import pandas as pd
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='grey')
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
文字列が全て英数字かどうか確認する	s.isalnum()
正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
データフレームの指定された二列のみ抽出する	df[[column, column2]]
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
データフレームのカラムが正規分布からどの程度、尖っているか確認する	df[col].skew()
濃く色をグラフの描画で使う	sns.set(pallete='deep')
option: 白色を使用する	color = 'white'
色付きの破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
リストのn番目のの要素	aList[n]
辞書の項目名を列挙する	aDict.keys()
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
集合から別のセットを取り除く	aSet.difference_update(aSet2)
折れ線グラフの右三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームを各列毎にグループ分けし、、列の平均値を求める	df.groupby(column)[column2].mean()
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ケンドールでデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
上限から下限までの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
データフレームを使う	import pandas as pd
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
option: アイボリーにグラフの色を設定する	color = 'ivory'
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
文字列でフォーマットして今日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
option: ラベンダーにグラフの色を指定する	color = 'lavender'
部分文字列を文字列の先頭から探す	s.find(sub)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフをブルーバイオレット色を使って描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図の菱形マーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ベクトルの最大	np.max(aArray)
データフレームを表示するとき表示できる最大行数を増やす	pd.set_option('display.max_rows', n)
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図をミディアムスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
分子n、分母mの分数を生成する	fractions.Fraction(numerator=n, denominator=m)
ライトサーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
プラットフォームの整数の最大値	sys.maxsize
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの列がx以下の行を選択する	df[df[column] <= x]
青い実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ダークレッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
イテラブルをセットに追加更新する	aSet.update(iterable)
デックをポップする	deq.pop()
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: シアンを用いる	color = 'cyan'
リストから両端キューを新規生成する	collections.deque(iterable)
option: フォントの色をブラックに設定する	color = 'black'
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
オブジェクトのポインタ	id(obj)
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
大文字列	string.ascii_uppercase
タプルをソートする	sorted(aTuple)
浮動小数点数のハイパボリック・コサイン	math.cosh(x)
下三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
リストの要素数	len(aList)
浮動小数点数を浮動小数点数から減ずる	x - y
ファイルパスからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
グラフの用途をスライドに変更する	sns.set(context='talk')
リストと配列について散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームとしてファイルを読み込む	pd.read_excel(filename)
リストの末尾から要素を得る	aList.pop()
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
縦棒グラフをプロットしてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
箱ひげ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
現在は何時か知る	datetime.date.today().hour
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
nを八進表記に変換する	oct(n)
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
オブジェクトがリストの要素でない	element not in aList
青いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームの列の空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームを各列毎にグループ化して列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
2つの変数を同じ値にする	x = y = n
option: スラッシュを区切りで使用する	sep = '/'
データフレームのリストカラムが正規分布からどの程度歪んでいるか見る	df[aList].kurt()
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
N未満までの配列	np.arange(N)
列を両端キューに変換する	collections.deque(iterable)
option: フォントの色をダークバイオレットに指定する	color = 'darkviolet'
ティール色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ネイビー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ValueMapでまとめてデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
データ列をボックスチャートとして描画する	plt.boxplot(データ列)
データ列の折れ線グラフを▲印で描画する	plt.plot(データ列x, データ列y, marker='^')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
列の値で欠損値を含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: グラフの色をチョコレートに指定する	color = 'chocolate'
今日の日	datetime.datetime.today().day
バイナリ書き込みできるようにファイルパスをオープンする]	open(filepath, mode='wb')
グラフのサイズをセットする	plt.figure(figsize=(横幅, 高さ))
Pythonパスのリスト	sys.path
列にデータフレームを集約して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
マッピングからカウンタを作る	collections.Counter(aDict)
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
日付時刻データの月数を求める	aDatetime.month
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
option: 改行コードを旧Macに変更する	newline = '\r'
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
二つの文字列が等しくないか調べる	s != s2
データフレームの指定されたデータ型のカラム名を列挙する	df.select_dtypes(型).columns
サインの逆数	math.asin(x)
折れ線グラフの右三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字列内に英数字が含まれるかどうか	any(c.isalnum() for c in s)
オブジェクトは浮動小数点数か	isinstance(obj, float)
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データ列が何秒か確認する	ds.dt.second
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
データフレームのカラムの中に日付データと文字列が含まれる	df[col].isin([value, value2])
データフレームのカラムがx未満のデータを取り出す	df[df[column] < x]
破壊的に降順にデータフレームを二つの列を用いて並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
表データから重複した行をドロップする	df.drop_duplicates()
散布図のポイントマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
文字列にイテラブルを変換して、部分文字列によって連結する	sub.join(map(str, iterable))
青い破線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
カウンタを多い順にリストとして得る	aCounter.most_common()
文字列が組の要素でないか調べる	element not in aTuple
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
大文字・小文字を無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
浮動小数点数を整数で割った余り	x % y
option: ライトグレー色を用いる	color = 'lightgrey'
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
両端キューが空かどうか調べる	len(deq) == 0
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
option: アクアマリンを用いる	color = 'aquamarine'
データフレームから破壊的に重複するデータを削除する	df.drop_duplicates(inplace=True)
縦棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
n個にリストを等間隔でビニングする	pd.cut(aList, n)
数値を赤色にする	f'\033[31m{value}\033[0m'
タイムスタンプを使う	import time
predicateFuncがTrueとなる列の要素	itertools.dropwhile(predicateFunc, iterable)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
nが集合のいづれか	n in aSet
キューの値を左にn個分ローテンションする	deq.rotate(-n)
列とシーケンスをペア化する	itertools.zip_longest(iterable, iterable2)
文字列は全て十進数字	s.isdecimal()
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームを各列と列の組み合わせ毎にグループ分けして合計を求める	df.groupby([column, column2], as_index=False).sum()
2つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
実数を実数で除した余り	x % y
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
実行環境がMacOSか調べる	sys.platform.startswith('darwin')
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
option: UTF8を用いる	encoding = 'utf-8'
線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
オーキッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データフレームのインデックスがnの行を取り出す	df.loc[n]
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
オリーブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
option: ネイビー色を使用する	color = 'navy'
文字列を黄色で表示する	print(f'\033[33m{value}\033[0m')
ヒストグラムをダークマゼンタ色を使って描画する	plt.hist(データ列, color='darkmagenta')
列を文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
オブジェクトは論理値か調べる	isinstance(obj, bool)
nが偶数かどうか調べる	n % 2 == 0
データフレームのリスト列のNaNを最小値に設定する	df[aList].fillna(df[aList].min())
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
横棒グラフをイエローグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
日付時刻データを数値に変換する	aDatetime.timestamp()
option: 色をロージーブラウンに設定する	color = 'rosybrown'
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
ベクトルの次元数	aArray.ndim
線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
プロットの色をパステル調にする	sns.set(pallete='pastel')
データフレームのモードを計算する	df.mode()
セットから任意の要素を取り除く	aSet.pop()
文字列中にひとつでも非小文字が含まれるか	any(not c.islower() for c in s)
リストと数列の散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
列を文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
option: 色をアリスブルーに変更する	color = 'aliceblue'
ルートのチェーンマップ	collections.ChainMap()
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
日付時刻データがタイムスタンプデータと同時か	aDatetime == aDatetime2
プロットの色を全般的に濃くする	sns.set(pallete='deep')
SDGで回帰分析をする	model = sklearn.linear_model.SGDRegressor()
集合を更新不能に変換する	frozenset(aSet)
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
データ列の中に文字列が含まれる	ds.isin([value])
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
データフレームのカラムの中に文字列と文字列がいくつあるか求める	df[col].isin([value, value2]).sum()
目盛り線	plt.grid(linewidth=3.0)
折れ線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
赤い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを複数の列によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
option: アンティークホワイトにフォントの色を設定する	color = 'antiquewhite'
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
列をダミー変数に変換する	pd.get_dummies(iterable)
フォーマットfmtとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームのカラムの標準偏差を求める	df[col].std()
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
列を100の位で丸める	ds.round(-2)
データフレームの欠損値をxにセットする	df.fillna(x)
リストとリストについての散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
イテラブルのイミュータブルな集合を求める	frozenset(iterable)
まとめてデータフレームの値をreplに正規表現patternで変更する	df.replace(pattern, repl, regex=True)
線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
標準エラー	sys.stderr
タプル中の文字列が最初に見つかる位置を使う	aTuple.index(element)
現在が土曜日	datetime.datetime.today().weekday() == 5
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
rgbの四角マーカーを数列とイテラブルの散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nが集合のどれかか調べる	n in aSet
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
ロバスト推定を用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリスト列を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームのn行より後ろ抽出する	df[n:]
ファイルを開き]追加ストリームを使う	open(filepath, mode='a')
Pandasでデータフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: ダークスレートブルーを用いる	color = 'darkslateblue'
日付データは何日か知る	aDate.day
部分文字列が文字列の開始位置と終了位置の間に含まれる	s.find(sub, start, end) != -1
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
データフレームを２つの列によってで大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
プロットで使用する横軸にラベルを付ける	plt.xlabel('x軸ラベル')
赤い一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
複数の列によって昇順にデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
両端キューの最後に文字列を追加する	deq.append(element)
Pandasで、エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
自分自身をモジュールとしてを得る	sys.modules[__name__]
クラスのサブ型かどうか確認する	issubclass(サブクラス, クラス)
折れ線グラフを半透明の実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ユークリッド距離	math.dist(point, point2)
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列の左側からタブを除去する	s.lstrip('\t')
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
CSVTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
イテラブルとリストについて散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
nとn2のXOR	n ^ n2
nとn2の和を求める	n + n2
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タプル内の要素が少なくともひとつ真	any(aTuple)
計数器をタプルから準備する	collections.Counter(aDict)
データ列の変遷を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列をセパレータで分割して、列挙する	s.split(sep)
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
各列毎にデータフレームをグループ化して、列の最大値を計算する	df.groupby(column)[column2].max()
ホットピンク色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのカラムの欠損値を平均で埋める	df[col].fillna(df[col].mean())
nがn2以上かどうか確認する	n >= n2
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ベクトルの行ごとの平均値を求める	np.mean(aArray, axis=1)
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
線グラフをダークオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorange')
ホワイトスモーク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
ファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
プラム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
正接の逆数	math.atan(x)
データフレームのリスト列の中にいくつNaNがあるか数える	df[aList].isna().sum()
option: 先頭カラムをインデックスに設定する	index_col = 0
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
データ列を1000の位で四捨五入して整数型にする	ds.round(-3).astype(int)
縦棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
nがn2の倍数かどうか調べる	n % n2 == 0
凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
リストと配列の散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
本日が月曜日か	datetime.datetime.today().weekday() == 0
カウンタを集合にする	set(aCounter)
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
二つの列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
散布図のダイアモンドマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの中の列をn個に等量でビン分割する	pd.qcut(df[col], n)
データ列の欠損値をxに変更する	ds.fillna(x)
ヒストグラムの色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
赤い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
セットの全ての要素が別のセットに含まれるか	aSet.issubset(aSet2)
配列とリストの散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データ列の推移を青い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストを周期的に繰り返す	itertools.cycle(iterable)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフをホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
データ列とリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カテゴリ別で色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
重複していない行だけを取り出す	df[not df.duplicated(keep=False)]
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
データフレームのリストカラムの未入力値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
双方向キューの末尾にイテラブルの各要素を入れる	deq.extend(iterable)
リストと数列について散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
クラス分類をブースティングとしてする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データ列の推移を赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
nはリストのひとつか調べる	n in aList
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
散布図の▼マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
カラムを100の位で丸めて整数型にする	ds.round(-2).astype(int)
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
日付時刻データが水曜日	aDatetime.weekday() == 2
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
グラフの中に枠なしの凡例を描画する	plt.legend(frameon=False)
整数nの2進文字列	bin(n)[2:]
option: フォントの色をシアンに設定する	color = 'cyan'
浮動小数点数がNaNか確認する	math.isnan(x)
印字を全部見る	string.printable
option: チョコレート色を用いる	color = 'chocolate'
nとn2の排他的論理和を求める	n ^ n2
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
nは組のひとつか調べる	n in aTuple
データフレームを'A'列を用いて整列し、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列の大文字と小文字を逆にする	s.swapcase()
リストとリストについて散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
列によってデータフレームを昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームのリストカラムの中に存在する文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
カウンタ間で和集合	aCounter | aCounter2
文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
option: ディムグレーにグラフの色を指定する	color = 'dimgray'
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ディレクトリをfilepathにする	os.chdir(os.dirname(filepath))
今日のタイムスタンプ	datetime.datetime.today()
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
タプルをひとつ飛ばしで取り出す	aTuple[::2]
行列にはいくつ要素が含まれるか調べる	aArray.size
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
項目名がマップにあるか調べる	key not in aDict
データフレームの列がxより小さい行を取り出す	df[df[column] < x]
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
実数の床を計算する	math.floor(x)
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
浮動小数点数を三乗する	x ** 3
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームのカラムの中に日付データが存在する	df[col].isin([value])
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
ラインを赤い破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
双方向キューのn番目の要素	deq[n]
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
横棒グラフをコーラル色を使って描画する	plt.barh(データ列x, データ列y, color='coral')
日付データが木曜日	aDate.weekday() == 3
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフをオリベドラブ色を使って描画する	plt.plot(データ列x, データ列y, color='olivedrab')
最大値と最小値でデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
nで乱数シードを固定する	random.seed(n)
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
数列の移り変わりを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
option: ディムグレーを使う	color = 'dimgray'
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
文字列がキーワードか調べる	keyword.iskeyword(s)
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
OSがMacOS	sys.platform.startswith('darwin')
option: 最大深さを指定する	maxdepth = n
2進文字列を整数にする	int(s, 2)
要素ひとつの組を作る	(element,)
列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
サブクラスか調べる	issubclass(サブクラス, クラス)
データフレームを'A'列によって小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
カウンタの項目のカウントを見る	aCounter[element]
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
アリスブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
八進数文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
配列とリストについての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
option: シャルトリューズ色を用いる	color = 'chartreuse'
データ列とイテラブルについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラムの要約統計量を求める	df[col].describe()
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
正方単位行列	np.identity(n)
文字列に日本語が使われているかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
option: ブラウン色を使う	color = 'brown'
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
実数の逆双曲線正接を求める	math.atanh(x)
JSON文字列を辞書に変換する	json.loads(jsonString)
データフレームを列の値ごとに集約し、、最大値を求める	df.groupby(column).max()
データフレームの母標準偏差を算出する	df.std(ddof=0)
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
文字列をストリームに書き込む	f.write(s)
リストをカンマ区切りで表示する	print(*aList, sep=',')
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
option: 色をライトグリーンに設定する	color = 'lightgreen'
今日が何年か知る	datetime.datetime.today().year
option: グラフの色をシスルに変更する	color = 'thistle'
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
nがn2以下またはn3以上	n <= n2 or n >= n3
SJISでJSONLファイルにデータフレームを書き込む	df.to_csv(filename, encoding='shift_jis')
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
カラーバーを水平にプロットする	plt.colorbar(orientation='horizontal')
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
表データの列がx以下のデータを抽出する	df[df[column] <= x]
実行時の標準出力の出力先がターミナルか判定する	sys.stdout.isatty()
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
rgbに棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
両端キュー中の文字列の数を数える	deq.count(element)
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
MSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: マーカーを大バツに指定する	marker = 'X'
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
イテラブルとリストを連結する	itertools.chain(iterable, iterable2)
表データの列の値がxより大きくx2より少ないデータを選択する	df[(x < df[column]) & (df[column] < x2)]
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
option: グラフの色をクリムゾンに変更する	color = 'crimson'
第２引数のファイルの名前	sys.argv[1]
複数の列によって降順にデータフレームを破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのカラムの中に文字列が存在するか	df[col].isin([value])
棒グラフをダークレッド色として描画する	plt.bar(データ列x, データ列y, color='darkred')
カウンタの項目一覧を使う	aCounter.keys()
文字列の長さを使う	len(s)
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ミディアムスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
ファイルパスの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームを列の値によってグループ分けする	df.groupby(column)
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
コーンズシルク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
行列の次元を変形する	aArray.reshape(行数, 列数)
ベクトルの最小値	np.min(aArray)
最小値でデータ列の欠損値を埋める	ds.fillna(ds.min())
ファイルがない	not os.path.exists(filepath)
線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategrey')
xが一桁の正の整数	0 <= x <= 9
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ヒストグラムをディープスカイブルー色を使って描画する	plt.hist(データ列, color='deepskyblue')
グリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
リストの末尾からn番目以前の要素を得る	aList[:-n]
リストとリストについて散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
分類結果のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
要素を両端キューの先頭から取り出す	deq.popleft()
浮動小数点数を百の位で丸める	round(x, -2)
ピアソン相関係数としてデータフレームの相関行列	df.corr(method='pearson')
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
散布図をrgbの▽マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのポイントプロットを描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストをひとつ飛ばしで取り出す	aList[::2]
折れ線グラフの色を濃い青に変更する	plt.plot(データ列x, データ列y, color='darkblue')
イテラブルと数列について散布図を描画して、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
オブジェクトはタプル型か	isinstance(obj, tuple)
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
整数乱数の配列を作る	np.random.randint(開始値, 終了値, N)
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
nのビット長	n.bit_length()
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: 区切りを改行にする	sep = '\n'
線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
セットの要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
再帰の上限を増やす	sys.setrecursionlimit(1000000)
環境がリナックスか調べる	sys.platform.startswith('linux')
オブジェクトがバイト列クラスのインスタンスかどうか調べる	isinstance(obj, bytes)
環境がWindows	sys.platform.startswith('win32')
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
プロットの用途を画面に変更する	sns.set(context='notebook')
リストの中の一番大きい値を求める	max(aList)
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
文字列をセパレータで区切って、文字列リストに変換する	s.split(sep)
option: ダークサーモンにフォントの色を設定する	color = 'darksalmon'
ファイルを追加モードとして開く]	open(filepath, mode='a')
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: 色をダークグレーにセットする	color = 'darkgrey'
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのカラムの文字列長を列として使う	df[col].str.len()
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
２つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
改行を除いて標準入力から1行だけ読む	sys.stdin.readline().rstrip()
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
線グラフの色を赤にセットする	plt.plot(データ列x, データ列y, color='red')
プラットホームの名前を知る	sys.platform
バイナリできるようにファイルパスをオープンする]	open(filepath, mode='rb')
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
リストと配列の散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームから重複を残さず、落とす	df.drop_duplicates(keep=False)
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
文字列の右側から部分文字列を除く	s.rstrip(sub)
文字列はタプルに含まれるかどうか確認する	element in aTuple
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムをフローラルホワイト色を使って描画する	plt.hist(データ列, color='floralwhite')
nわるn2を計算する	n / n2
線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
文字列が全て十進数字か調べる	s.isdecimal()
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
リストの先頭を捨てる	aList[1:]
データ列を折れ線グラフで作図する	plt.plot(データ列x, データ列y)
最大値・最小値を用いて整数乱数を発生させる	random.randint(最小値, 最大値)
データ列の中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
ダークサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
カウンタの文字列を列挙する	aCounter.keys()
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
データフレームを各列毎にグループ化して文字列というグループの個数を求める	df.groupby(column).size()[s]
こんにちは世界をプリントする	print('Hello World')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
BOM付きで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムの色をライトシアンにセットする	plt.hist(データ列, color='lightcyan')
行列の累積和	np.cumsum(aArray)
キューに要素をスタックする	deq.append(element)
２つの文字列を順にプリントする	print(value, value2)
データ列の日にち	ds.dt.day
データフレームを複数の列を用いて昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: グリーンに色を設定する	color = 'green'
データフレームを複数の列でで破壊的に並べる	df.sort_values(by=column, inplace=True)
浮動小数点数の双曲線余弦の逆数	math.acosh(x)
グラフの用途を画面に変更する	sns.set(context='notebook')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ケンドール相関係数としてデータフレームの相関行列	df.corr(method='kendall')
nからn2を減算する	n - n2
ライトスチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: タブを区切りで使う	sep = '\t'
プロットを表示する	plt.show()
ヒストグラムの色をハニーデューにセットする	plt.hist(データ列, color='honeydew')
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
青色で文字列をプリントする	print(f'\033[34m{value}\033[0m')
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
option: ダークカーキにグラフの色をセットする	color = 'darkkhaki'
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
ライトゴールドロディイエローにヒストグラムの色をセットする	plt.hist(データ列, color='lightgoldenrodyellow')
JSONLファイルにヘッダを付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
コーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
平均値でデータ列のNaNを置換する	ds.fillna(ds.mean())
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
平均で列の欠損値を埋める	ds.fillna(ds.mean())
option: グラフの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのリストカラムを百の位で四捨五入して、整数にする	df[aList].round(-2).astype(int)
淡いピンク色色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightpink')
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
オブジェクトはタプルに含まれるか確認する	element in aTuple
文字列の先頭から余分な空白を除去する	s.lstrip()
データ列のタイムゾーンを日本にする	ds.tz_convert('Asia/Tokyo')
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
数列とデータ列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ライトグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
原点から点までの距離	math.hypot(x, y)
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
データ列の曜日が何日目か調べる	ds.dt.dayofweek
複数の列を用いてデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの列の文字列を欠損値にする	df[col].replace(s, np.nan)
データ列を使用する	import pandas as pd
option: どの列もインデックスに設定しない	index_col = None
棒グラフをビスク色を使って描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームのリストカラムの欠損値を平均に指定する	df[aList].fillna(df[aList].mean())
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
n個の要素があるリストを作る	[element] * n
フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
option: 書き込みモードに指定する	mode = 'w'
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ヒストグラムをダークターコイズ色を用いて描画する	plt.hist(データ列, color='darkturquoise')
データフレームのカラムの欠損値を直前の値に変更する	df[col].fillna(method='ffill')
円グラフを完全な円にする	plt.axis('equals')
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフの四角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
書き込みできるようにファイルをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームのカラムの秒を使う	df[col].dt.second
タプルの項目名の一覧	aDict.keys()
小麦色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
リストの推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
コーラル色としてヒストグラムを描画する	plt.hist(データ列, color='coral')
破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
デックは空でないかどうか調べる	len(deq) != 0
折れ線グラフの色を濃い青に指定する	plt.plot(データ列x, データ列y, color='darkblue')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
イテラブルとイテラブルについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
データフレームのリストカラムの中にある文字列と文字列の個数を求める	df[aList].isin([value, value2]).sum()
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
データフレームのそれぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
option: ペールグリーン色を使用する	color = 'palegreen'
棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
三つのデータフレームを縦向きに合体させる	pd.concat([df, df2, df3], axis=0)
ファイルパスをSJISを使って書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
二つの集合の和集合を求める	aSet.union(aSet2)
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
option: マーカーを右三角に設定する	marker = '>'
リストからオブジェクトを取り除く	aList.remove(element)
option: レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
option: 色の透明度を指定する	alpha = 0.5
ベクトルの値	aArray[行番号, 列番号]
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ケンドールの相関係数を使う	scipy.stats.kendalltau(データ列, データ列2)
カウンタの最も頻出な文字列	aCounter.most_common()[0]
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
y軸だけ目盛線	plt.grid(axis='y')
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
option: 改行コードをWindowsにセットする	newline = '\r\n'
option: グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
キューのn番目に数値を挿入する	deq.insert(n, element)
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームを小数点以下n桁で四捨五入する	df.round(n)
データフレームのカラムの月を使う	df[col].dt.month
集合の浅いコピーを作る	aSet.copy()
データフレームの列の未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
文字列中のパターンを新しい文字列で置換する	re.sub(pattern, newsub, s)
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
データフレームのカラムは正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
折れ線グラフの印を下三角印にする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
黒いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
インタプリタの実行ファイルの絶対パス	sys.executable
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの列の欠損値をxに指定する	df[col].fillna(x)
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: タブを区切りで使用する	sep = '\t'
rgbの下三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の最後から改行を除去する	s.rstrip('\n')
列の各データ値の出現回数	ds.value_counts()
option: 色をサドルブラウンに設定する	color = 'saddlebrown'
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
散布図の大バツ印の太さを指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
青緑にヒストグラムの色を指定する	plt.hist(データ列, color='teal')
option: グリーンイエロー色を用いる	color = 'greenyellow'
色付きの破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
配列の差を求める	aArray - aArray2
実行時の標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
option: 文字列の示す文字コードを使う	encoding = s
option: グラフを破線に変更する	linestyle = 'dashed'
双方向キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
リストとリストについて散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
日付時刻データにn日を加える	aDatetime + datetime.timedelta(days=n)
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
グローバル変数の一覧を使う	globals()
シーケンスのコンビネーション	itertools.combinations(iterable, n)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
カラーマップを使ってヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
カウンタから辞書を減らす	aCounter.subtract(aDict)
空のカウンタを生成する	collections.Counter()
線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
モデルを作る	model.fit(説明変数, 目的変数)
JSONLファイルにインデックスを付けずにデータフレームを書き込む	df.to_csv(filename, index=None)
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
ミディアムブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
データフレームを関数の値でグループ化し要約統計量を計算する	df.groupby(関数).describe()
行列の形状を変形する	aArray.reshape(行数, 列数)
複数の列でデータフレームをソートし、更新する	df.sort_values(by=column, inplace=True)
縦棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
n個に等間隔でデータ列をビン分割する	pd.cut(ds, n)
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
説明変数と目的変数で単回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのリストカラムの欠損値を後の行の値で埋める	df[aList].fillna(method='bfill')
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームのリストカラムの中にいくつ文字列が含まれるか数える	df[aList].isin([value]).sum()
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
横棒グラフをローングリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lawngreen')
プラットホームはリナックスか調べる	sys.platform.startswith('linux')
分数を使う	import fractions
リストとリストについての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
部分文字列が文字列の開始位置からと終了位置の間に含まれる	s.find(sub, start, end) != -1
option: グラフの色をコーンズシルクにセットする	color = 'cornsilk'
浮動小数点数に実数を足す	x + y
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
nが一桁の整数か調べる	0 <= n <= 9
第２引数で指定されたファイルの名前	sys.argv[1]
データ列は何分か見る	ds.dt.minute
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
散布図を右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>')
３つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
実数が負の数かどうか	x < 0
文字列は全て識別子名かどうか調べる	s.isidentifier()
ファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
行列積	np.matmul(aArray, aArray2)
データフレームのリストカラムのNaNをxで補う	df[aList].fillna(x)
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームのリスト列のどの値が頻出か調べる	df[aList].mode()
双方向キューの要素を右にn個分ローテンションする	deq.rotate(n)
データフレームの列のどの値が頻出か見る	df[col].mode()
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
リストとリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
リストの要素を小さい方からソートする	sorted(aList, reverse=False)
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
セットから別のセットの要素を除去する	aSet.difference_update(aSet2)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
小数点数の整数部を求める	math.modf(x)[1]
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
実線に折れ線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのカラムが何日か確認する	df[col].dt.day
アクアマリン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
黒い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリスト列の欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
タプルでカウンタを更新する	aCounter.update(aDict)
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: スプリンググリーンを使う	color = 'springgreen'
Pandasで、データ列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
文字列を部分文字列で分けた時の後半の文字列を使う	s.partition(sub)[-1]
option: ピーチパフを使う	color = 'peachpuff'
アンサンブル学習としてクラス分類をする	sklearn.ensemble.VotingClassifier()
ふたつの集合の∪を見る	aSet.union(aSet2)
データフレームのリスト列の第一四分位数	df[aList].quantile(0.25)
シアン色としてヒストグラムを描画する	plt.hist(データ列, color='cyan')
赤い三角マーカーを配列とデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
カウンタをセットにする	set(aCounter)
オブジェクトがリストに含まれるか	element in aList
option: スキップする列番号をnamesで指定する	skiprows = names
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
ふたつの関係が上位集合	aSet.issuperset(aSet2)
ふたつの集合に共通する要素からなる集合を計算する	aSet.intersection(aSet2)
ファイルにxを文字列に変換して書く	f.write(str(x))
カテゴリ列で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームを散布図でグラフ化してカテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
改行しなくて文字列をプリントする	print(value, end='')
データフレームを破壊的に列によってでソートする	df.sort_values(by=column, inplace=True)
実行環境がWindows	sys.platform.startswith('win32')
ファイルを絶対ファイルパスにする	os.path.abspath(filepath)
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームをCSVから読む	pd.read_csv(filename, sep=',')
データフレームの未入力値を直前の値で埋める	df.fillna(method='ffill')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
青い実線でイテラブルの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
文字列中に部分文字列が含まれない	sub not in s
横棒グラフをコーンズシルク色を使って描画する	plt.barh(データ列x, データ列y, color='cornsilk')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
CSV形式を用いてデータフレームをJSONLファイルに保存する	df.to_csv(filename)
線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
実数のハイパボリック・タンジェント	math.tanh(x)
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
option: グラフを破線に設定する	linestyle = 'dashed'
文字列の接頭辞が部分文字列か	s.startswith(sub)
組をナンバリングする	enumerate(aTuple)
nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
option: シャルトリューズに色を設定する	color = 'chartreuse'
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームを10の位で四捨五入する	df.round(-1)
EUCを用いてファイルをオープンする]	open(filepath, encoding='euc_jp')
ファイルからファイル名を取り出す	os.path.basename(filepath)
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームのリストカラムの欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.')
スプリンググリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
パープル色としてヒストグラムを描画する	plt.hist(データ列, color='purple')
グラフを暗くする	sns.set(pallete='dark')
数列とリストについて散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
整数nを2進数文字列に変換する	bin(n)[2:]
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
インディゴ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
文字列の示す文字コードでファイルを開く]	open(filepath, encoding=s)
文字列中にひとつでも非空白が含まれるか	any(not c.isspace() for c in s)
実数の逆双曲線余弦を求める	math.acosh(x)
複数の列によって昇順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データ列のユニークな値を確認する	ds.unique()
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
データフレームの列名を列挙する	df.columns
データフレームは正規分布からどの程度、尖っているか見る	df.skew()
データフレームの中で、列とカラムの重複を確認する	df.duplicated(subset=[column, column2])
破壊的に列名リストでによってデータフレームをソートする	df.sort_values(by=column, inplace=True)
option: ライトスレイグレー色を用いる	color = 'lightslategray'
データフレームのリストカラムの欠損値を前の行の値で埋める	df[aList].fillna(method='ffill')
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ミディアムバイオレットレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
青い点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列が文字列リストのいづれ	s in aStringList
データフレームを２つの列によってによって降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
散布図の右三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
nがn2より小さいかどうか調べる	n < n2
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ベクトルにはいくつ要素が存在するか調べる	aArray.size
データフレームの中にある文字列と文字列の数を数える	df.isin([value, value2]).sum()
ライトサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='lightsalmon')
四分位数ごとにリストを分割する	pd.qcut(aList, 4)
八進数文字列を整数に変換する	int(s, 8)
option: シアン色を用いる	color = 'cyan'
JSONフォーマットのfをデータに変換する	json.load(fin)
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図のマーカーの色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
算術計算ライブラリを使用する	import math
浮動小数点数の値が整数かどうか調べる	x.is_integer()
データフレームのリストカラムが正規分布からどれだけ、尖っているか見る	df[aList].skew()
２つの変数を同じ値にする	x = y = n
横棒グラフを黄緑色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の四角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
タイムスタンプデータは何年か知る	aDatetime.year
0からnまでの整数リスト	list(range(n+1))
文字列内にひとつでも大文字が含まれるかどうか確認する	any(c.isupper() for c in s)
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
黒いポイントマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
キューの末尾に列の各要素を追加する	deq.extend(iterable)
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
カラーパレットを濃くする	sns.set(pallete='deep')
インディゴ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
横棒グラフを白色を使って描画する	plt.barh(データ列x, データ列y, color='white')
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
データフレームの列の最頻値を求める	df[col].mode()
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
乱数の配列を作成する	np.random.random(N)
十六進数字を全部求める	string.hexdigits
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームのリストカラムの欠損値を平均値で置換する	df[aList].fillna(df[aList].mean())
配列とリストについての散布図にクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
赤い点線を使ってリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
行列を2次元1行に変形する	aArray.reshape(1, -1)
option: 色をゴールデンロッドに変更する	color = 'goldenrod'
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
列名リストによってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
整数個のものからk個取り出した時の並べ方を計算する	math.perm(n, k)
データフレームの列のNaNを最小値で置き換える	df[col].fillna(df[col].min())
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームのカラムの曜日	df[col].dt.weekday_name
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
カウンタの要素一覧	aCounter.keys()
グラフの中の縦軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
データ列の文字列長を列として見る	ds.str.len()
文字列内にアスキー文字が含まれる	any(c.isascii() for c in s)
床	math.floor(x)
列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
オプションで、標準出力を出力先にする	file = sys.stdout
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
自然数個からk個取り出したときの順列の総数を算出する	math.perm(n, k)
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
カテゴリで色分けしてデータフレームをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オプションで標準出力を出力先にする	file = sys.stdout
横棒グラフをラベンダー色を用いて描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームのリスト列を1000の位で丸める	df[aList].round(-3)
行列式を見る	np.linalg.det(aArray)
散布図を下三角印で描画する	plt.scatter(データ列x, データ列y, marker='v')
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムをアクアマリン色を用いて描画する	plt.hist(データ列, color='aquamarine')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
表データから重複した行を残さず削除する	df.drop_duplicates(keep=False)
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: 印の色を変える	markerfacecolor = '#800080'
折れ線グラフとして数列を図示する	plt.plot(データ列x, データ列y)
nがn2の倍数でないか	n % n2 != 0
ライトスレイグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
列の25パーセンタイル	ds.quantile(0.25)
データフレームをカンマ区切りのファイルから読む	pd.read_csv(filename, sep=',')
双方向キューの大きさ	len(deq)
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データ列の曜日は何日目か調べる	ds.dt.dayofweek
表を各列毎にグループ化して文字列というグループを求める	df.groupby(column).get_group(s)
ダークサーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
グラフの色調を明るくする	sns.set(pallete='bright')
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
リストとリストの散布図を描画してマーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
折れ線グラフの▲マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
データフレームを'A'列によって並べ直し、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
タイムスタンプデータの日付を見る	aDatetime.date()
データ列を箱ひげ図でプロットする	plt.boxplot(データ列)
文字列の開始位置から終了位置までの範囲で部分文字列の出現を数える	s.count(sub, start, end)
データフレームのcollを日付データにする	pd.to_datetime(df[col])
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
イテラブルとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
配列とイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
数式の微分を計算する	sympy.diff(e)
列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
整数nのビット長を見る	n.bit_length()
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームを'A'列で昇順に整列する	df.sort_values(by='A', ascending=True)
切り上げて整数に変換する	math.ceil(x)
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
option: グラフの色をチョコレートに変更する	color = 'chocolate'
データフレームを関数の値によってまとめた表	df.groupby(関数)
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
貝殻色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
黒いクロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
セットをリストにする	list(aSet)
第一コマンド引数を知る	sys.argv[1]
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
K最近傍法を用いてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームを2つの列でで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
セットの濃度	len(aSet)
多次元データをt分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームをBOM付きでJSONLファイルに保存する	df.to_csv(filename, encoding='utf_8_sig')
SJISを用いてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
標準入力を使用する	sys.stdin
option: マーカーを星に指定する	marker = '*'
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
データフレームの最初の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
文字列の後ろからタブを取り除く	s.rstrip('\t')
文字列内にひとつでもASCII文字が含まれるか	any(c.isascii() for c in s)
option: ダークグレーを用いる	color = 'darkgrey'
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ティール色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
パウダーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
スピアマンでデータフレームの相関行列	df.corr(method='spearman')
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
赤い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: 文字列を区切りで使う	sep = s
n掛けるn2	n * n2
データフレームの文字列をNaNにする	df.replace(s, np.nan)
現在のモジュールを	sys.modules[__name__]
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
２つのデータフレームを結合する	pd.merge(df, df2)
リストとリストの散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
列を等量でn個にビン分割する	pd.qcut(ds, n)
線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
実数を浮動小数点数で整数除算する	x // y
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
option: アンティークホワイトを使う	color = 'antiquewhite'
最小値でデータフレームのリスト列の未入力値を埋める	df[aList].fillna(df[aList].min())
option: 印を四角に変更する	marker = 's'
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
データフレームの列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
ベクトルの累積和	np.cumsum(aArray)
ファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
マップに別のマップのエントリを加えて、更新する	aDict.update(aDict2)
赤い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
データフレームを列にグループ分けして、それぞれのグループごとの分散を計算する	df.groupby(column).var()
既存のファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
散布図の丸マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
xを整数にする	int(x)
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
データフレームの列の文字列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
書き込み用にファイルを文字列の示す文字コードでオープンする]	open(filepath, mode='w', encoding=s)
'A'列を用いてデータフレームをソートする	df.sort_values(by='A')
シーケンスと列のデカルト積	itertools.product(iterable, iterable2)
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
色付きの点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
二つのカウンタのいずれかに含まれる要素を計算する	aCounter | aCounter2
相関を可視化する	plt.scatter(データ列x, データ列y)
回帰分析をガウス過程を用いて行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
列によってデータフレームを整列し、、新しいインデックスを加える	df.sort_values(columns).reset_index()
データフレームの列をインデックスに指定する	df.set_index(column)
散布図の大バツ印の色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
現在が月曜日か	datetime.datetime.today().weekday() == 0
マッピングの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
option: フォントの色をダークグリーンにセットする	color = 'darkgreen'
線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
nとn2の論理積を算出する	n & n2
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
データフレームのリストカラムの中にと文字列があるか調べる	df[aList].isin([value, value2])
カテゴリでグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
配列をビニングする	pd.cut(aArray, aList)
赤い大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: フォントの色をプラムにセットする	color = 'plum'
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図を用いてデータフレームの列を可視化する	sns.scatterplot(data=df, x='列名', y='列名')
リストから行列を作る	np.array(aList)
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ミディアムパープルを使う	color = 'mediumpurple'
標準入力から1行読み込む	sys.stdin.readline()
切り捨てながらnをn2分の１にする	n //= n2
option: 先頭のカラムを行に設定する	index_col = 0
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
リストとイテラブルについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
集合の変更不能版	frozenset(aSet)
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
イテラブルとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームを列の値でグループ化し、要約統計量を求める	df.groupby(column).describe()
文字列を最後の部分文字列で分割したときの最初の文字列	s.rpartition(sub)[0]
ヒストグラムの色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
データフレームのリストカラムの中にある日付データの個数を数える	df[aList].isin([value]).sum()
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
nが-9以上、9以下かどうか	-9 <= n <= 9
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
組を反転する	reversed(aTuple)
変数名をキーとして、辞書を作成する	dict(name=element)
散布図の印の色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
既存のファイルパスを文字コードtextを用いて追加できるように開く]	open(filepath, mode='a', encoding=text)
option: 色をシアンに変更する	color = 'cyan'
文字列中に日本語が含まれるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
文字列中の部分文字列の出現を数える	s.count(sub)
option: アクアにグラフの色を変更する	color = 'aqua'
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
データフレームを各列毎に集約して列の個数を計算する	df.groupby(column)[column2].count()
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: フォントの色をライトシアンに変更する	color = 'lightcyan'
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
配列の行ごとの合計	np.sum(aArray, axis=1)
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
1行から二つの浮動小数数を読む	A, B = map(float, input().split())
小数点数のアークコサイン	math.acos(x)
option: フォントの色をペルーに変更する	color = 'peru'
横棒グラフをゴールド色を用いて描画する	plt.barh(データ列x, データ列y, color='gold')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
option: サーモンを使う	color = 'salmon'
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
ペルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
文字列を部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
浮動小数点数を浮動小数点数で割った余り	x % y
option: ライトグリーンを用いる	color = 'lightseagreen'
二つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: ダークグレーにフォントの色を設定する	color = 'darkgray'
データフレームを十の位で丸める	df.round(-1)
option: フォントの色をライトブルーに指定する	color = 'lightblue'
predicateFuncを適用したとき真とならないリストの要素	itertools.dropwhile(predicateFunc, iterable)
列を累加したイテラブルを求める	itertools.accumulate(iterable)
option: 先頭の行をカラムの名前にする	header = 0
オブジェクトはタプル型か調べる	isinstance(obj, tuple)
線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
新しい勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
option: 先頭の行をヘッダに指定する	header = 0
両端キュー中の要素の数をカウントする	deq.count(element)
データフレームのリストカラムの欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
色付きの一点鎖線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
文字列を記号化して、変数にする	z = sympy.Symbol(s)
キーがマッピング上で未定義か	key not in aDict
グラフの見栄えをデフォルトでイイ感じに指定する	sns.set()
縦棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
正規化された度数分布図を描く	plt.hist(データ列, density=True)
データフレームを列によって集約して、各グループごとの合計を計算する	df.groupby(column).sum()
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフに黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
カウンタの項目数を使う	len(aCounter)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ダークバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
リストとリストについて散布図を描画してマーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムを珊瑚色として描画する	plt.hist(データ列, color='coral')
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
変数が無限大に近づくときの数値の極限値を算出する	sympy.limit(e, z, oo)
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
データフレームのリスト列の未入力値を前の行の値に設定する	df[aList].fillna(method='ffill')
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフの大バツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列を出力ストリームに書き込む	f.write(s)
スノー色を使ってヒストグラムを描画する	plt.hist(データ列, color='snow')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
option: 右三角マーカーを用いる	marker = '>'
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
文字列を文字コードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
option: マーカーを三角に指定する	marker = '^'
リストとデータ列について散布図を描画して、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
アクア色としてヒストグラムを描画する	plt.hist(データ列, color='aqua')
列を分割数nでビンニングする	pd.cut(ds, n)
色付きの破線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
整数の最大公約数	math.gcd(n, n2)
バイナリできるようにファイルを開く]	open(filepath, mode='rb')
上位集合か確認する	aSet.issuperset(aSet2)
ラインを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフをライトスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: 色をスラグレーに変更する	color = 'slategray'
一点鎖線にヒストグラムのラインスタイルを指定する	plt.hist(データ列, linestyle='dashbot')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
折れ線グラフをシアン色を使って描画する	plt.plot(データ列x, データ列y, color='cyan')
プロットの背景色を白くする	sns.set(style='whitegrid')
データフレームのカラムを整数に丸める	df[col].round()
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
数の複素数	complex(x)
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
各列毎にデータフレームを分類し、列の標準偏差を求める	df.groupby(column)[column2].std()
option: 丸マーカーを用いる	marker = 'o'
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
option: ミディアムオーキッドにフォントの色を変更する	color = 'mediumorchid'
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
濃く色テーマをグラフの描画で使う	sns.set(pallete='deep')
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
後の行の値でカラムの欠損値を埋める	ds.fillna(method='bfill')
データフレームを'A'列を用いてで破壊的にソートする	df.sort_values(by='A', inplace=True)
タイムスタンプデータを数値にする	aDatetime.timestamp()
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
ポスターにグラフを指定する	sns.set(context='poster')
データフレームの未入力値が含まれる箇所に色を付ける	df.style.highlight_null()
無限に文字列が続くイテラブル	itertools.repeat(element)
ヒストグラムを耐火レンガ色を用いて描画する	plt.hist(データ列, color='firebrick')
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
分類モデルを説明変数と目的変数を用いて学習する	model.fit(説明変数, 目的変数)
タプルのキーに対応した値	aDict.get(key)
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフの下三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
オブジェクトはリストクラスか	isinstance(obj, list)
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリスト列の基本統計量	df[aList].describe()
円周率を使う	math.pi
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図をスノー色として描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列が英数字かどうか調べる	s.isalnum()
整数nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
値を両端キューにエンキューする	deq.appendleft(element)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データフレームからn行サンプリングする	df.sample(n)
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
表の列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
印字可能な文字を全て使う	string.printable
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
データフレームを複数の列によって小さい順に並べる	df.sort_values(by=column, ascending=True)
リストとリストについて散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付データの曜日を見る	aDate.weekday()
２つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
双方向キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
データ列を10の位で四捨五入する	ds.round(-1)
実数を十六進文字列に変換する	x.hex()
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
グレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
xが-9以上9以下か	-9 <= x <= 9
ファイルが存在しないかテストする	not os.path.exists(filepath)
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
回帰分析をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の最初を使う	s[0]
カラムを丸めて、整数型にする	ds.round().astype(int)
nがn2で割り切れないかテストする	n % n2 != 0
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
昇順に列によってデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
値を太字で表示する	print(f'\033[1m{value}\033[0m')
リストが空か	len(aList) == 0
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
タイムスタンプデータの秒数	aDatetime.second
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
棒グラフをホワイト色として描画する	plt.bar(データ列x, データ列y, color='white')
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
ミディアムシアグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ビン数nを使って等量でデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
JSONLファイルにファイルとしてデータフレームを書き込む	df.to_excel(filename)
△マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
option: 色をグリーンイエローに設定する	color = 'greenyellow'
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
横棒グラフを描画し、下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームを関数でグループ化する	df.groupby(関数)
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
イテラブルと列のデカルト積	itertools.product(iterable, iterable2)
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
option: アスキー文字に限定する	flag = re.ASCII
データフレームの列の中にある文字列と文字列の合計をカウントする	df[col].isin([value, value2]).sum()
列のユニークな値の個数を確認する	ds.nunique()
データフレームを二つの列でグループ化し、基本統計量を求める	df.groupby(['A', 'B']).describe()
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
option: サーモン色を使用する	color = 'salmon'
ファイルパスのファイル名	os.path.basename(filepath)
横棒グラフをサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='salmon')
作画のグリッドを暗くする	sns.set(style='darkgrid')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
リストと配列について散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
n回の数値イテラブル	range(n)
要素を集合から取り除く	aSet.remove(element)
nをn2で割った値の切り上げを求める	(n + n2 - 1) // n2
異なる列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
初期値で全要素を初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
option: ダークシアンにグラフの色を指定する	color = 'darkcyan'
列'A'と列'B'をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
オブジェクトはリストかタプルかどうか	isinstance(obj, (list)
cosの逆数	math.acos(x)
クロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
双方向キューが空か確認する	len(deq) == 0
分割数nとして配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
浮動小数点数のn乗	x ** n
目盛線	plt.grid(linewidth=3.0)
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
リストを箱ひげ図にする	plt.boxplot(データ列)
特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームのリストカラムの分散を計算する	df[aList].var()
線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
整数nの8進表現	oct(n)
データフレームのリストカラムの中にある文字列の合計を求める	df[aList].isin([value]).sum()
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
再帰が何回までできるかを	sys.getrecursionlimit()
オブジェクトは浮動小数点数か判定する	isinstance(obj, float)
ファイルを書き込みモードとしてオープンする]	open(filepath, mode='w')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
ライトゴールドロディイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームを二つの列の値でグループ化する	df.groupby(['A', 'B'])
赤い点線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
部分文字列を文字列の末尾から探す	s.rfind(sub)
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: スチールブルーにグラフの色を指定する	color = 'steelblue'
実数を切り上げて整数にする	math.ceil(x)
オブジェクトが属性を持つか調べる	hasattr(obj, プロパティ名)
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
既存のファイルパスをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: オリーブ色を使用する	color = 'olive'
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
散布図の大バツ印を赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
縦棒グラフをプラム色を使って描画する	plt.bar(データ列x, データ列y, color='plum')
文字列の接頭辞が部分文字列	s.startswith(sub)
イテラブルを双方向キューに変換する	collections.deque(iterable)
文字列をコロンで分割して文字列リストに変換する	s.split(':')
実数に整数を掛ける	x * y
文字列が全て英数字	s.isalnum()
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
option: グラフの色をビスクに変更する	color = 'bisque'
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
ラインを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
日付データは何年か知る	aDate.year
カウンタの要素を増やす	aCounter[element] += 1
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
ゲインズボロ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルを改行除外して一行ずつ読み込む	f.readline()
全ての句点文字	string.punctuation
option: ブラックを使う	color = 'black'
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
日付時刻データは日付時刻データよりあとか調べる	aDatetime > aDatetime2
色付きの一点鎖線を用いてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
日付データは日付データより後ろかどうか調べる	aDate > aDate2
カラムの中にいくつ欠損値があるか数える	ds.isna().sum()
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
２つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
特異値分解で多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ケースを無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
rgbの星マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イテラブルとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
option: グラフの色をホワイトに指定する	color = 'white'
option: 平均を加える	showmeans = False
option: グラフの色をライトブルーに変更する	color = 'lightblue'
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
option: ポイント印を用いる	marker = '.'
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
データ列の平均を求める	ds.mean()
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: フォントの色を小麦色に設定する	color = 'wheat'
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
平方根	math.sqrt(x)
データフレームの中のカラムをn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
日付データが金曜日	aDate.weekday() == 4
データフレームが重複しているか	df.duplicated()
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
配列と同じ大きさの空行列を作る	np.empty_like(aArray)
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを各列毎に集約して、列の合計を求める	df.groupby(column)[column2].sum()
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
２つの最小値	min(x, y)
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
アクアマリン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
オブジェクトがリストに含まれないか調べる	element not in aList
配列の累積積を求める	np.cumprod(aArray)
両端キューを全て取り除く	deq.clear()
データフレームの中で何行重複するか見る	df.duplicated().sum()
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列の移り変わりを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列と配列について散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
スタックが空でないか調べる	len(deq) != 0
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
八進文字列をバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
カウンタをイテラブルをカウントして、更新する	aCounter.update(iterable)
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
option: フォントの色をゴールドに変更する	color = 'gold'
行列の最大	np.max(aArray)
日付時刻データが月曜日かどうか	aDatetime.weekday() == 0
２つのリストから辞書	dict(zip(aList, aList2))
nからn2までの整数リストを得る	list(range(n, n2+1))
リストの要素を並べ直す	sorted(aList)
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームの列の標準偏差	df[col].std()
データフレームの中にいくつ文字列があるか求める	df.isin([value]).sum()
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
日付データからn秒を減らす	aDate - datetime.timedelta(seconds=n)
option: 白を使う	color = 'white'
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
JSONLファイルにCSVファイルでデータフレームを保存する	df.to_csv(filename)
データ列とリストの散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図に赤い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
列'A'と列'B'をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: グラフの色を赤に指定する	color = 'red'
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの列を正規表現で一度にreplに置き換える	df[col].replace(pattern, repl, regex=True)
日付時刻データが金曜日か	aDatetime.weekday() == 4
データ列間のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
ベージュ色を使ってヒストグラムを描画する	plt.hist(データ列, color='beige')
句読点文字を全て使う	string.punctuation
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
オブジェクトに属性がある	hasattr(obj, プロパティ名)
ヒストグラムをバイオレット色を用いて描画する	plt.hist(データ列, color='violet')
オブジェクトをイテレータに変換する	iter(obj)
データフレームの指定した二つの列のみ抽出する	df[[column, column2]]
文字列をセンタリングする	s.center(文字列幅)
option: ライトグレーにグラフの色を指定する	color = 'lightgray'
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
範囲を指定して整数乱数を算出する	random.randint(最小値, 最大値)
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
型が名前付きタプルかテストする	issubclass(C, tuple)
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
1からNまでのベクトル	np.arange(1, N+1)
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
dateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
破壊的に'A'列によってでデータフレームを並べる	df.sort_values(by='A', inplace=True)
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
集合が空か	len(aSet) == 0
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
正規化された度数分布図をプロットする	plt.hist(データ列, density=True)
option: バリーウッドを使う	color = 'burlywood'
パーセント付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データ列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
nがセットのどれかかどうか調べる	n in aSet
アルファベットの小文字を全て使う	string.ascii_lowercase
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
浮動小数点数が負の数かどうか調べる	x < 0
リストとデータ列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの中の列を分割数nでビニングする	pd.cut(df[col], n)
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
option: 切片を計算しない	fit_intercept = False
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: フォントの色を小麦色に指定する	color = 'wheat'
配列の個数	aArray.size
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
半透明の実線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
カラムの空文字をドロップする	ds.replace('', np.nan).dropna()
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図に赤い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')

データフレームのカラムの第一四分位数	df[col].quantile(0.25)
カラーコードの大バツマーカーをリストと配列についての散布図にプロットする	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームから破壊的に重複するデータを削除する	df.drop_duplicates(inplace=True)
オプションで、出力先を標準出力に設定する	file = sys.stdout
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
グラフの用途をスライドに設定する	sns.set(context='talk')
リストとリストについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
UNIXコマンドtextを実行する	os.system(text)
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
最初のプログラムを書く	print('Hello World')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
標準出力を使う	sys.stdout
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
線グラフの色をライトグリーンにする	plt.plot(データ列, データ列2, color='lightgreen')
行列の列	aArray[:, 列番号]
文字列を緑色にする	f'\033[32m{value}\033[0m'
ファイル全体を行単位で分割して読み込む	f.readlines()
＜オプション＞バリーウッド色を使う	color = 'burlywood'
配列を平坦化する	aArray.flatten()
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
ヒストグラムを描画してその色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフの四角印の大きさをnに変更する	plt.plot(データ列, データ列2, marker='s', markersize=n)
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
ヒストグラムを描画して、その色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
＜オプション＞グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
リストを中央値でビン分割する	pd.qcut(aList, 2)
＜オプション＞グラフの色をゴールドにセットする	color = 'gold'
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
日付時刻データが何日か知る	aDatetime.day
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
二次元タプルをflattenする	sum(aTuple)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
カラムのpercent分位数	ds.quantile(percent/100)
ライトイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightyellow')
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
日付データが金曜日か調べる	aDate.weekday() == 4
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
カラーコードのバツマーカーをイテラブルとリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームの重複した行をマスクする	df.duplicated()
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
日付データが火曜日か調べる	aDate.weekday() == 1
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
0からnまでの整数列	list(range(n+1))
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
＜オプション＞SJISを使う	encoding = 'shift_jis'
＜オプション＞グラフの色をオレンジレッドに設定する	color = 'orangered'
nの桁数	len(str(n))
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
等しい量になるようにデータフレームの中の列をビン数nを使ってビン分割する	pd.qcut(df[col], n)
十六進文字列を整数に変換する	int(s, 16)
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
配列の要素ごとの積	np.multiply(aArray, aArray2)
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
nが偶数か調べる	n % 2 == 0
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
数式の数値を求める	float(e)
配列と数列についてパステル調のグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
＜オプション＞カデットブルー色を用いる	color = 'cadetblue'
文字列はタイトルケースか調べる	s.istitle()
マップのコピーを生成する	aDict.copy()
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
データ列の分	ds.dt.minute
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
nがn2で割り切れるか	n % n2 == 0
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
２つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞グラフの色をゴールデンロッドにする	color = 'goldenrod'
データ列を中央値でビン分割する	pd.qcut(ds, 2)
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
プラットホーム名	sys.platform
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
改行なしに二つの文字列をプリントする	print(value, value2, end='')
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
中央値で配列をビン分割する	pd.qcut(aArray, 2)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
実行結果を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
プログラムの実行を異常終了する	sys.exit(1)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
リスト中の最初の文字列を探す	aList.index(element)
イテラブルとリストについて破線グラフを描画し、、その色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
リストとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
二つの文字列は同じか調べる	s == s2
＜オプション＞ブール型を使う	dtype = np.int32
文字列の変数名を数式に変換する	sympy.Symbol(s)
データフレームの列を型にする	df[col] = df[col].astype(ty)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegoldenrod')
グラフをポスター用にセットする	sns.set(context='poster')
xを整数にする	int(x)
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
データ列の分散	ds.var()
折れ線グラフを描画してその色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
＜オプション＞フクシアを使用する	color = 'fuchsia'
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
連立方程式を解く	sympy.solve([e, e2])
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
＜オプション＞イエローグリーン色を使う	color = 'yellowgreen'
散布図を暗い色のマーカーを使って描画する	plt.plot(xdata, ydata, c='dark')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
二つの変数をそれぞれ定義する	x, y = i, j
リストとイテラブルの散布図を描画し、、マーカーを上三角に設定する	plt.plot(xdata, ydata, marker='^')
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
データフレームをTSVファイルとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
浮動小数点数の最大値	sys.float_info.max
文字列が正規表現にマッチさせる	re.match(pattern, s)
＜オプション＞スチールブルー色を使う	color = 'steelblue'
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
集合に要素を追加する	aSet.add(element)
折れ線グラフを描画して、色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
プロットの横軸にuntitledというラベルを設定する	plt.xlabel(untitled)
データフレームのカラムの値をValueMapでまとめて置換する	df[col].replace(ValueMap)
＜オプション＞オールドレース色を使う	color = 'oldlace'
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
実数の複素数	complex(x)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
文字列を左寄せにする	s.ljust(文字列幅)
ヒストグラムを描画して、その色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
数式の変数に数式を代入する	e.subs(z, e2)
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
本日の日付時刻	datetime.datetime.today()
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストと数列について淡い色の折れ線グラフを描いて線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
黒いバツマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='k')
文字列の右側から空白を取り除く	s.rstrip(' ')
オブジェクトのイテレータ	iter(obj)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
文字列がタプルの要素でないか調べる	element not in aTuple
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
有理数を使う	import fractions
文字列の両端から部分文字列を取り除く	s.strip(sub)
枠なしの凡例をグラフの中に入れる	plt.legend(frameon=False)
両端キューの大きさ	len(deq)
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
集合が空集合か	len(aSet) == 0
＜オプション＞グラフの色をゴールドに設定する	color = 'gold'
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
折れ線グラフに青い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
データフレームから列を二つ選択する	df[[column, column2]]
実数の双曲線正弦の逆数を求める	math.asinh(x)
データ列とリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
横棒グラフを描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
ファイル名がJSONファイルか調べる	filename.endswith('.json')
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
配列の形状	aArray.shape
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
データフレームを使用する	import pandas as pd
＜オプション＞3二ビット整数型を用いる	dtype = np.int16
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
要素をセットに追加する	aSet.add(element)
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
nullに等しい値	None
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
カラムの中に存在する日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
データ列を1000の位で丸める	ds.round(-3)
イテラブルから重複を取り除く	set(iterable)
プロット中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
浮動小数点数に実数を加算する	x + y
＜オプション＞グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
タプルの中の最大値	max(aTuple)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
10を底とする実数の対数を計算する	math.log10(x)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
＜オプション＞スレートブルー色を使う	color = 'slateblue'
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
データフレームのカラムの各データが何回出現するか見る	df[col].value_counts()
変数をスワップする	x, y = y, x
データフレームのカラムの時	df[col].dt.hour
データフレームのカラムの分散	df[col].var()
折れ線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
改行で文字列を区切る	s.splitlines()
nがn2以下か調べる	n <= n2
行列の行ごとの標準偏差	np.std(aArray, axis=1)
マップにキーワード引数で加えて、更新する	aDict.update(**kwargs)
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
nの三乗	n ** 3
スクリプトファイルのパスを使う	os.path.abspath(__file__)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
＜オプション＞セパレータをタブにする	sep = '\t'
タプルの要素をソートする	sorted(aTuple)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
実数のアークタンジェント	math.atan(x)
文字列内にASCII文字が含まれるか調べる	any(c.isascii() for c in s)
変数を緑色にする	f'\033[32m{value}\033[0m'
ファイルパスがあるか	os.path.exists(filepath)
＜オプション＞スラッシュをセパレータで使う	sep = '/'
タプルを反転する	reversed(aTuple)
＜オプション＞色をスラグレーに設定する	color = 'slategrey'
＜オプション＞分割記号を文字列にする	sep = s
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
データフレームの列の種類	df.info()
＜オプション＞グラフの色をシーグリーンに設定する	color = 'seagreen'
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
文字列ひとつのりストを得る	[element]
折れ線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
数式を変数についてn階微分する	sympy.diff(e, z, n)
真上位集合か調べる	aSet > aSet2
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
＜オプション＞グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
データフレームの名前リストで指定された列をドロップする	df.drop(columns, axis=1)
＜オプション＞マーカーを丸に変更する	marker = 'o'
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
リストの文字列が最初に見つかるインデックス	aList.index(element)
nを否定する	not n
タプルの最初の文字列を探す	aTuple.index(element)
折れ線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
日付データが金曜日か	aDate.weekday() == 4
二つの集合の∪	aSet.union(aSet2)
カンマで区切って2つの変数をプリントする	print(value, value2, sep=',')
n掛けるn2を求める	n * n2
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
本日の年を見る	datetime.datetime.today().year
リストとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
文字列が全て英数字か調べる	s.isalnum()
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
ファイルのファイルサイズ	os.path.get_size(filepath)
イテラブルの集合	set(iterable)
日付時刻データが何秒か知る	aDatetime.second
標準出力のバッファをフラッシュする	sys.stdout.flush()
折れ線グラフを描画して色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
＜オプション＞複素数型を使う	dtype = bool
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
折れ線グラフを描画して、色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データフレームのリスト列の標本標準偏差	df[aList].std()
＜オプション＞グラフの色を青に設定する	color = 'blue'
文字列中から部分文字列を探す	s.find(sub)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ユーザから入力される	int(input())
オブジェクトはタプルに含まれるか調べる	element in aTuple
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
＜オプション＞グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
組の要素を小さい方からソートする	sorted(aTuple, reverse=False)
＜オプション＞ディープスカイブルーにグラフの色をする	color = 'deepskyblue'
散布図にカラーコードのクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
＜オプション＞ライトブルー色を使う	color = 'lightblue'
数式の平方根を求める	sympy.sqrt(e)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
配列の累積和	np.cumsum(aArray)
ヒストグラムを描画して、その色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
カウンタからゼロカウントを削除する	+aCounter
マップの項目名を要素に変更する	aDict[key] = element
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームの行を範囲指定して抽出する	df[start:end]
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
実数を切り下げて整数に変換する	math.floor(x)
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
数列と数列を用いて暗いの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
文字列をセパレータで区切って、列挙する	s.split(sep)
ふたつのリストの積集合	list(set(aList) & set(aList2))
リストとリストの明るいグラフを描画し、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
整数nを二進表現にする	bin(n)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
変数を白色で表示する	print(f'\033[37m{value}\033[0m')
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
オブジェクトはリスト型のインスタンスか判定する	isinstance(obj, list)
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
＜オプション＞四角マーカーを描画する	marker = 's'
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
データフレームの尖度を計算する	df.skew()
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
nとn2の論理和	n | n2
折れ線グラフを描画して色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
文字列をn回だけ置換する	s.replace(sub, newsub, n)
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
カウンタをリストに変換する	list(aCounter)
リストの先頭	aList[0]
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
リストとデータ列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
文字列を積極的に小文字に変換する	s.casefold()
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
文字の文字コード	ord(ch)
bとn2から成るペア	(n, n2)
リスト内の要素が全て真か調べる	all(aList)
リストと配列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(xdata, xdata, label=s)
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
行列の行ごとの最大値	np.max(aArray, axis=1)
全要素を０で初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
＜オプション＞グラフの色をロイヤルブルーに変更する	color = 'royalblue'
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
文字コードに対応する文字	chr(unicode)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
数列とリストについての散布図をパステル調の色で描く	plt.plot(xdata, ydata, c='pastel')
オプションで、標準出力に出力する	file = sys.stdout
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
データフレームのカラムの中央値	df[col].median()
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
カウンタの上位を列挙する	aCounter.most_common(k)
文字列をセンタリングにする	s.center(文字列幅)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
実数を実数で割った余り	x % y
実数を二乗する	x ** 2
日付データをISO形式の文字列に変換する	aDate.isoformat()
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
データフレームを表示するとき、表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフを描画して、色を茶色に変更する	plt.plot(データ列, データ列2, color='brown')
８進数字を全部使う	string.octdigits
xが一桁の正の整数か調べる	0 <= x <= 9
配列の合計値	np.sum(aArray)
データ列を箱ひげ図にする	plt.boxplot(データ列)
実数から実数を引く	x - y
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
マルーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
プロットのパレットを濃くする	sns.set(pallete='deep')
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
＜オプション＞文字コードtextを使う	encoding = text
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
グラフを論文に設定する	sns.set(context='paper')
データフレームの中の欠損値の合計を数える	df.isna().sum()
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
ヒストグラムを描画して、その色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
表データを使う	import pandas as pd
イテラブルからサンプリングする	random.sample(iterable)
＜オプション＞グラフの色をリネンに設定する	color = 'linen'
nとn2の差	n - n2
暗い色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
＜オプション＞オレンジ色を使う	color = 'orange'
補足を入れる	plt.legend()
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
カラムの中に文字列があるかどうか調べる	ds.isin([value])
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
リストとデータ列の淡いを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
＜オプション＞シルバーにグラフの色をする	color = 'silver'
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
要素∉集合	element not in aSet
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
リストとリストの散布図を描画し、、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
＜オプション＞リネンを用いる	color = 'linen'
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
データフレームのリスト列の欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
明るいグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
2を底とする実数の対数	math.log2(x)
＜オプション＞ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
集合が空でないか調べる	len(aSet) != 0
折れ線グラフの色をライトイエローにする	plt.plot(データ列, データ列2, color='lightyellow')
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
文字列の右端から部分文字列を除去する	s.rstrip(sub)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
散布図をカラーコードのポイントマーカーとして描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
Pandasのバージョンを見る	print(pd.__version__)
nが奇数か	n % 2 == 1
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
文字列をプリントする	print(value)
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
タプルの全項目をクリアする	aDict.clear()
書き込み用にファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
整数nの八進表現	oct(n)
＜オプション＞グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームのリストカラムの中に日付データと文字列があるかどうか調べる	df[aList].isin([value, value2])
文字列はタプルの要素でないか調べる	element not in aTuple
データフレームを複数の列でグループ化し、記述統計量を求める	df.groupby(columns).describe()
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
イテラブルの全順列	itertools.permutations(iterable)
濃い色のマーカーを使って散布図を描画する	plt.plot(xdata, ydata, c='deep')
データフレームを列を用いてソートして、上位n件を取り出す	df.sort_values(columns).head(n)
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ロードされたモジュールの一覧	sys.modules
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフに丸マーカーを用いる	plt.plot(データ列, データ列2, marker='o')
nが負の数か調べる	n < 0
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
データフレームを各列毎に集約して列の平均値を算出する	df.groupby(column)[column2].mean()
縦棒グラフを描く	plt.bar(ラベル列, データ列)
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
＜オプション＞スプリンググリーン色を使う	color = 'springgreen'
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
日付時刻データをタプルに変換する	aDatetime.timetuple()
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
折れ線グラフのラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
リストとイテラブルについて淡いグラフを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
セットから任意の要素を取り出す	aSet.pop()
バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x')
データフレームを二つの列によってソートし、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
オブジェクトが整数クラス	isinstance(obj, int)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
＜オプション＞ダークオレンジ色を使う	color = 'darkorange'
データフレームを複数の列を用いて並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
文字列の後ろから部分文字列を探す	s.rfind(sub)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞バッファリングを無効にする	buffering = 0
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
二変数の最小値	min(x, y)
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データフレームから指定された列を抽出する	df[[column]]
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
リストをn倍する	aList * n
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
＜オプション＞インディアンレッドを用いる	color = 'indianred'
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列全体をパターンに大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
配列の平均値	np.mean(aArray)
データフレームの先頭n行	df.head(n)
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
辞書からキーの値をエラーなく得る	aDict.get(key, None)
データフレームがどの程度、分散しているか見る	df.var()
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
淡いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
グラフの用途をプレゼンに変更する	sns.set(context='talk')
列によってデータフレームをグループ化してそれぞれのグループごとの合計を求める	df.groupby(column).sum()
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
ダークスラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategray')
データフレームの欠損値をメディアンで補う	df.fillna(df.median())
赤い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
＜オプション＞追加モードに設定する	mode = 'a'
文字列をコロンで分割して列挙する	s.split(':')
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
リストとリストを連結する	aList + aList2
＜オプション＞ライトスカイブルーに色を設定する	color = 'lightskyblue'
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
データフレームのリストカラムを10の位で丸めて整数にする	df[aList].round(-1).astype(int)
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
折れ線グラフに線幅nの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
データフレームのリストカラムの分散	df[aList].var()
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
両端キューの先頭に要素を追加する	deq.appendleft(element)
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
本日が火曜日かどうか	datetime.datetime.today().weekday() == 1
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
整数nを十六進表現に変換する	hex(n)
原点から(実数,y)の距離	math.hypot(x, y)
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
配列とリストについての散布図を明るい色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
何回まで再帰ができるかを	sys.getrecursionlimit()
nからn2の値を引いてnに代入する	n -= n2
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
グラフで使うx座標の軸ラベルをuntitledに設定する	plt.xlabel(untitled)
文字列をセパレータで分割する	s.split(sub)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
日付時刻データが何時か知る	aDatetime.hour
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームのリストカラムの尖度	df[aList].skew()
nの2乗	n ** 2
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
数式の因数分解を行う	sympy.factor(e)
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
散布図を明るい色のマーカーで描く	plt.plot(xdata, ydata, c='bright')
数列とリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
文字列を下線付きで表示する	print(f'\033[4m{value}\033[0m')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
配列から重複を除いた配列を作る	np.unique(aArray)
データフレームの列を百の位で丸める	df[col].round(-2)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
グラフを描画する準備をする	from sympy import N
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
文字列を赤色にする	f'\033[31m{value}\033[0m'
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
文字列の両端から空白を取り除く	s.strip()
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、その色を紺に設定する	plt.hist(データ列, color='darkblue')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
データフレームを列でグループ分けして、グループごとの件数を知る	df.groupby(column).size()
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
＜オプション＞ディムグレーを使う	color = 'dimgrey'
ヒストグラムの色をパパイヤウィップにセットする	plt.hist(データ列, color='papayawhip')
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
黒い下三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
グラフ中の(x,y)の位置に凡例を入れる	plt.legend(loc=(x, y))
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
双方向キューの最初に要素を追加する	deq.appendleft(element)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
改行なしに数値を出力する	print(value, end='')
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データ列とリストで淡いグラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
実数を切り下げる	math.floor(x)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
配列とリストの散布図を描画し、、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
双方向キューをリストにする	list(deq)
列を等量で分割数nとしてビン分割する	pd.qcut(ds, n)
日付時刻データの月数	aDatetime.month
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
文字列が文字列より辞書順で後か調べる	s > s2
現在が何分か知る	datetime.date.today().minute
データフレームの列のpercent分位数	df[col].quantile(percent/100)
現在処理中の例外を情報	sys.exc_info()
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
列をいつまでも繰り返す	itertools.cycle(iterable)
線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
＜オプション＞マーカーをバツに変更する	marker = 'x'
リストとリストについての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
配列の次元を変形する	aArray.reshape(行数, 列数)
折れ線グラフを描画して、色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
文字列を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
文字列をシンボルにして、パラメータにする	z = sympy.Symbol(s)
線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
ファイルのファイル名	os.path.basename(filepath)
パステル調の色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='pastel')
データフレームを'A'列によってソートする	df.sort_values(by='A')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
ヒストグラムを描画して、その色をプラムに指定する	plt.hist(データ列, color='plum')
＜オプション＞読み込みモードに設定する	mode = 'r'
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームのカラムの中に含まれると文字列の数を求める	df[col].isin([value, value2]).sum()
正規表現を使う	import re
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
空白文字を全部使う	string.whitespace
JSONを使う	import json
＜オプション＞シアン色を使う	color = 'cyan'
全要素を初期値で初期化された行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
デックをデキューする	deq.popleft()
＜オプション＞ライトシアンを使う	color = 'lightcyan'
ヒストグラムを描画して、その色をベージュに設定する	plt.hist(データ列, color='beige')
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列は何曜日か見る	ds.dt.weekday_name
nが5で割り切れるか調べる	n % 5 == 0
数列と配列について破線グラフをプロットして、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
日付データが何曜日か知る	aDate.weekday()
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
＜オプション＞グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
二つのカウンタの共通する要素	aCounter & aCounter2
xを浮動小数点数型に変換する	float(x)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
スレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='slateblue')
線グラフを描画して、その色をダークグリーンにセットする	plt.plot(データ列, データ列2, color='darkgreen')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームを10の位で丸める	df.round(-1)
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
日付データが日付データより前	aDate < aDate2
配列を2次元1列に変形する	aArray.reshape(-1, 1)
nがn2より小さいかどうか確認する	n < n2
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
イテラブルとリストの散布図を描いて、マーカーの色を暗いにセットする	plt.plot(xdata, ydata, c='dark')
行列の列ごとの最大値	np.max(aArray, axis=0)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
二つのオブジェクトが同一参照か調べる	obj is obj2
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
xの絶対値	abs(x)
リストと数列で淡いの折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
事前に正規表現をコンパイルする	re.compile(pattern)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームの列の文字列長を列として使う	df[col].str.len()
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
＜オプション＞グラフの色をダークオーキッドにセットする	color = 'darkorchid'
等差数列から整数乱数を算出する	random.randrange(start, end, step)
ゼロ埋めされた符号なし８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.uint8)
両端キューの中に値があるかどうか調べる	element in deq
＜オプション＞改行の代わりに文字列を用いる	end = s
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
ヒストグラムを描画して、その色をマルーンに設定する	plt.hist(データ列, color='maroon')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
データフレームのリストカラムの欠損値を最頻値に変更する	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
文字列中の小文字を大文字に変換する	s.upper()
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
正規表現で一度にデータフレームのカラムの値を置き換える	df[col].replace(pattern, repl, regex=True)
列の値によってデータフレームをグループ化する	df.groupby(column)
線グラフの色を暗い赤に指定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフに丸マーカーを使う	plt.plot(データ列, データ列2, marker='o')
データフレームからn行、ランダムサンプリングする	df.sample(n)
配列を等しい量になるようにビン数nで分割する	pd.qcut(aArray, n)
印字可能な文字を全部使う	string.printable
現在のミリ秒	int(time.time() * 1000)
文字列にイテラブルを変換して、部分文字列で連結する	sub.join(map(str, iterable))
現在の再帰の最大回数	sys.getrecursionlimit()
両端キューの中に要素が含まれてるか調べる	element in deq
黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列が全て大文字か調べる	s.isupper()
日付データが何月か知る	aDate.month
リストとリストのカラーコードの色差別ないをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
線グラフを描画してその色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
リストを黄色にする	f'\033[33m{value}\033[0m'
データ列の平均値	ds.mean()
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
折れ線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
リストとデータ列の折れ線グラフを描画し、、色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
データフレームのカラムの名前を列から文字列に変更する	df.rename(columns={column: name})
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
画面用にグラフを指定する	sns.set(context='notebook')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
文字列を黄色にする	f'\033[33m{value}\033[0m'
Pandasで、文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
コマンドの第一引数	sys.argv[1]
データフレームを関数によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
日付データが日付データより前か調べる	aDate < aDate2
イテラブルとリストについて散布図をプロットしてマーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
二次元タプルをフラット化する	sum(aTuple)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
リストを黒色にする	f'\033[30m{value}\033[0m'
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
nプラスn2	n + n2
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
＜オプション＞ホットピンクを使う	color = 'hotpink'
行列を平坦化する	aArray.flatten()
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumaquamarine')
数値を簡単化する	sympy.sympify(e)
データフレームを1000の位で丸める	df.round(-3)
日付時刻データが何年か知る	aDatetime.year
二つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
実数がNaNか調べる	math.isnan(x)
文字列内に大文字が含まれるかどうか確認する	any(c.isupper() for c in s)
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
データ列と配列についての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
散布図に赤いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
リストとリストのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
方程式として数式の変数の解を求める	sympy.solve(e, z)
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
グラフで使える色名の一覧	matplotlib.colors.cnames
データ列を等量でn個に分割する	pd.qcut(ds, n)
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
文字列は全て十進数字	s.isdecimal()
折れ線グラフを描画して、その色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
両端キューから最初の要素を取り除く	deq.remove(element)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データ列をインポートする	import pandas as pd
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
実数のアークコサインを求める	math.acos(x)
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
自然対数	math.log(x)
黒色の三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='k')
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
辞書から項目名で指定したエントリをポップする	aDict.pop(key)
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームの列を削除する	df.drop(column, axis=1)
リストの末尾	aList[-1]
表データの列の文字列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
データフレームで列に重複があるか見る	df.duplicated(subset=column)
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
イテラブルの全順列を計算する	itertools.permutations(iterable)
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
＜オプション＞グラフの色をクリムゾンに設定する	color = 'crimson'
配列の行ごとの合計値	np.sum(aArray, axis=1)
配列を平坦にする	aArray.flatten()
アルファベットを全部使う	string.ascii_letters
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
データフレームの列をヒストグラムで可視化する	plt.hist(df[column])
リストのn番目からn2番目までの部分	aList[n:n2]
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
実数の天井	math.ceil(x)
グラフをポスター用に設定する	sns.set(context='poster')
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列, データ列2, color='lightcoral')
カラムのNaNをxに変更する	ds.fillna(x)
＜オプション＞マゼンタ色を使う	color = 'magenta'
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列, データ列2, color='darkgreen')
ヒストグラムを描画して色を白に設定する	plt.hist(データ列, color='white')
データフレームを列を用いて昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
リストと数列の折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
データ列を縦軸、リストを横軸に設定して、折れ線グラフをプロットする	plt.plot(xdata, ydata)
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
文字列を空白で区切って、文字列リストに変換する	s.split()
変数を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
ヒストグラムを描画して、その色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
＜オプション＞セパレータを文字列にする	sep = s
＜オプション＞バツマーカーを用いる	marker = 'x'
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
カウンタを辞書に変換する	dict(aCounter)
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
英字の小文字を全部使う	string.ascii_lowercase
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データ列の曜日が何日目か見る	ds.dt.dayofweek
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
データフレームのリスト列の相関行列をヒートマップとしてグラフ化する	sns.heatmap(df[aList].corr())
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
散布図を四角マーカーとして描く	plt.plot(xdata, ydata, marker='s')
カウンタ同士で積集合を求める	aCounter & aCounter2
文字列を文字リストにする	list(s)
＜オプション＞グラフの色をオールドレースに変更する	color = 'oldlace'
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
配列と配列について散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
複数カラムの散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
新しい文字列に回数を制限して文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
デックの順序を右にn個分輪番で回す	deq.rotate(n)
数値をマゼンタにする	f'\033[35m{value}\033[0m'
ヒストグラムを描画してその色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
データフレームを二つの列を用いて昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
配列の分散	np.var(aArray)
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
方程式の解	sympy.solve(e)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
リストを反転する	reversed(aList)
折れ線のラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
配列をn個にビニングする	pd.cut(aArray, n)
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
集合が空か調べる	len(aSet) == 0
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='deepskyblue')
文字列が空白文字からなるかどうか調べる	s.isspace()
＜オプション＞グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
実数を複素数に変換する	complex(x)
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
＜オプション＞スラグレー色を使う	color = 'slategray'
折れ線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
要素が辞書の値として含まれているか調べる	element in aDict.values()
グラフのタイトルをuntitledに設定する	plt.title(untitled)
データフレームのカラムの値がNaNか	df[col].isna()
本日の日付	datetime.date.today()
折れ線グラフを描画してその色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
データ列の中に存在する文字列の合計を求める	ds.isin([value]).sum()
データフレームのカラムがどの程度分散しているか見る	df[col].var()
＜オプション＞ブルーバイオレット色を使う	color = 'blueviolet'
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
文字列を式として評価する	eval(s)
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
双方向キューの末尾に列の各要素を入れる	deq.extend(iterable)
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
自分自身をモジュールとして	sys.modules[__name__]
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
ハローワールドとプリントする	print('Hello World')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
リストのn番目以降の部分を取り出す	aList[n:]
Pandasでデータフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
本日の月数	datetime.datetime.today().month
折れ線グラフを描画してその色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
データフレームのカラムが正規分布からどの程度、歪んでいるか調べる	df[col].kurt()
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
乱数平均と標準偏差からを計算する	random.normalvariate(mu=0.5, sigma=0.2)
データ列の曜日の名前を使う	ds.dt.weekday_name
無限にnから数え上げるする	itertools.count(start=n)
散布図に▲マーカーを使う	plt.plot(xdata, ydata, marker='^')
データフレームを使う	import pandas as pd
散布図に赤色の大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
データ列の最頻値	ds.mode()
３つの文字列を順に表示する	print(value, value2, value3)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
項目名がマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
折れ線グラフの印を三角にする	plt.plot(データ列, データ列2, marker='^')
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
＜オプション＞オリーブ色を使う	color = 'olive'
ヒストグラムを描画して、色をモカシンに変更する	plt.hist(データ列, color='moccasin')
ヒストグラムを描画して、その色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データフレームの中で列の重複を見る	df.duplicated(subset=column)
カウンタを辞書で更新する	aCounter.update(aDict)
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
文字列を置き換える	s.replace(sub, newsub)
rangeの無限バージョン	itertools.count(start=n, step=step)
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
文字列をバイト配列に変換する	bytearray(s)
データフレームから重複する行を消す	df.drop_duplicates()
ファイルをSJISとして書き込みできるように開く]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムを描画して、その色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
実数の絶対値	math.fabs(x)
８ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int8)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
試しに何か動かす	print('Hello World')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ファイルを全て読み込む	f.read()
タプルのn番目の	aTuple[n]
折れ線グラフのポイントマーカーを黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
折れ線グラフにサイズnの三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
横棒を描画し、、幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
イエローグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellowgreen')
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
＜オプション＞ハニーデューにグラフの色を設定する	color = 'honeydew'
折れ線グラフを描画して色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
空列	[]
データフレームのカラムを1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
データフレームを表示するとき小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
値をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
カラーコードの星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c=rgb)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
ヒストグラムを描画してその色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
データフレームの重複した行を数える	df.duplicated().sum()
日付時刻データの年数	aDatetime.year
縦方向に２つのデータフレームをくっつける	pd.concat([df, df2], axis=0)
リストとリストの破線グラフを描画してその色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフを描画して、その色をダークスラテグレーにセットする	plt.plot(データ列, データ列2, color='darkslategray')
列をリストを境界値としてビンニングする	pd.cut(ds, aList)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
デフォルトのエンコーディングを使う	sys.getdefaultencoding()
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategray'
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
＜オプション＞グラフの色をダークカーキに指定する	color = 'darkkhaki'
xとyの商と余りを同時に求める	divmod(x, y)
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
nはn2か調べる	n == n2
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
データフレームのリスト列の中のNaNの合計を数える	df[aList].isna().sum()
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
散布図に黒色の大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='k')
データ列を折れ線グラフに描画して、印を四角印にする	plt.plot(データ列, データ列2, marker='s')
文字列を右トリムする	s.rstrip()
＜オプション＞グラフの色をラベンダーに変更する	color = 'lavender'
リストとリストについての散布図にカラーコードの三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c=rgb)
明るいの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
集合から値を除く	aSet.remove(element)
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、その色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
プラットホームがLinuxかどうか調べる	sys.platform.startswith('linux')
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
リストを展開してプリントする	print(*aList)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
実数を十の位で丸める	round(x, -1)
区切りによって文字列を区切って、列挙する	s.split(sep)
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
ファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
両端キューが空でないか調べる	len(deq) != 0
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
部分文字列で文字列を二分し、前半の文字列を使う	s.partition(sub)[0]
データ列が何時か見る	ds.dt.hour
自然数最小公倍数	math.lcm(n, n2)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
配列をヒストグラムで可視化する	plt.hist(aArray)
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
実数を整数で割った余り	x % y
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
整数nを八進文字列に変換する	oct(n)[2:]
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
文字列が全てアルファベットか調べる	s.isalpha()
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
nがn2と等しいか調べる	n == n2
データフレームを丸めて、整数型にする	df.round().astype(int)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
＜オプション＞プラム色を使う	color = 'plum'
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
プラットホームがウィンドウズ	sys.platform.startswith('win32')
データフレームを昇順に列名リストを用いてソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
単位行列	np.eye(行数, 列数)
ヒストグラムを描画して色をリネンにセットする	plt.hist(データ列, color='linen')
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
データフレームから型の列のみ取り出す	df.select_dtypes(ty)
nをn2で割った余りをnに代入する	n %= n2
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
文字列の左側からタブを除去する	s.lstrip('\t')
ベクトルを元に全要素が初期値の行列	np.full_like(aArray, 初期値)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
実数の逆正接	math.atan(x)
文字列の左側から空白を取り除く	s.lstrip(' ')
データ列の年	ds.dt.year
線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
サイコロと同じ乱数	random.randint(1, 6)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
nが5の倍数か調べる	n % 5 == 0
有理数の分子	q.numerator
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
実数が正の数か調べる	x > 0
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
データフレームのカラムの分	df[col].dt.minute
データフレームを列によってソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
データ列を使う	import pandas as pd
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
小数点数の小数部を求める	math.modf(x)[0]
データ列の曜日の名前	ds.dt.weekday_name
データフレームからランダムに抽出する	df.sample()
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
折れ線グラフを描画して、その色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
折れ線グラフにクロスマーカーを使う	plt.plot(データ列, データ列2, marker='x')
プロットを色差別なくする	sns.set(pallete='colorblind')
折れ線グラフに四角印を使用する	plt.plot(データ列, データ列2, marker='s')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
データフレームを各列毎にグループ化し、、列の合計を算出する	df.groupby(column)[column2].sum()
実数の双曲線正接	math.tanh(x)
二つの列によってでデータフレームを降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
行列の行	aArray[行番号]
スクリプトの名前	sys.argv[0]
折れ線グラフに黄色い星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
赤い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
文字列の長さ	len(s)
データフレームのリスト列のNaNを最小値に指定する	df[aList].fillna(df[aList].min())
＜オプション＞暗い赤色を使う	color = 'darkred'
線幅nの大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
配列とリストの散布図を描き、、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
疑似乱数を発生させる	random.random()
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
直前の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='ffill')
文字列がタプルに含まれるか調べる	element in aTuple
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
＜オプション＞色をスノーに変更する	color = 'snow'
名前付きタプルを使用する	import collections
破線グラフの色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
文字列の右側から空白を取り除く	s.rstrip()
直後の値でカラムの欠損値を埋める	ds.fillna(method='bfill')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
データ列の中に文字列があるか調べる	ds.isin([value])
データフレームを'A'列と'B'列を用いて小さい順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
プロットで使うフォントをfontNameに指定する	sns.set(font=fontName)
空のチェーンマップ	collections.ChainMap()
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ファイルを開いて]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
1からnまでの整数リストを求める	list(range(1, n+1))
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
イテラブルと数列についてカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとリストの破線を描き、、色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
実数の指数	math.frexp(x)[1]
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
日本語が文字列に含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
＜オプション＞ミディアムターコイズにグラフの色を指定する	color = 'mediumturquoise'
文字列を正規表現で分割する	re.split(pattern, s)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
未定値	None
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
空の辞書	{}
エンコーディング	sys.getdefaultencoding()
リストの全要素を取り除く	aList.clear()
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
＜オプション＞複数行に対応する	flag = re.MULTILINE
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
プラットフォームの符号付き整数の最大値	sys.maxsize
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
データフレームの列の中に日付データとが含まれるか	df[col].isin([value, value2])
オブジェクトは整数クラスか調べる	isinstance(obj, int)
第二引数で指定されたファイルの名前	sys.argv[1]
データ列と配列の散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
文字列をトリムする	s.strip()
配列の最小値	np.min(aArray)
数式の積分を求める	sympy.integrate(e)
＜オプション＞バイナリモードを使う	mode = 'rb'
＜オプション＞スノー色を使う	color = 'snow'
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
データフレームのリストカラムの要約統計量	df[aList].describe()
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
リストに文字列を追加する	aList.append(element)
文字列を部分文字列で分けたときの最初の文字列を使う	s.partition(sub)[0]
カウンタをリセットする	aCounter.clear()
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
赤い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
グラフに凡例を入れる	plt.legend()
データ列を使用する	import pandas as pd
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフの三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
カラーバーを水平につける	plt.colorbar(orientation='horizontal')
nを8進文字列に変換する	oct(n)[2:]
折れ線グラフに大きさnの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
データフレームのカラムの欠損値を第二四分位数に設定する	df[col].fillna(df[col].median())
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
文字列モジュールをインポートする	import string
三変数の最小値	min(x, y, z)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムを描画してその色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
データフレームを二つの列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
赤い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
複数の列によってデータフレームをまとめた表	df.groupby(columns)
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
nがn2で割り切れないか調べる	n % n2 != 0
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
ヒストグラムを描画して、色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
両端キューの先頭	deq[0]
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
整数nを半分にする	n //= 2
JSON形式の文字列を読み込む	json.loads(jsonString)
＜オプション＞改行しない	end = ''
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
自然数の順列の総数	math.perm(n)
折れ線グラフを描画して、その色をミッドナイトブルーに変更する	plt.plot(データ列, データ列2, color='midnightblue')
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
nがn2の倍数か調べる	n % n2 == 0
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームからn行、サンプリングする	df.sample(n)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
実数の双曲線正弦の逆数	math.asinh(x)
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
列を配列に変換する	np.array(iterable)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
バイトオーダを知る	sys.byteorder
ポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.')
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
タプル内の要素が全て真か調べる	all(aTuple)
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
実数のn乗の実数剰余を計算する	pow(x, n, y)
ファイルを一行ずつ読み込む	f.readline()
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
データフレームのインデックスをリセットする	df.reset_index()
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
リストとリストのパステル調のグラフを描いてその色を黒色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
全ての８進数字	string.octdigits
折れ線グラフを描画して、その色をダークマゼンタに指定する	plt.plot(データ列, データ列2, color='darkmagenta')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
数式の展開を行う	sympy.expand(e)
ふたつの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
＜オプション＞モカシン色を使う	color = 'moccasin'
＜オプション＞グラフの色をデピンクに設定する	color = 'deeppink'
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
ヒストグラムの色をシスルにセットする	plt.hist(データ列, color='thistle')
データフレームのカラムを10の位で丸める	df[col].round(-1)
文字列がリストに含まれる	element in aList
データ列とデータ列について散布図を描いて、バツマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
イテラブルをy軸配列を横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
文字列リストを連結する	''.join(aStringList)
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
行列の要素ごとの積	np.multiply(aArray, aArray2)
辞書の値の一覧	aDict.values()
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
ヒストグラムを描画して、その色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフの三角マーカーのサイズをnに指定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
リストとリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
＜オプション＞バツマーカーを描画する	marker = 'x'
データ列の母標準偏差	ds.std(ddof=0)
組をひとつ置きに取り出す	aTuple[::2]
折れ線グラフを描画する	plt.plot(xdata, ydata)
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
データフレームの平均値	df.mean()
黒い上三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データ列の中の欠損値の合計を数える	ds.isna().sum()
リストが空でないか調べる	len(aList) != 0
散布図を▲マーカーで描画する	plt.plot(xdata, ydata, marker='^')
文字列はリストに含まれないか調べる	element not in aList
ヒストグラムを描画してその色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
実数の常用対数	math.log10(x)
＜オプション＞グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データ列を折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
nをn2乗に増やす	n **= n2
文字列が全てアスキー文字か調べる	s.isascii()
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
nが一桁の数か調べる	-9 <= n <= 9
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフの右三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
配列が何次元か	aArray.ndim
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
nにn2を足して代入する	n += n2
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
赤色の下三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
ヒストグラムを描画して、色をオレンジに設定する	plt.hist(データ列, color='orange')
＜オプション＞黄緑を使う	color = 'chartreuse'
配列の和	aArray + aArray2
ペルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='peru')
データフレームの指定された列を抽出する	df[column]
データフレームを列の値でグループ化し要約統計量を求める	df.groupby(column).describe()
現在のエポック	int(time.time())
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
カラーコードの星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
折れ線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
nをn2だけ増加させる	n += n2
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームのリストカラムのNaNを直後の値に指定する	df[aList].fillna(method='bfill')
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
書式を辞書でフォーマットする	formatText.format_map(aDict)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
全ての八進数字	string.octdigits
データフレームを100の位で丸めて、整数にする	df.round(-2).astype(int)
オブジェクトのメモリビュー	memoryview(obj)
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームを大きい順に破壊的に列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
aListn番目から要素をポップする	aList.pop(n)
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
折れ線グラフを描画して、その色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞グラフの色をバリーウッドに設定する	color = 'burlywood'
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
インデント幅nで、タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データフレームの列がxより多くx2より少ない行を取り出す	df[(x < df[column]) & (df[column] < x2)]
＜オプション＞EUCを使う	encoding = 'euc_jp'
データフレームの重複を見る	df.duplicated()
配列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumseagreen')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
実数が有限	math.isfinite(x)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
データフレームの列がxの行を抽出する	df[df[column] == x]
＜オプション＞データ型を指定する	dtype = np.uint8
重なりを見やすくデータ列と配列の散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
配列とリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
グラフの中のy軸の軸ラベルをuntitledに設定する	plt.ylabel(untitled)
データ列を丸めて、整数型にする	ds.round().astype(int)
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
nの十六進文字列	hex(n)[2:]
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
空文字	''
＜オプション＞グラフの種類を破線に設定する	linestyle = 'dashed'
タプルをnからナンバリングする	enumerate(aTuple, start=n)
データフレームのリストカラムを100の位で四捨五入する	df[aList].round(-2)
カウンタの最頻出な項目	aCounter.most_common()[0]
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
データフレームを関数でまとめたグループ	df.groupby(関数)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
実数の正接	math.tan(x)
＜オプション＞青色を使う	color = 'blue'
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
データ列を100の位で丸める	ds.round(-2)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
ユーザが整数を入力する	int(input())
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
実数のn乗	pow(x, n)
データフレームを列の値によってグループ化し、各グループ毎の分散を求める	df.groupby(column).var()
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
＜オプション＞グラフの色をタンに設定する	color = 'tan'
データフレームを各列毎にグループ化して文字列というグループを求める	df.groupby(column).get_group(s)
ヒストグラムを描画して、色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
タプルを展開してプリントする	print(*aTuple)
列から新しい計数器を作る	collections.Counter(iterable)
＜オプション＞ダークグリーンを使用する	color = 'darkgreen'
イテラブルのセットを使う	set(iterable)
代数計算を使う	import sympy
リストのn番目に文字列を挿入する	aList.insert(n, element)
データフレームからランダムにn行を抽出する	df.sample(n)
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
xを整数に変換する	int(x)
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
文字列の開始位置からと終了位置の範囲に部分文字列が存在する	s.find(sub, start, end) != -1
ヒストグラムを描画して、その色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
データ列を折れ線グラフに描画して、マーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
折れ線グラフの△マーカーを黒色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
日付時刻データの秒数	aDatetime.second
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
二つの文字列は等しくないか調べる	s != s2
リストのn番目の要素を削除する	del aList[n]
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
数式を簡単にする	sympy.sympify(e)
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
文字列の出力を改行なしに行う	print(value, end='')
＜オプション＞ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
＜オプション＞ディムグレー色を使う	color = 'dimgray'
文字列を部分文字列で区切る	s.split(sub)
行列の行ごとの最小値	np.min(aArray, axis=1)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
ヒストグラムを描画して、その色を濃い青に設定する	plt.hist(データ列, color='darkblue')
データフレームの欠損値をxで埋める	df.fillna(x)
ふたつの集合の和集合	aSet.union(aSet2)
リストとリストのカラーコードの明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
折れ線グラフに緑色の三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
＜オプション＞フローラルホワイト色を使う	color = 'floralwhite'
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
＜オプション＞ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
書き込み用にファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='w', encoding=s)
リストとリストについて濃い色の折れ線グラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='deep')
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
nの各桁の総和	sum(map(int, str(n)))
両端キューをポップする	deq.pop()
データ列をヒストグラムで可視化する	plt.hist(ds)
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
整数nがタプルのどれかか調べる	n in aTuple
タプルの先頭	aTuple[0]
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
文字列中に非アスキー文字が含まれるかどうか確認する	any(not c.isascii() for c in s)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
データ列は何年か見る	ds.dt.year
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
赤色の右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
リストと配列について散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
カウンタ同士でユニオン演算する	aCounter | aCounter2
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
ヒストグラムを描画して、その色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
＜オプション＞ゲインズボロに色を設定する	color = 'gainsboro'
文字列がリストの要素でないか調べる	element not in aList
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
本日が日曜日か確認する	datetime.datetime.today().weekday() == 6
＜オプション＞グレーにグラフの色を設定する	color = 'grey'
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
本日は何曜日か知る	datetime.datetime.today().weekday()
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
JSONファイルのfをデータに変換する	json.load(fin)
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
アヤメのデータセットをロードする	sns.load_dataset('iris')
データフレームを表示するとき、表示できる最大行数をnに変更する	pd.set_option('display.max_rows', n)
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
イテラブルを集合に変換する	set(iterable)
リストと数列の色差別ないを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
nをn2で整数除算する	n // n2
リストの要素を昇順にソートする	sorted(aList, reverse=True)
横棒グラフの色をカラーコードに変更する	plt.barh(ラベル列, データ列, color=rgb)
＜オプション＞読むシートの名前をnamesに設定する	sheet_name = names
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
グラフをスライド用に設定する	sns.set(context='talk')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
リストの末尾にリストを追加する	aList.extend(aList2)
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
グラフで使うカラーテーマをpalleteNameに設定する	sns.set(pallete=palleteName)
オブジェクトが数値か確認する	isinstance(obj, (int,float))
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
リストとリストの暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列の欠損値をxに設定する	ds.fillna(x)
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
＜オプション＞色をミントクリームに設定する	color = 'mintcream'
リストを横軸と指定して、リストの移り変わりをプロットする	plt.plot(range(len(xdata)), xdata)
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
パステル調の色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
黒いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
オブジェクトが浮動小数点数クラスのインスタンスか調べる	isinstance(obj, float)
標準エラーを得る	sys.stderr
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
ヒストグラムを描画して、その色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
値が集合のメンバーでないか調べる	element not in aSet
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
ヒストグラムを描画して、その色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
実数の余弦	math.cos(x)
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞チョコレート色を使う	color = 'chocolate'
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
xが一桁の正の数か調べる	0 <= x <= 9
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
nがn2より小さいか調べる	n < n2
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
リストを累加したイテラブル	itertools.accumulate(iterable)
項目名が辞書にある	key not in aDict
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
パステル調の色で散布図を描画する	plt.plot(xdata, ydata, c='pastel')
＜オプション＞クリムゾン色を使う	color = 'crimson'
イテラブルとイテラブルについての散布図をパステル調の色で重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
タプルを引数として展開して表示する	print(*aTuple, sep=',')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
0からnまでのスライス	slice(n)
＜オプション＞色をレベッカパープルに設定する	color = 'rebeccapurple'
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
実数から整数を引く	x - y
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
データ列をインポートする	import pandas as pd
プロットで日本語を表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
タプルのn番目以降の部分を取り出す	aTuple[n:]
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームのカラムが何年か見る	df[col].dt.year
無限大	math.inf
nとkのコンビネーション	math.comb(n, k)
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
eの乗数	math.exp(x)
グラフに水平方向の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
リストとリストについて散布図を描画する	plt.scatter(xdata, ydata)
数式の簡略化を行う	sympy.sympify(e)
＜オプション＞色をモカシンに変更する	color = 'moccasin'
文字列が全て空白文字からなるか調べる	s.isspace()
リストからオブジェクトを取り除く	aList.remove(element)
＜オプション＞ミディアムブルーに色を変更する	color = 'mediumblue'
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
配列とリストで濃いの折れ線をプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
データ列のどの値が頻出か見る	ds.mode()
リストの中の最小値	min(aList)
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
線グラフを描画して、その色をアイボリーに変更する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
＜オプション＞マーカーを左三角に変更する	marker = '<'
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
線グラフの色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
＜オプション＞青緑色を使う	color = 'teal'
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
データフレームの列をインデックスに設定する	df.set_index(column)
３つのデータフレームを横方向に一つにする	pd.concat([df, df2, df3], axis=1)
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
アルファベットの大文字を全部使う	string.ascii_uppercase
エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
オブジェクトはある型	isinstance(obj, クラス)
＜オプション＞パールゴールデンロッドにグラフの色をセットする	color = 'palegoldenrod'
＜オプション＞色をグレーに設定する	color = 'gray'
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
集合をタプルに変換する	tuple(aSet)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
実数のn乗の実数剰余	pow(x, n, y)
文字列のn番目	s[n]
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
サイコロ	random.randint(1, 6)
グラフの描画で明るいパレットを用いる	sns.set(pallete='bright')
本日のタイムスタンプ	datetime.datetime.today()
リストをランダムにシャッフルする	random.shuffle(aList)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
本日が何曜日か知る	datetime.datetime.today().weekday()
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
数式を数値に変換する	float(e)
ヒストグラムを描画して色をグレーにセットする	plt.hist(データ列, color='gray')
疑似乱数を生成する	random.random()
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
2進対数を求める	math.log2(x)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
＜オプション＞ライトスカイブルー色を使う	color = 'lightskyblue'
キーがマッピングに存在しているか調べる	key in aDict
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
整数nの八進文字列	oct(n)[2:]
ファイルからの入力ストリームを使う	open(filepath)
線グラフを描画してその色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<')
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
データフレームを一度に丸める	df.round()
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
カウンタから辞書を引く	aCounter.subtract(aDict)
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
nがn2以下、それか、n3以上	n <= n2 or n >= n3
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
データフレームの列のユニークな要素数	df[col].nunique()
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
データフレームを各列と列の組み合わせ毎に集約し、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
データフレームを'A'列で大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
タプルを逆順にする	aTuple[::-1]
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
グラフの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
ひとつでも英字が文字列内に含まれる	any(c.isalpha() for c in s)
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
文字列を部分文字列で二分する	s.partition(sub)
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
文字列のケースを変換する	s.casefold()
要素ひとつのりスト	[element]
オブジェクトが辞書かどうか調べる	isinstance(obj, dict)
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
xでデータフレームのカラムの欠損値を補う	df[col].fillna(x)
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
nではない	not n
オブジェクトはバイト列クラス	isinstance(obj, bytes)
ファイルのディレクトリ名	os.path.dirname(filepath)
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
ヒストグラムを描画して、その色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
＜オプション＞ブラック色を使う	color = 'black'
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
数のn乗して実数による余り	pow(x, n, y)
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列の無限イテラブル	itertools.repeat(element)
ベクトルの型を算出する	aArray.dtype()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
両端キューの要素をインプレースに反転する	deq.reverse()
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
文字列の右側からタブを取り除く	s.rstrip('\t')
配列と配列についての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
データフレームを二つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞UTF8を使う	encoding = 'utf-8'
三整数の最小公倍数を計算する	math.lcm(n, n2, n3)
行列を2次元1列に変形する	aArray.reshape(-1, 1)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
実数が正の数か	x > 0
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
散布図にカラーコードの下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c=rgb)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
＜オプション＞ゲインズボロ色を使う	color = 'gainsboro'
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
行列と同じ大きさの空の行列を作る	np.empty_like(aArray)
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
黄色い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='y')
全要素を０で初期化された整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
明るいの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
配列とリストの散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
両端キューの末尾に要素を追加する	deq.append(element)
＜オプション＞クリムゾン色を用いる	color = 'crimson'
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
＜オプション＞namesをカラムの名前に設定する	names = names
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
淡い色で散布図を描画する	plt.plot(xdata, ydata, c='muted')
データフレームの指定された列を配列に変換する	df[column].values
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
両端キューをタプルに変換する	tuple(deq)
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkseagreen')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
文字列が平仮名	('ぁ' <= ch <= 'ん')
コマンドライン引数	sys.argv
変数を定義する	x = n
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
nがn2よりも小さい	n < n2
＜オプション＞カンマをセパレータで使う	sep = ','
ベクトルの標準偏差を求める	np.std(aArray)
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
データフレームから指定された二つの列を抽出する	df[[column, column2]]
２つの実行結果を改行で区切って出力する	print(value, value2, sep='\n')
データフレームをJSONLファイルにCSVで書き込む	df.to_csv(filename)
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
n個の数値イテラブル	range(n)
＜オプション＞パウダーブルー色を使う	color = 'powderblue'
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
実数を実数で割って、切り捨てる	x // y
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
＜オプション＞namesを列の名前にする	names = names
データ列がどの程度、分散しているか見る	ds.var()
折れ線グラフの三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
文字列を改行で区切る	s.splitlines()
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
データフレームのカラムのどの値が頻出か見る	df[col].mode()
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
ディレクトリ	os.getcwd()
実数の三乗	x ** 3
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
イテラブルとリストについて散布図を描画し、、文字列という凡例用のラベルを設定する	plt.scatter(xdata, xdata, label=s)
濃いの色を赤くする	plt.plot(xdata, ydata, linestyle='deep', color='r')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkturquoise')
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
文字列はリストの要素かどうか調べる	element in aList
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
データフレームの要約統計量	df.describe()
散布図に黒色の下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
nが2で割り切れないか調べる	n % 2 == 1
リストの中の一番小さい値を求める	min(aList)
両端キューのn番目	deq[n]
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
辞書のキー一覧を見る	list(aDict)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
データ列の第三四分位数	ds.quantile(0.75)
オブジェクトのクラス	type(obj)
両端キューの長さを制限する	collections.deque(maxlen=n)
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dodgerblue')
オプションで、標準エラーを出力にする	file = sys.stderr
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
実数が負	x < 0
データ列とリストの散布図を淡い色として描画する	plt.plot(xdata, ydata, c='muted')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
二つのオブジェクトが同一参照かどうか	obj is obj2
データフレームのカラムの欠損値を最大値に変更する	df[col].fillna(df[col].max())
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
文字列の開始位置より後に部分文字列がある	s.find(sub, start) != -1
nをn2だけ右シフトする	n >> n2
折れ線グラフに描画して印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
キューが空でない	len(deq) != 0
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
現在が水曜日	datetime.datetime.today().weekday() == 2
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列がリストに含まれないか調べる	element not in aList
初期値で全要素を初期化された配列	np.full(要素数, 初期値, dtype=np.int)
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
色差別ない色で数列とデータ列についての散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
＜オプション＞色をナバホホワイトに設定する	color = 'navajowhite'
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
Pandasのバージョンを表示する	print(pd.__version__)
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
文字列をシンボルに変換する	sympy.Symbol(s)
データフレームの各グループごとの最大値	df.groupby(column).max()
nがセットのどれかか確認する	n in aSet
ユーザの入力を整数として受け取る	int(input())
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
色差別ないの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
タブ	'\t'
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
散布図に菱形マーカーを使う	plt.plot(xdata, ydata, marker='D')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
改行	'\n'
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
カーキにヒストグラムの色を変更する	plt.hist(データ列, color='khaki')
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
ファイルからファイル名を使う	os.path.basename(filepath)
列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
データフレームから指定されたデータ型のカラム名一覧を使う	df.select_dtypes(型).columns
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームのカラムが何秒か見る	df[col].dt.second
実数のn乗	x ** n
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
データフレームの中で何行、重複するか見る	df.duplicated().sum()
ベクトルの分散を求める	np.var(aArray)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
データフレームのstart行目からend行目まで抽出する	df[start:end]
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
日付時刻データの時間	aDatetime.hour
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
辞書をカウンタに変換する	collections.Counter(aDict)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
＜オプション＞グラフの色をピーチパフに設定する	color = 'peachpuff'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
リストと配列の折れ線を描画し、、透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
データ列の各データが何回出現するか見る	ds.value_counts()
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
ファイルをバイナリ用に開く]	open(filepath, mode='rb')
＜オプション＞グラフの色をピーチパフに指定する	color = 'peachpuff'
リストとリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
カウンタの要素を列挙する	aCounter.keys()
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
日付データが日付データと同時か調べる	aDate == aDate2
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
グラフの見栄えをデフォルトでいい感じに変更する	sns.set()
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
＜オプション＞グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
連立方程式の解を算出する	sympy.solve([e, e2])
nをn2分の一にする	n /= n2
散布図にカラーコードの大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞線種を実線に設定する	linestyle = 'solid'
＜オプション＞オリーブを使う	color = 'olive'
データフレームのカラムの第二四分位数	df[col].median()
配列の列ごとの平均値	np.mean(aArray, axis=0)
ファイルをクローズする	f.close()
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
辞書にキーワード引数で更新する	aDict.update(**kwargs)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
分子割る分母	fractions.Fraction(分子, 分母)
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
データフレームを列によってグループ化して、平均値を求める	df.groupby(column).mean()
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データ列の未入力値を平均値で埋める	ds.fillna(ds.mean())
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムを描画して、その色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
辞書を階層化する	collections.ChainMap(aDict)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
データフレームの相関行列を計算する	df.corr()
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
n個の整数列	list(range(n))
リストの長さ	len(aList)
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
ヒストグラムを描画してその色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
データ列を小数点以下n桁で四捨五入する	ds.round(n)
標準入力を使う	sys.stdin
文字列の先頭	s[0]
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
最後の部分文字列で文字列を二分する	s.rpartition(sub)
＜オプション＞コーラル色を使う	color = 'coral'
暗いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
データフレームを複数の列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
文字列を末尾から空白で区切る	s.rsplit()
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
＜オプション＞貝殻色を使う	color = 'seashell'
anemptystring	''
0からNまでの行列を作る	np.arange(N)
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
グラフの描画で濃い色テーマを用いる	sns.set(pallete='deep')
最初の列をデータフレームから消す	df[df.columns[1:]]
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
組の長さを知る	len(aTuple)
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
データ列のpercent分位数	ds.quantile(percent/100)
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
日付データをタプルに変換する	aDate.timetuple()
本日が何月か知る	datetime.datetime.today().month
タプルの長さ	len(aTuple)
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
一点鎖線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
ビン数nとして等量でリストをビン分割する	pd.qcut(aList, n)
データ列が何分か見る	ds.dt.minute
リストをナンバリングする	enumerate(aList)
リストと数列の破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームを二つの列でまとめたグループ	df.groupby(['A', 'B'])
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
ピアソン相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
二つの文字列を辞書順で比較する	s < s2
整数nのバイト長	(n.bit_length() + 7) // 8
日付時刻データが何月か知る	aDatetime.month
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
文字コードを文字に変換する	chr(unicode)
整数nが配列のどれかかどうか調べる	n in aArray
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
日付時刻データの日付	aDatetime.date()
データフレームのカラムを1000の位で丸める	df[col].round(-3)
データフレームの中の列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
辞書のキーを列挙する	list(aDict)
実数の二乗	x ** 2
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
nとn2が等しいか調べる	n == n2
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
第一引数で指定されたファイルの名前	sys.argv[1]
実数を実数で整数除算する	x // y
上位集合もしくは等しいか調べる	aSet > aSet2
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
配列と配列について散布図を描画し、マーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
データ列が何月か確認する	ds.dt.month
データフレームのリストカラムの中に含まれる文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
データフレームを'A'列と'B'列を用いてソートする	df.sort_values(by=['A', 'B'])
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
折れ線グラフの色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
文字列が全て小文字か調べる	s.islower()
黒色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
整数nの8進数文字列	oct(n)[2:]
文字列を空白で分割して、整数リストに変換する	map(int, s.split())
散布図を下三角マーカーを用いて描画する	plt.plot(xdata, ydata, marker='v')
配列とリストの黒色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
重なりを見やすく暗い色でイテラブルとデータ列の散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データ列の母標準偏差を求める	ds.std(ddof=0)
リストの最後の要素	aList[-1]
データフレームの列と列の相関行列	df[[column, column2]].corr()
折れ線グラフに大きさnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データ列の尖度	ds.skew()
グラフのサイズを設定する	plt.figure(figsize=(width, height))
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
折れ線グラフを描画してその色を青紫に指定する	plt.plot(データ列, データ列2, color='violet')
数式を方程式として解く	sympy.solve(e)
x,yの複素数	complex(x, y)
データフレームの列がxより小さいデータを抽出する	df[df[column] < x]
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
明るいの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
両端キューに要素をスタックする	deq.append(element)
ケースを無視して前もって正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
タプルの末尾のn要素を取り除く	aTuple[:-n]
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
＜オプション＞色をピンクに設定する	color = 'pink'
ヒストグラムを描画して、その色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
ベクトルの要素ごとに加算する	aArray + aArray2
折れ線グラフの色を文字列に設定する	plt.plot(xdata, ydata, color=s)
データフレームのカラムを100の位で丸める	df[col].round(-2)
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
1からnまでの整数列	list(range(1, n+1))
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
部分文字列が文字列の開始位置より後に含まれない	s.find(sub, start) == -1
文字列をコロンで区切って、列挙する	s.split(':')
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
タイムスタンプデータが土曜日かどうか調べる	aDatetime.weekday() == 5
辞書に辞書の項目を更新する	aDict.update(aDict2)
エラーなくセットから値を除く	aSet.discard(element)
集合から全ての要素を取り除く	aSet.clear()
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
＜オプション＞アクア色を使う	color = 'aqua'
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
タプルをn回、連結する	aTuple * n
文字列を空白で区切る	s.split()
データフレームの列の一覧	df.info()
リストとデータ列の黒い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
文字列の末尾からタブを取り除く	s.rstrip('\t')
データ列の時刻	ds.dt.hour
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
ヒストグラムを描画して、色をスラグレーに変更する	plt.hist(データ列, color='slategray')
タプルをミュータブルにする	list(aTuple)
ヒストグラムを描画して、その色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
グラフの用途を論文に設定する	sns.set(context='paper')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
日付を使う	import datetime
ヒストグラムを描画してその色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
グラフを画面用に設定する	sns.set(context='notebook')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
タプルとタプルを連結する	aTuple + aTuple2
＜オプション＞セパレータを改行にする	sep = '\n'
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
文字列がリストの要素か調べる	element in aList
集合をイミュータブルなセットに変換する	frozenset(aSet)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
データフレームを転置する	df.T
線グラフの色をライムに指定する	plt.plot(データ列, データ列2, color='lime')
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
イテラブルについてのヒストグラムを明るい色で描画する	plt.hist(xdata, color='bright')
ヒストグラムを描画して、その色をオリーブに設定する	plt.hist(データ列, color='olive')
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
リストを境界値としてリストをビンニングする	pd.cut(aList, aList)
データ列をビン数nでビン分割する	pd.cut(ds, n)
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
折れ線グラフを描画してその色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgray')
＜オプション＞インディアンレッド色を使う	color = 'indianred'
カウンタの文字列数	len(aCounter)
リストの長さだけ繰り返す	range(len(aList))
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgray')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
＜オプション＞マルーン色を用いる	color = 'maroon'
実数を浮動小数点数で整数除算する	x // y
データフレームから型の列を抽出する	df.select_dtypes(ty)
コマンドラインフラグの状態を知る	sys.flags
nを十六進数表記に変換する	hex(n)
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
＜オプション＞ピーチパフを用いる	color = 'peachpuff'
線グラフを描画して、色をシャルトリューズに指定する	plt.plot(データ列, データ列2, color='chartreuse')
文字列は全て識別子名かどうか調べる	s.isidentifier()
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
nわるn2	n / n2
日付時刻データは日付時刻データよりあとか調べる	aDatetime > aDatetime2
リストと数列の折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームを列でソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
最大値・最小値の範囲として一様な乱数を得る	random.uniform(最小値, 最大値)
中央値でデータ列をビニングする	pd.qcut(ds, 2)
データフレームのリスト列のモード	df[aList].mode()
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
数式を部分分数に展開する	sympy.apart(e)
折れ線グラフに線幅nのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ヒストグラムを描画して、その色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データ列の文字列長を列として使う	ds.str.len()
折れ線グラフを描画して、その色をライトスチールブルーにする	plt.plot(データ列, データ列2, color='lightsteelblue')
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
＜オプション＞小麦色色を使う	color = 'wheat'
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
リストを白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
＜オプション＞先頭の行をヘッダに設定する	header = 0
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
＜オプション＞セパレータをカンマにする	sep = ','
イテラブルとリストについて散布図をプロットして星マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
パステル調の色でリストについてのヒストグラムをプロットする	plt.hist(xdata, color='pastel')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
2つのデータフレームを結合する	pd.merge(df, df2)
配列が何のデータ型か	aArray.dtype()
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
マッピングの項目名に対応した値を参照する	aDict.get(key)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
カウンタを多い方からリストとして得る	aCounter.most_common()
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
＜オプション＞ロージーブラウンを用いる	color = 'rosybrown'
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
データ列の中に文字列と日付データがあるか調べる	ds.isin([value, value2])
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
タプルをリストに変換する	list(aTuple)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
文字列のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
データフレームを関数によってまとめたグループ	df.groupby(関数)
線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
データ列の欠損値を直後の値に変更する	ds.fillna(method='bfill')
セットの要素が別のセットに含まれるか確認する	aSet.issubset(aSet2)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
＜オプション＞グラフの色を黄色に設定する	color = 'yellow'
データフレームの歪度	df.kurt()
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
リストとリストで折れ線を描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
実数の双曲線余弦	math.cosh(x)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
ユニークな値を要素とする行列	np.unique(aArray)
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
数式を変数について微分する	sympy.diff(e, z)
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightskyblue')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
ヒストグラムの色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
実数を実数で割る	x / y
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
n2がnより大きくかつn3未満か判定する	n < n2 and n2 < n3
データフレームをサンプリングする	df.sample()
リストとリストについて色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
空のリスト	[]
空のタプル	()
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
＜オプション＞色をライトグリーンに変更する	color = 'lightseagreen'
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
標準エラーを使う	sys.stderr
＜オプション＞ブラウン色を使う	color = 'brown'
黒い星マーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='k')
データフレームを各列と列の組み合わせ毎に集約し、、分散を求める	df.groupby([column, column2], as_index=False).var()
入力ストリームを改行除外して一行ずつ読む	f.readline()
データフレームの列の文字列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームのリスト列の平均	df[aList].mean()
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
日付時刻データのタイムゾーン	aDatetime.timetz()
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
整数nの2進表記	bin(n)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
タプルの末尾	aTuple[-1]
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
長さnのリスト	[0] * n
ミディアムシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフを描画して、その色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
kを底とする実数の対数	math.log(x, k)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
辞書から最後の項目をポップする	aDict.popitem()
リストを引数として展開して表示する	print(*aList, sep=',')
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
文字列中に非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
折れ線グラフにサイズnの右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
折れ線グラフを描画して、その色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
＜オプション＞リネン色を使う	color = 'linen'
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
データフレームの最頻値	df.mode()
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
全要素を０で初期化された行列	np.zeros(行数, 列数)
データ列の第一四分位数	ds.quantile(0.25)
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
折れ線グラフの丸マーカーのサイズをnに指定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
追加できるようにUTF8として既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
データフレームを見る	df.head()
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
折れ線グラフのダイアモンドマーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
整数nが配列のどれかか調べる	n in aArray
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
＜オプション＞ダークスレートブルーを使用する	color = 'darkslateblue'
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
ヒストグラムを描画する	plt.hist(データ列)
＜オプション＞ダークターコイズ色を使う	color = 'darkturquoise'
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフを描画して、その色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
データフレームのデータ型の一覧	df.dtypes
コマンド引数の一覧	sys.argv[1:]
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
リストと数列の折れ線グラフをプロットする	plt.plot(xdata, ydata)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
数式を展開する	sympy.expand(e)
＜オプション＞淡い茶色にグラフの色を変更する	color = 'tan'
行列をリストから作る	np.array(aList)
データフレームの欠損値を後の行の値に指定する	df.fillna(method='bfill')
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
nとn2の和	n + n2
濃いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
nがn2で割り切れるか調べる	n % n2 == 0
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
実数に実数を加える	x + y
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
濃い色のマーカーとして散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
nが5の倍数かどうか調べる	n % 5 == 0
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
辞書を浅くコピーする	dict(aDict)
リストとリストについての散布図にカラーコードの▽マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c=rgb)
配列とリストの散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
リストを暗い色のヒストグラムで描く	plt.hist(xdata, color='dark')
データフレームの列の値がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームのリストカラムを丸める	df[aList].round()
＜オプション＞グラフの色を赤に設定する	color = 'red'
文字列の末尾から部分文字列を探す	s.rfind(sub)
＜オプション＞濃い青色を使う	color = 'darkblue'
二つのリストをコロンで区切ってプリントする	print(value, value2, sep=':')
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
ファイルから1文字、読み込む	f.read(1)
データフレームを列でグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
＜オプション＞線種を一点鎖線に設定する	linestyle = 'dashbot'
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
文字列はリストの要素でないかどうか確認する	element not in aList
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
＜オプション＞タン色を使う	color = 'tan'
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
＜オプション＞三角マーカーを使う	marker = '^'
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
変数について数式を積分する	sympy.integrate(e, z)
＜オプション＞グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
実線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
等間隔でn個に列をビン分割する	pd.cut(ds, n)
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
本日の日付を求める	datetime.date.today()
真部分集合か調べる	aSet < aSet2
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
日付時刻データの時間数	aDatetime.hour
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
列でデータフレームを昇順に並べる	df.sort_values(by=column, ascending=True)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
文字列の開始位置以降が部分文字列で開始するか	s.startswith(sub, start)
データフレームから重複した行を削除する	df.drop_duplicates()
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
データフレームのリストカラムの歪度	df[aList].kurt()
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
青色で文字列を表示する	print(f'\033[34m{value}\033[0m')
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
黒い左三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='<', c='k')
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
濃い色としてリストについてのヒストグラムをプロットする	plt.hist(xdata, color='deep')
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
データフレームをインデックスを用いてソートする	df.sort_index()
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
データフレームから最初の列を除く	df[df.columns[1:]]
文字列の中のASCII限定としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
辞書からキーで指定された項目をポップする	aDict.pop(key)
暗いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='dark', color='r')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
nがn2よりも小さいか調べる	n < n2
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
要素が集合に含まれないか調べる	element not in aSet
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
ヒストグラムを描画して、その色をマルーンに指定する	plt.hist(データ列, color='maroon')
集合から要素を取り除く	aSet.remove(element)
リストとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
xの印字可能な文字列	ascii(x)
黒い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
文字列を右寄せにする	s.rjust(文字列幅)
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
文字列が英字かどうか確認する	s.isalpha()
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
データフレームの中に存在する文字列と文字列の合計を求める	df.isin([value, value2]).sum()
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
濃いグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
数式の部分分数化を行う	sympy.apart(e)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図を赤色のバツマーカーとして描画する	plt.plot(xdata, ydata, marker='x', c='r')
行列の合計値を求める	np.sum(aArray)
空の多重集合	collections.Counter()
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
データフレームの中にがあるか調べる	df.isin([value])
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
英数字が文字列内にあるか	any(c.isalnum() for c in s)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
データフレームの末尾n行を抽出する	df.tail(n)
ライトスカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightskyblue')
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
色差別ないの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
nからn2の範囲	range(n, n2)
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
nが3で割り切れるか調べる	n % 3 == 0
行列の形状を計算する	aArray.shape
単位正方行列を初期化する	np.identity(N)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
ヒストグラムを描画して、その色を白に設定する	plt.hist(データ列, color='white')
n割るn2の切り上げ	(n + n2 - 1) // n2
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
折れ線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
折れ線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
行列の差	aArray - aArray2
カラムの値はNaNか調べる	ds.isna()
kを底とする対数	math.log(x, k)
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
＜オプション＞グラフの色をコーラルに設定する	color = 'coral'
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
真	True
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
三整数の最大公約数を計算する	math.gcd(n, n2, n3)
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
実数の仮数	math.frexp(x)[0]
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
表の行と列を入れ替える	df.T
配列とリストの散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
＜オプション＞グラフの色をオーキッドに設定する	color = 'orchid'
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
日付データの年数	aDate.year
折れ線グラフを描画して、色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
＜オプション＞グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
データフレームを'A'列の値によってグループ化し、要約統計量を算出する	df.groupby('A').describe()
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
＜オプション＞線幅をnに設定する	linewidth = n
データフレームの先頭を確認する	df.head()
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
スクリプトファイルの絶対パス	os.path.abspath(__file__)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
文字列を二分する	s.partition(sep)
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
2変数の最大値を求める	max(x, y)
角度のラジアン	math.radians(degree)
xを文字列にしてファイルに書き込む	f.write(str(x))
商と余りを同時に計算する	divmod(x, y)
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
２つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
＜オプション＞グラフの色をライムに設定する	color = 'lime'
配列のスカラー倍	aArray * n
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
リストとリストについて破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
リストとデータ列についての散布図に赤い▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
データ列を丸めて、整数にする	ds.round().astype(int)
リストとリストについて破線グラフを描画して、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
セット＼セット	aSet.difference(aSet2)
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
上位集合か調べる	aSet.issuperset(aSet2)
要素ひとつのタプルを作る	(element,)
xにヒストグラムのアルファを指定する	plt.hist(データ列, alpha=x)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
配列の次元数	aArray.ndim
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
オプションで、標準エラーに出力する	file = sys.stderr
折れ線グラフに四角マーカーを使う	plt.plot(データ列, データ列2, marker='s')
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフの星マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
要素が集合に含まれるか調べる	element in aSet
オブジェクトは数値か調べる	isinstance(obj, (int,float))
＜オプション＞色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
＜オプション＞グレー色を使う	color = 'gray'
ヒストグラムを描画して、その色を小麦色に設定する	plt.hist(データ列, color='wheat')
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
データフレームの各グループ毎の合計	df.groupby(column).sum()
日付データが木曜日か調べる	aDate.weekday() == 3
＜オプション＞スプリンググリーン色を使用する	color = 'springgreen'
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
折れ線グラフを描画して色を白に設定する	plt.plot(データ列, データ列2, color='white')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
＜オプション＞データ型を指定する	dtype = bool
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
＜オプション＞グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームを100の位で丸める	df.round(-2)
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
カウンタの項目数	len(aCounter)
行列を転置する	aArray.T
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
フクシア色の線グラフを描画する	plt.plot(データ列, データ列2, color='fuchsia')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
文字列は全て数値	s.isnumeric()
タプルの中の最小値	min(aTuple)
折れ線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
組の要素を並べる	sorted(aTuple)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
コマンドの第一引数を知る	sys.argv[1]
行列の転置行列	aArray.T
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
配列とリストでパステル調のグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
nが2で割り切れるか調べる	n % 2 == 0
現在のタイムスタンプ	int(time.time())
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
本日の年数	datetime.datetime.today().year
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
＜オプション＞ミディアムバイオレットレッドを使用する	color = 'mediumvioletred'
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
nとn2の積	n * n2
n個にデータフレームの中の列を分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
両端キューが空か調べる	len(deq) == 0
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
クラスのサブ型か	issubclass(サブクラス, クラス)
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
折れ線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
配列を2次元1行に変形する	aArray.reshape(1, -1)
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
折れ線グラフを描画して色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
行列の演算をする	import numpy as np
リストとリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムを描画して、その色をカーキに設定する	plt.hist(データ列, color='khaki')
nとn2の値を足してnに代入する	n += n2
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームから最後の列を除く	df[df.columns[:-1]]
文字列が小文字か調べる	s.islower()
オプションで、ファイルを使う	file = sys.open(filename, 'w')
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
赤い△マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='r')
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
辞書のキーとその値をペアとして取り出す	aDict.items()
データフレームのリストカラムのヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
データフレームの列のユニークな値の個数	df[col].nunique()
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
＜オプション＞カラムの名前を自動的な連番に指定する	header = None
データ列を折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞改行コードを動作環境依存に設定する	newline = None
白いヒストグラムを描画する	plt.hist(データ列, color='w')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ゼロ埋めされた配列	np.zeros(要素数)
データフレームのインデックスの一覧	df.index
イテラブルと配列の散布図を描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
グラフの中の縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
＜オプション＞オリーブにグラフの色を変更する	color = 'olive'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
折れ線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
文字列は全て十進数字か調べる	s.isdecimal()
データフレームの列の中の欠損値の数をカウントする	df[col].isna().sum()
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
集合からエラーなく要素を取り除く	aSet.discard(element)
文字列の接尾辞は部分文字列	s.endswith(sub)
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
要素をスタックの先頭から取り出す	deq.popleft()
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
ヒストグラムを描画して色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
辞書のキーの一覧を得る	aDict.keys()
データフレームをインポートする	import pandas as pd
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
現在の時間数	datetime.date.today().hour
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
無限にカウントアップする	itertools.count()
折れ線グラフを描画して、その色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
明るいグラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
nとn2の論理積	n & n2
オブジェクトは関数か調べる	callable(obj)
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
nを切り捨てながらn2分の一にする	n //= n2
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
＜オプション＞ティール色を使う	color = 'teal'
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
実数を切り上げて整数に変換する	math.ceil(x)
＜オプション＞右三角マーカーを使う	marker = '>'
ヒストグラムを描画してその色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの左三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
列の各値を双方向キューの先頭に追加する	deq.extendleft(iterable)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
データフレームを複数の列で昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
データ列のユニークな値	ds.unique()
データフレームのリストカラムの中に文字列がある	df[aList].isin([value])
リストとリストについて散布図を描画し、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
辞書のキー一覧	list(aDict)
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
データフレームから列を一つ選択する	df[[column]]
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
＜オプション＞線種を点線に設定する	linestyle = 'dotted'
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
データ列のNaNを中央値で置換する	ds.fillna(ds.median())
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
＜オプション＞シエナ色を使う	color = 'sienna'
カラムの75パーセンタイル	ds.quantile(0.75)
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
整数nがセットのどれかか調べる	n in aSet
数値の符号を同じにする	math.copysign(x, x2)
破線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
プログラムを異常終了する	sys.exit(1)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
文字列を最後から空白で分割する	s.rsplit()
データフレームの列の名前を付け直す	df.rename(columns={column: name})
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
＜オプション＞ライトシアン色を使う	color = 'lightcyan'
度数分布図のビンをセットする	plt.hist(データ列, bins=n)
プログラムのファイル名を知る	sys.argv[0]
度数分布図を描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
整数nをn2分の一にする	n //= n2
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
本日が何日か知る	datetime.datetime.today().day
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
データフレームのカラムの月	df[col].dt.month
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
＜オプション＞ライトグリーン色を用いる	color = 'lightgreen'
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
データフレームの母標準偏差	df.std(ddof=0)
nが1、もしくは2か調べる	n == 1 or n == 2
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
Pandasで、フォーマットfmtを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
ヒストグラムの色を淡いピンク色にセットする	plt.hist(データ列, color='lightpink')
データフレームの中に文字列があるか調べる	df.isin([value])
＜オプション＞グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
プラットホームはMacOSかどうか調べる	sys.platform.startswith('darwin')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
折れ線グラフに三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
リストのヒストグラムを描画する	plt.hist(aList)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
双方向キューのstart番目からendの部分値	collections.deque(itertools.islice(deq, start, end))
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
リストの最初の文字列を探す	aList.index(element)
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
＜オプション＞ラベンダー色を使う	color = 'lavender'
イテラブルをカウンタに変換する	collections.Counter(iterable)
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
日付データが日曜日か調べる	aDate.weekday() == 6
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
space	' '
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
＜オプション＞読み込まないフッタをnに指定する	skipfooter = n
ダークオレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorange')
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
イテラブルと数列についての散布図にカラーコードの右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c=rgb)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
行列の逆行列	np.linalg.inv(aArray)
eの実数乗	math.exp(x)
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
最大長を指定して、双方向キューを作る	collections.deque(maxlen=n)
色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
両端キューのn番目に値を挿入する	deq.insert(n, element)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
列を配列に変換する	df[column].values
文字列を下線付きにする	f'\033[4m{value}\033[0m'
折れ線グラフの色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
明るいの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
日付時刻データが何分か知る	aDatetime.minute
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
＜オプション＞紺色を使う	color = 'darkblue'
八進文字列を整数に変換する	int(s, 8)
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
線グラフの色をビスクに指定する	plt.plot(データ列, データ列2, color='bisque')
要素∈集合	element in aSet
nがn2の倍数でない	n % n2 != 0
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
＜オプション＞マーカーを右三角に変更する	marker = '>'
プログラムの実行を正しく止める	sys.exit(0)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームの列がxでない行をフィルタする	df[df[column] == x]
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
nが無限に続くリストを得る	itertools.repeat(n)
nがn2未満、それかn3以上か	n < n2 or n >= n3
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
カラーコードのダイアモンドマーカーをリストと数列についての散布図に描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞どの行もヘッダにしない	header = None
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
最大列数を変更する	pd.set_option('display.max_columns', n)
整数nがリストのどれかか調べる	n in aList
グラフの色をパステル調にする	sns.set(pallete='pastel')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
日付データの日数	aDate.day
両端キューに要素をエンキューする	deq.appendleft(element)
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
パステル調の色のマーカーとして重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
＜オプション＞青紫色を使う	color = 'violet'
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
実数の整数部	math.modf(x)[1]
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
辞書のキーに対応した値	aDict.get(key)
浮動小数点数のサインを計算する	math.sin(x)
最頻値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
パステル調のグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフの大バツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データ列を丸める	ds.round()
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
データフレームから指定した3つの列を取り出す	df[[column, column2, column3]]
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームをグループ化し、それぞれの列に対し分散を算出する	df.groupby(column)[column2].var()
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
二つのオブジェクトが等しいか調べる	obj == obj2
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=column)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
n個にリストを等間隔で分割する	pd.cut(aList, n)
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
既存の配列を元に全要素が1の配列を作成する	np.ones_like(aArray)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームのリスト列の値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
中央値でリストをビン分割する	pd.qcut(aList, 2)
折れ線グラフを描画してその色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
文字列をキャピタライズする	s.capitalize()
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
リスト中の要素は全て真か調べる	all(aList)
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
＜オプション＞ネイビー色を用いる	color = 'navy'
＜オプション＞データ型を指定する	dtype = np.int
配列のヒストグラムを描画する	plt.hist(aArray)
ヒストグラムを描画してその色をゴールドに設定する	plt.hist(データ列, color='gold')
文字列を小文字にする	s.lower()
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
＜オプション＞ライトグレー色を使う	color = 'lightgray'
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
カラーコードの大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列, データ列2, color='lightsteelblue')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
折れ線グラフのダイアモンドマーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
＜オプション＞ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
＜オプション＞赤色を使う	color = 'red'
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
JSONLファイルにデータフレームを小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
＜オプション＞昇順にする	ascending = True
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
2つの変数を同じ値にする	x = y = n
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
明るい色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
偽	False
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
濃いの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフに描画して、マーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
＜オプション＞ポイントマーカーを使う	marker = '.'
データフレームをカラムによって集約して、グループ毎の標準偏差を求める	df.groupby(column).std()
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
淡いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
全ての印字可能な文字	string.printable
赤い大バツマーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='X', c='r')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
データフレームの各次元のサイズ	df.shape
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
データフレームのカラムをヒストグラムで可視化する	plt.hist(df[column])
赤い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
両端キューの先頭から要素を取り除く	deq.popleft()
画面にグラフの用途を指定する	sns.set(context='notebook')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
実数の双曲線正接の逆数	math.atanh(x)
折れ線の線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
数列とリストについて散布図を描いて、下三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='royalblue')
整数nを二進表現に変換する	bin(n)
＜オプション＞ダイアモンド印を加える	marker = 'D'
データフレームのリストカラムの未入力値を最大値に増やす	df[aList].fillna(df[aList].max())
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
nがn2か調べる	n == n2
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
リストの要素をソートする	sorted(aList)
＜オプション＞シーグリーンを使う	color = 'seagreen'
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
現在が何時か知る	datetime.date.today().hour
データ列をビン分割する	pd.cut(ds, aList)
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
実数の逆余弦	math.acos(x)
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
＜オプション＞アクアマリンにグラフの色を指定する	color = 'aquamarine'
リストとイテラブルについて散布図を描画し、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
カラーバーを付ける	plt.colorbar()
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
＜オプション＞色を暗い赤に設定する	color = 'darkred'
文字列をバイト列に変換する	bytes(s)
データフレームを列によってを用いて降順にソートする	df.sort_values(by=column, ascending=False)
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=n)
文字を文字コードに変換する	ord(ch)
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
標準入力から1文字だけ読む	sys.stdin.read(1)
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
エクセルファイルファイルからエクセルファイルを読む	pd.read_excel(filename)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
文字列の先頭から部分文字列を探す	s.find(sub)
データフレームのカラムのタイムゾーンを日本にセットする	df[col].tz_convert('Asia/Tokyo')
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
全ての句読点文字	string.punctuation
濃いグラフを数列と数列として描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
シーケンスから双方向キューを用意する	collections.deque(iterable)
実数が無限大か調べる	math.isinf(x)
文字列中の部分文字列の登場をカウントする	s.count(sub)
散布図を黒色の▽マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='k')
データ列が何曜日か見る	ds.dt.weekday_name
二つのオブジェクトが等しいかどうか確認する	obj == obj2
Pandasで、文字列をフォーマットfmtで日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
カンマ区切りのファイルを読む	pd.read_csv(filename, sep=',')
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
predicateFuncが真となる列の部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
ヒストグラムを描画して、その色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
プラットフォームのコードポイントの最大値	sys.maxunicode
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
カウンタ同士でユニオン	aCounter | aCounter2
折れ線グラフを描画して、その色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
逆双曲線正弦を求める	math.asinh(x)
データ列とイテラブルの散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
リストとリストについてカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
集合＼集合	aSet.difference(aSet2)
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムを描画して、色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
線グラフを描画して、その色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
赤い左三角マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(xdata, ydata, marker='<', c='r')
ヒストグラムを描画して、その色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
オブジェクトの参照カウント	sys.getrefcount(obj)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
降順にデータフレームを複数の列を用いて破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのカラムを十の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
で使える色名の一覧	matplotlib.colors.cnames
本日が何年か知る	datetime.datetime.today().year
＜オプション＞グラフの色を赤に変更する	color = 'red'
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
リストとデータ列についての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
文字列が文字列リストのいづれか調べる	s in aStringList
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
両端キューの要素を左にn個分輪番で回す	deq.rotate(-n)
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
線グラフを描画してその色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
色差別ない色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
リストの全ての要素をクリアにする	aList.clear()
＜オプション＞マーカーをポイントに変更する	marker = '.'
カウンタの正の数のみ残す	+aCounter
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
配列の最小	np.min(aArray)
データフレームを列によってソートして、下位を取り出す	df.sort_values(columns).tail(n)
マッピングのコピーを作成する	dict(aDict)
＜オプション＞デピンク色を使う	color = 'deeppink'
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
0からNまでの配列	np.arange(N)
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
イテラブルのイミュータブルな集合	frozenset(iterable)
現在が何秒か知る	datetime.date.today().second
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
＜オプション＞整数型を使う	dtype = np.int
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
＜オプション＞ピンク色を使う	color = 'pink'
データフレームのインデックスがnの行を抽出する	df.loc[n]
実数の小数点以下を丸める	round(x)
文字列の右側から不要な空白を除去する	s.rstrip()
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
集合の濃度	len(aSet)
＜オプション＞グラフの色をカーキに変更する	color = 'khaki'
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
正規表現モジュールをインポートする	import re
日付時刻データが何曜日か知る	aDatetime.weekday()
'A'列によってデータフレームを破壊的に昇順に並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
コマンド引数を列挙する	sys.argv[1:]
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
リストとイテラブルについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
実数の逆双曲線余弦	math.acosh(x)
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
xを印字できる文字列にする	ascii(x)
ヒストグラムを描画して、その色をダークグリーンにする	plt.hist(データ列, color='darkgreen')
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフを描画して色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
＜オプション＞右三角印を用いる	marker = '>'
淡い色でリストについてのヒストグラムを描く	plt.hist(xdata, color='muted')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
縦棒を描いて中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数以上の最小の整数	math.ceil(x)
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
リストと配列について散布図を描いて、マーカーの色を明るいに指定する	plt.plot(xdata, ydata, c='bright')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
実数を整数に変換する	int(x)
ヒストグラムを描画して、色をシアンに設定する	plt.hist(データ列, color='cyan')
nかつn2	n and n2
配列と配列の散布図に赤色の四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞ロージーブラウン色を使う	color = 'rosybrown'
リストの合計値	sum(aList)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
集合の浅いコピー	aSet.copy()
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞改行をセパレータで使う	sep = '\n'
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
ファイルからn文字、読み込む	f.read(n)
ベクトルの演算をする	import numpy as np
＜オプション＞ペルー色を使う	color = 'peru'
ふたつの辞書を合体する	aDict | aDict2
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
データ列の日	ds.dt.day
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
ヒストグラムを描画して、その色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
＜オプション＞下三角マーカーを使う	marker = 'v'
ラジアンの角度	math.degrees(x)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
＜オプション＞ダークバイオレットを使う	color = 'darkviolet'
キーが辞書上でまだ定義されていないか調べる	key not in aDict
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
startからendの間のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
＜オプション＞マーカーを四角に変更する	marker = 's'
句読点文字を全部使う	string.punctuation
リストと配列で暗いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
＜オプション＞データ型を指定する	dtype = np.int8
折れ線グラフに星印を用いる	plt.plot(データ列, データ列2, marker='*')
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
xが一桁の数か調べる	-9 <= x <= 9
二変数の最大値	max(x, y)
黒い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
ヒストグラムを描画して、その色を小麦色に指定する	plt.hist(データ列, color='wheat')
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
二進文字列を整数に変換する	int(s, 2)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
＜オプション＞ホットピンク色を使う	color = 'hotpink'
折れ線グラフを描画してその色をカデットブルーに指定する	plt.plot(データ列, データ列2, color='cadetblue')
配列をビン数nでビン分割する	pd.cut(aArray, n)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
データフレームのカラムの曜日数	df[col].dt.dayofweek
三数の最も小さい値を求める	min(x, y, z)
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
配列とリストについての散布図に黒色の三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データ列をカテゴリデータに変換する	ds.astype(object)
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
整数最小公倍数	math.lcm(n, n2)
リストと配列についての散布図に黒い▼マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
文字列内に空白が含まれるか調べる	any(c.isspace() for c in s)
辞書を多重集合に変換する	collections.Counter(aDict)
配列の差	aArray - aArray2
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ふたつの辞書をマージする	aDict | aDict2
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
散布図に黒い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
リストと配列について色差別ない色の折れ線グラフを描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
グラフの色を濃くする	sns.set(pallete='deep')
折れ線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
折れ線グラフに大きさnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
折れ線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='forestgreen')
２つの文字列は等しくないか調べる	s != s2
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
ネイピア数	math.e
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
辞書の値を列挙する	aDict.values()
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
アルファベットの文字列	string.ascii_letters
モジュールを検索するパス	sys.path
タプルの末尾からn番目以前の要素を得る	aTuple[:-n]
カウンタをイテラブルで更新する	aCounter.update(iterable)
文字列の先頭から空白を取り除く	s.lstrip()
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ポスターにグラフの用途を変更する	sns.set(context='poster')
リストとリストで淡いグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
実数を十六進表記の文字列に変換する	x.hex()
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームのカラムの歪度	df[col].kurt()
グラフにグリッド線を入れる	plt.grid(True)
０で全要素を初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
オブジェクトを文字列に変換する	str(obj)
リストの度数分布図を描画する	plt.hist(aList)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
オブジェクトに属性が存在するか調べる	hasattr(obj, プロパティ名)
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
三つの文字列を順にプリントする	print(value, value2, value3)
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
要素が辞書の値として含まれているか	element in aDict.values()
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
正規表現patternでreplにデータ列の値を一度に置き換える	ds.replace(pattern, repl, regex=True)
辞書に要素をキーとして加える	aDict[key] = element
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
＜オプション＞耐火レンガに色を設定する	color = 'firebrick'
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
リストから文字列を取り除く	aList.remove(element)
文字列の左側からタブを取り除く	s.lstrip('\t')
既存のファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
ゼロ埋めされた行列	np.zeros(行数, 列数)
リストを配列に変換する	np.array(aList)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
タプルの要素を逆順にする	aTuple[::-1]
イテラブルを文字列リストに変換して、タブを用いて連結する	'\t'.join(map(str, iterable))
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
オプションで、標準エラーを使う	file = sys.stderr
リストをn回、連結する	aList * n
標準出力を得る	sys.stdout
データフレームのn行まで抽出する	df[:n]
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
配列をヒストグラムにする	plt.hist(aArray)
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データフレームのカラムの欠損値を前の行の値に指定する	df[col].fillna(method='ffill')
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
＜オプション＞グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
＜オプション＞グラフの線幅をnにする	linewidth = n
＜オプション＞グラフの色をライトシアンに指定する	color = 'lightcyan'
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
＜オプション＞色をパパイヤウィップに設定する	color = 'papayawhip'
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='gray')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
リストとリストの黒色の明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
ヒストグラムを描画してその色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
折れ線グラフを描画して、その色をスチールブルーにセットする	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞マーカーをダイアモンドに変更する	marker = 'D'
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
＜オプション＞グラフの色をビスクに変更する	color = 'bisque'
日付データが土曜日か調べる	aDate.weekday() == 5
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
散布図に黒い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='k')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
xを文字列に変換する	str(x)
データフレームから列名を複数指定して選択する	df[columns]
イテラブルを配列に変換する	np.array(iterable)
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
組の末尾のn要素を取り除く	aTuple[:-n]
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
リストとイテラブルについて明るいグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
データフレームを複数の列によってソートする	df.sort_values(by=column)
赤いダイアモンドマーカーを配列とイテラブルについての散布図に描画する	plt.plot(xdata, ydata, marker='D', c='r')
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X')
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
数式を因数分解する	sympy.factor(e)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
セットから別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
日付データの曜日を整数で使う	aDate.weekday()
ヒストグラムを描画して、その色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームをインデックスによってソートする	df.sort_index()
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
nが一桁の整数か調べる	0 <= n <= 9
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
配列と配列の折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
集合のイミュータブル版	frozenset(aSet)
クラス名は名前付きタプルか調べる	issubclass(C, tuple)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ヒストグラムを描画して色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
ヒストグラムを描画して色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
0から始まる無限な数列	itertools.count()
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
＜オプション＞オレンジレッド色を使う	color = 'orangered'
ふたつの集合の差集合	aSet.difference(aSet2)
nとn2の排他的論理和	n ^ n2
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームを二つの列によって降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
列から最大長nのキューを作る	collections.deque(iterable, maxlen=n)
データフレームのカラムの中に日付データと文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
リストをイミュータブルな集合にする	frozenset(iterable)
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
＜オプション＞ビスク色を使う	color = 'bisque'
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
文字列を全て小文字に変換する	s.lower()
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
辞書をコピーする	aDict.copy()
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
自然数の最大公約数	math.gcd(n, n2)
＜オプション＞下三角マーカーを描画する	marker = 'v'
ユーザから入力される	input()
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
文字列を部分文字列で分けたときの残りの文字列	s.partition(sub)[-1]
リストを逆順にする	aList[::-1]
データフレームのリスト列の中にいくつ欠損値があるか求める	df[aList].isna().sum()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
seabornのデフォルトを適用する	sns.set()
xが1もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
ベクトルの各要素の最大公約数	np.gcd(aArray, aArray2)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
マッピングの項目名の値を参照する	aDict[key]
折れ線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストの要素を昇順にソートする	sorted(aList, reverse=False)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
双方向キューのn番目	deq[n]
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
実数の値が整数	x.is_integer()
最適な位置に凡例を入れる	plt.legend(loc='best')
ヒストグラムを描画して色をネイビーに変更する	plt.hist(データ列, color='navy')
右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>')
ヒストグラムの色をグリーンにする	plt.hist(データ列, color='green')
カウンタを集合にする	set(aCounter)
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
ヒストグラムを描画してその色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
部分文字列が文字列の終了位置以前に含まれないか調べる	s.find(sub, 0, end) == -1
文字列を青色にする	f'\033[34m{value}\033[0m'
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞マーカーを三角に変更する	marker = '^'
シーケンスにイテラブルを続けた列	itertools.chain(iterable, iterable2)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
データフレームの第一四分位数	df.quantile(0.25)
データフレームをから読み込む	pd.read_excel(filename)
部分文字列が部分文字列で開始する	s.startswith(sub)
破壊的に列によってによってデータフレームを並べる	df.sort_values(by=column, inplace=True)
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
データフレームを列の値によってグループ化する	df.groupby(column)
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
ヒストグラムを描画して、色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
暗いの折れ線グラフを描画して、その線幅をnにする	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
数列を濃い色の柱状図として描画する	plt.hist(xdata, color='deep')
折れ線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームを列ごとにグループ化して、それぞれのグループ毎の最大値を計算する	df.groupby(column).max()
散布図に色差別ない色のマーカーを用いる	plt.plot(xdata, ydata, c='colorblind')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
ヒストグラムを描画して、色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
データフレームの列をヒストグラムにする	plt.hist(df[column])
両端キュー中の要素の数を数える	deq.count(element)
パステル調のの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
＜オプション＞カーキ色を使う	color = 'khaki'
変数を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
データフレームの中央値	df.median()
アルファベットの小文字列	string.ascii_lowercase
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
明るいグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストを引数として展開して表示する	print(*aList)
＜オプション＞文字列をセパレータで使う	sep = s
リストとリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
散布図を黒い菱形マーカーで描画する	plt.plot(xdata, ydata, marker='D', c='k')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
タプルのキーを列挙する	aDict.keys()
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
エラーを出力する	sys.stderr
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
配列とイテラブルの散布図を描画して、マーカーをクロスに指定する	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画して、色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
ヒストグラムを描画して、その色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
nまたはn2	n or n2
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
表のそれぞれのグループごとの標準偏差	df.groupby(column).std()
データ列の要約統計量	ds.describe()
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
本日をタプルに変換する	datetime.datetime.today().timetuple()
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
ファイルからn文字読む	f.read(n)
'A'列の値によってデータフレームをまとめたグループを求める	df.groupby('A')
バイナリできるようにファイルを開く]	open(filepath, mode='rb')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
＜オプション＞サンディーブラウン色を使う	color = 'sandybrown'
＜オプション＞降順にする	ascending = False
nがn2より大きいか調べる	n > n2
線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
コレクションを使う	import collections
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列が全てアスキー文字か確認する	s.isascii()
行列の列ごとの最小値	np.min(aArray, axis=0)
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
ファイルからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
計算機イプシロン	sys.float_info.epsilon
変数名をキーとして、辞書	dict(name=element)
＜オプション＞改行を区切り記号で用いる	sep = '\n'
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
折れ線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
行列の値	aArray[行番号, 列番号]
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
データフレームのn行以降抽出する	df[n:]
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
ヒストグラムを描画して、その色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
行列の行ごとの最大を計算する	np.max(aArray, axis=1)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgrey')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
グラフの用途をポスターに設定する	sns.set(context='poster')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
＜オプション＞オリベドラブを用いる	color = 'olivedrab'
データフレームを各列毎にグループ化して、列の最小値を算出する	df.groupby(column)[column2].min()
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
リストのn番目の	aList[n]
ファイルをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
ファイルが存在するか調べる	os.path.exists(filepath)
実数を小数点以下で丸める	round(x, n)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
＜オプション＞丸マーカーを描画する	marker = 'o'
データフレームの尖度	df.skew()
データフレームのカラムの日	df[col].dt.day
データ列の時	ds.dt.hour
カウンタの項目のカウント	aCounter[element]
整数nを十六進文字列に変換する	hex(n)[2:]
イテラブルからカウンタを作る	collections.Counter(iterable)
データフレームの指定された列を配列として抽出する	df[column].values
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
行列の行ごとの分散	np.var(aArray, axis=1)
実数の双曲線余弦の逆数	math.acosh(x)
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
散布図にカラーコードの丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c=rgb)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
文字列が全て英数字	s.isalnum()
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
コマンドの第二引数を知る	sys.argv[1]
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞タンを使用する	color = 'tan'
nが3の倍数	n % 3 == 0
ヒストグラムを描画して、色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
タプルの末尾を取り除く	aTuple[:-1]
散布図に赤いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
文字列をシアンにする	f'\033[36m{value}\033[0m'
リストと配列で色差別ないグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームのリストカラムの中にと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
リストとデータ列について濃いを描画し、、その色を黒色に指定する	plt.plot(xdata, ydata, linestyle='deep', color='k')
ヒストグラムを描画して、その色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
２つの変数をそれぞれ定義する	x, y = i, j
集合から任意の要素を取り出す	aSet.pop()
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
数字を全部使う	string.digits
データフレームを'A'列の値でグループ分けして、列挙する	[(name, group) for name, group in df.groupby('A')]
リストとリストのパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
線グラフを描画して、その色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
線グラフを描画して色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
xが-9以上、9以下か調べる	-9 <= x <= 9
プログラムのファイルの名前	sys.argv[0]
文字列は全て印字できるか調べる	s.isprintable()
データ列の曜日数	ds.dt.dayofweek
線グラフを描画して、色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
データ列を10の位で丸める	ds.round(-1)
日付データが何日か知る	aDate.day
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
1からNまでの配列	np.arange(1, N+1)
1行だけ改行を取り除いて標準入力から読み込む	sys.stdin.readline().rstrip()
＜オプション＞バッファリングのサイズを変更する	buffering = 4096
データフレームに重複があるか見る	df.duplicated()
グラフの中のフォントをfontNameに設定する	sns.set(font=fontName)
nが-9以上9以下かどうか調べる	-9 <= n <= 9
列を配列として抽出する	df[column].values
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
空白を求める	' '
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
＜オプション＞星マーカーを描画する	marker = '*'
ユークリッド距離	math.dist(point, point2)
散布図に濃い色のマーカーを使う	plt.plot(xdata, ydata, c='deep')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
折れ線グラフを描画して、その色を赤に指定する	plt.plot(データ列, データ列2, color='red')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
全ての空白文字	string.whitespace
データフレームの相関行列	df.corr()
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
nの無限数列	itertools.repeat(n)
numpyを使う	import numpy as np
データフレームを'A'列でソートし、、更新する	df.sort_values(by='A', inplace=True)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞ターコイズ色を用いる	color = 'turquoise'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データ列のユニークな値の個数	ds.nunique()
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
xのハッシュ値	hash(x)
実数の正弦	math.sin(x)
折れ線グラフを描画して、その色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
n2分のn	n / n2
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='grey')
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
データフレームの末尾	df.tail()
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
実数の逆双曲線正接	math.atanh(x)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
二つの変数を同じ値にする	x = y = n
グローバル変数の一覧	globals()
データフレームの列を10の位で四捨五入する	df[col].round(-1)
＜オプション＞グラフの色をオリベドラブにセットする	color = 'olivedrab'
折れ線グラフの▽マーカーを黄色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
ファイルを全部、読み込む	f.read()
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
xを整数に変換する	int(x)
データフレームから指定された列だけ抽出する	df[[column]]
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームの列の名前を列挙する	df.columns
折れ線にラベルを付ける	plt.plot(xdata, ydata, label=untitled)
文字列の中の正規表現による全マッチを使う	re.findall(pattern, s)
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
＜オプション＞追加モードを使う	mode = 'a'
両端キュー中の値のインデックス	deq.index(element)
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
データフレームを列によってソートする	df.sort_values(by=column)
10を底とする実数の対数	math.log10(x)
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
データフレームの指定されたカラムの名前一覧の列のみ選択する	df[columns]
データフレームの指定された列をリストに変換する	df[column].values.tolist()
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
＜オプション＞未入力値を先頭にする	na_position = 'first'
線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
変数について数式の微分を行う	sympy.diff(e, z)
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
文字列が文字列リストに含まれるか調べる	s in aStringList
データフレームのリストカラムの標本標準偏差	df[aList].std()
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
列のコンビネーション	itertools.combinations(iterable, n)
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
データフレームのリストカラムをValueMapで一度に変更する	df[aList].replace(ValueMap)
ヒストグラムを描画して、その色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
散布図をカラーコードの菱形マーカーとして描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
散布図を赤い左三角マーカーで描く	plt.plot(xdata, ydata, marker='<', c='r')
リストをヒストグラムで可視化する	plt.hist(aList)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
＜オプション＞星マーカーを使う	marker = '*'
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データ列とリストの散布図に赤いクロスマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c='r')
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
nの二乗	n ** 2
＜オプション＞グレー色を使う	color = 'grey'
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
折れ線グラフに黄色い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
標準入力を得る	sys.stdin
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
＜オプション＞グラフの色を白に設定する	color = 'white'
最頻値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mode().iloc[0])
グラフの描画を見やすくする	import seaborn as sns
データフレームの欠損値をメディアンに変更する	df.fillna(df.median())
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
ヒストグラムを描画して、その色をサーモンに設定する	plt.hist(データ列, color='salmon')
＜オプション＞茶色色を使う	color = 'brown'
文字列を走査し正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
＜オプション＞グラフの色をベージュに変更する	color = 'beige'
セットの補集合を計算する	aSet.difference(aSet2)
オブジェクトが文字列型か	isinstance(obj, str)
カウンタの項目一覧	aCounter.keys()
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
nを半分にする	n /= 2
折れ線グラフの色を赤くする	plt.plot(データ列, データ列2, color='r')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
＜オプション＞トマト色を使う	color = 'tomato'
赤い四角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='s', c='r')
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
ヒストグラムを描画して、その色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
列のNaNを前の行の値で埋める	ds.fillna(method='ffill')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
オブジェクトが関数か調べる	callable(obj)
nが-9以上、9以下か調べる	-9 <= n <= 9
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
データフレームを'A'列の値でグループ化する	df.groupby('A')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
データフレームのリストカラムの最頻値	df[aList].mode()
データ列の欠損値をxで埋める	ds.fillna(x)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストのn番目のを使う	aList[n]
nマイナスn2	n - n2
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
データ列とラベルを指定して、棒グラフを描く	plt.bar(ラベル列, データ列)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
ヒストグラムを描画して、その色をマゼンタに変更する	plt.hist(データ列, color='magenta')
配列を分割数nを用いてビニングする	pd.cut(aArray, n)
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
配列の累積積	np.cumprod(aArray)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
＜オプション＞色をスプリンググリーンに設定する	color = 'springgreen'
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフに緑色の△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
データフレームのカラムの中にある文字列の数をカウントする	df[col].isin([value]).sum()
リストの平均値	sum(aList)/len(aList)
折れ線グラフを描画して、色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
両端キューの最大長	deq.maxlen
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
辞書のキーの一覧	aDict.keys()
＜オプション＞ダークグレー色を使う	color = 'darkgray'
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
いつまでも文字列が繰り返すイテラブル	itertools.repeat(element)
データフレームから列を三つ選択する	df[[column, column2, column3]]
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
＜オプション＞大バツマーカーを使う	marker = 'X'
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
＜オプション＞バイナリ書き込み用に指定する	mode = 'wb'
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
散布図に下三角マーカーを使う	plt.plot(xdata, ydata, marker='v')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
二つのリストから辞書	dict(zip(aList, aList2))
線グラフを描画して、色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
NaN	math.nan
配列とデータ列についての散布図に黒いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='k')
リストの中の最大値	max(aList)
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
マッピングの値を列挙する	aDict.values()
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
折れ線グラフを描画して、色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
データフレームのインデックスの名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
折れ線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
プラットホームの名前	sys.platform
数式を部分分数として展開する	sympy.apart(e)
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
nからn2までのスライス	slice(n, n2)
＜オプション＞ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
整数nのビット長	n.bit_length()
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
両端キューの上限長を見る	deq.maxlen
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
辞書の項目数	len(aDict)
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
配列の要素ごとに加算する	aArray + aArray2
データフレームを複数の列でで降順に並べる	df.sort_values(by=column, ascending=False)
辞書のキーとその値を列挙する	aDict.items()
折れ線グラフに大きさnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
リストをタプルに変換する	tuple(aList)
文字列中の部分文字列をカウントする	s.count(sub)
両端キューが空であるか調べる	len(deq) == 0
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
ヒストグラムを描画してその色をグレーにする	plt.hist(データ列, color='grey')
実数の正接の逆数	math.atan(x)
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
シーケンスの長さnの順列	itertools.permutations(iterable, n)
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
二つの浮動小数点数が近似値	math.isclose(x, x2)
nがn2以下かどうか調べる	n <= n2
nが正の数かどうか調べる	n > 0
配列の標準偏差	np.std(aArray)
ファイルパスをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
＜オプション＞オーキッド色を使う	color = 'orchid'
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフを描画してその色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
実数を三乗する	x ** 3
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
カウンタを高頻出方から列挙する	aCounter.most_common()
イテラブルとリストについて相関を可視化する	plt.scatter(xdata, ydata)
システム時刻で乱数を初期化する	random.seed()
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
高頻出な方からカウンタを列挙する	aCounter.most_common()
現在のモジュール	sys.modules[__name__]
＜オプション＞ネイビー色を使う	color = 'navy'
データ列はどれだけ、分散しているか見る	ds.var()
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)

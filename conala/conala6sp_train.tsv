Concatenate elements of a list _A_ of multiple integers to a single integer	sum(d * 10 ** i for i, d in enumerate(_A_[::-1]))
convert a list of integers into a single integer	r = int(''.join(map(str, x)))
convert a DateTime string back to a DateTime object of format _A_	datetime.strptime('2010-11-13 10:33:54.227806', _A_)
get the average of a list values for each key in dictionary _A_)	[(i, sum(j) / len(j)) for i, j in list(_A_.items())]
zip two lists _A_ and _B_ into a list of two tuples containing elements at the same index in each list	zip(_A_, _B_)
prepend string _A_ to all items in list _B_	['_A_{0}'.format(i) for i in _B_]
regex for repeating words in a string _A_	re.sub('(?<!\\S)((\\S+)(?:\\_A_+\\2))(?:\\_A_+\\2)+(?!\\S)', '\\1', _A_)
normalize a pandas dataframe _A_ by row	_A_.div(_A_.sum(axis=1), axis=0)
swap values in a tuple/list inside a list _A_	map(lambda t: (t[1], t[0]), _A_)
Swap values in a tuple/list in list _A_	[(t[1], t[0]) for t in _A_]
Find next sibling element in Python Selenium?	"driver.find_element_by_xpath(""//p[@id, 'one']/following-sibling::p"")"
find all occurrences of the pattern _A_ within _B_	re.findall(_A_, _B_)
generate the combinations of 3 from a set _A_	print(list(itertools.combinations(_A_, 3)))
add multiple columns _A_, _B_, _C_ to pandas data frame _D_ from lambda function _E_	_D_[['_A_', '_B_', '_C_']] = _D_.apply(_E_, axis=1)
BeautifulSoup search string _A_ inside tag _B_	soup.find_all(_B_, string=_A_)
Convert a datetime object _A_ into readable format _B_	_A_.strftime('_B_')
parse string _A_ to int when string contains a number	int(''.join(c for c in _A_ if c.isdigit()))
add dictionary _A_ to key _B_ of dictionary _C_	_C_[_B_].update(_A_)
transforming the string _A_ into dictionary	dict(map(int, x.split(':')) for x in _A_.split(','))
How to select element with Selenium Python xpath	"driver.find_element_by_xpath(""//div[@id='a']//a[@class='click']"")"
find rows matching `(0,1)` in a 2 dimensional numpy array _A_	np.where((_A_ == (0, 1)).all(axis=1))
How to delete a record in Django models?	SomeModel.objects.filter(id=id).delete()
build a dictionary containing the conversion of each list in list _A_ to a key/value pair as its items	dict(_A_)
convert list _A_ to dictionary having each two adjacent elements as key/value pair	dict(zip(_A_[::2], _A_[1::2]))
assign float 9.8 to variable _A_	_A_ = 9.8
"separate numbers from characters in string ""30m1000n20m"""	re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')
separate numbers and characters in string _A_	re.findall('([0-9]+|[A-Z])', _A_)
separate numbers and characters in string _A_	re.findall('([0-9]+)([A-Z])', _A_)
Get a list of  words from a string _A_ removing punctuation	re.compile('\\w+').findall('_A_')
Convert string _A_ into datetime.time object	datetime.datetime.strptime(_A_, '%H:%M').time()
request url _A_ without verifying SSL certificates	requests.get(_A_, verify=False)
Extract values not equal to 0 from numpy array _A_	_A_[a != 0]
map two lists _A_ and _B_ into a dictionary	new_dict = {k: v for k, v in zip(_A_, _B_)}
map two lists _A_ and _B_ into a dictionary	dict((k, v) for k, v in zip(_A_, _B_))
map two lists _A_ and _B_ into a dictionary	dict([(k, v) for k, v in zip(_A_, _B_)])
find the string matches within parenthesis from a string _A_ using regex	m = re.search('\\[(\\w+)\\]', _A_)
Enable the SO_REUSEADDR socket option in socket object _A_ to fix the error `only one usage of each socket address is normally permitted`	_A_.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
append the sum of each tuple pair in the grouped list _A_ and list _B_ elements to list _C_	_C_ = [(a + b) for a, b in zip(_A_, _B_)]
converting hex string _A_ to its integer representations	[ord(c) for c in _A_.decode('hex')]
sort list _A_ by second element of each tuple in ascending and third element of each tuple in descending	print(sorted(_A_, key=lambda t: (-t[2], t[0])))
get list of duplicated elements in range of 3	[y for x in range(3) for y in [x, x]]
read the contents of the file _A_ into _B_	_B_ = open(_A_).read()
divide each element in list _A_ by integer _B_	_A_[:] = [(x / _B_) for x in _A_]
python: dots in the name of variable in a format string	"""""""Name: {0[person.name]}"""""".format({'person.name': 'Joe'})"
replace white spaces in dataframe _A_ with _B_	_A_.replace(' ', _B_, regex=True)
convert date _A_ to datetime	datetime.datetime.combine(_A_, datetime.time.min)
convert tuple _A_ to string _B_	_B_ = str(_A_)
get modified time of file _A_	time.ctime(os.path.getmtime(_A_))
get creation time of file _A_	time.ctime(os.path.getctime(_A_))
get modification time of file _A_	t = os.path.getmtime(_A_)
get modification time of file _A_	os._A_.getmtime(_A_)
get modified time of file _A_	print(('last modified: %s' % time.ctime(os.path.getmtime(_A_))))
get the creation time of file _A_	print(('created: %s' % time.ctime(os.path.getctime(_A_))))
get the creation time of file _A_	return os.path.getctime(_A_)
execute os command _A_TASKKILL /F /IM firefox.exe_A_	_B___B_A_B___B_ _B___B_A_B___B_o_B___B_A_B___B_s_B___B_A_B___B_._B___B_A_B___B_s_B___B_A_B___B_y_B___B_A_B___B_s_B___B_A_B___B_t_B___B_A_B___B_e_B___B_A_B___B_m_B___B_A_B___B_(_B___B_A_B___B_'_B___B_A_B___B_T_B___B_A_B___B_A_B___B_A_B___B_S_B___B_A_B___B_K_B___B_A_B___B_K_B___B_A_B___B_I_B___B_A_B___B_L_B___B_A_B___B_L_B___B_A_B___B_ _B___B_A_B___B_/_B___B_A_B___B_F_B___B_A_B___B_ _B___B_A_B___B_/_B___B_A_B___B_I_B___B_A_B___B_M_B___B_A_B___B_ _B___B_A_B___B_f_B___B_A_B___B_i_B___B_A_B___B_r_B___B_A_B___B_e_B___B_A_B___B_f_B___B_A_B___B_o_B___B_A_B___B_x_B___B_A_B___B_._B___B_A_B___B_e_B___B_A_B___B_x_B___B_A_B___B_e_B___B_A_B___B_'_B___B_A_B___B_)_B___B_A_B___B_ _B___B_A_B___B_
split string _A_ on whitespaces using a generator	"return (x.group(0) for x in re.finditer(""[A-Za-z']+"", _A_))"
Unpack each value in list _A_ to its placeholder _B_ in string '%.2f'	""""""", """""".join(['_B_.2f'] * len(_A_))"
match regex pattern _A_ with string _B_	print(re.match(_A_, _B_).group(1))
replace parentheses and all data within it with empty string _A_ in column _B_ of dataframe _C_	_C_[_B_].str.replace('\\(.*\\)', _A_)
create a list _A_ containing elements form list _B_ if first element of list _B_ is in list _C_	_A_ = [x for x in _B_ if x[0] in _C_]
generate all possible string permutations of each two elements in list _A_	print([''.join(a) for a in combinations(_A_, 2)])
get a list of items form nested list _A_ where third element of each item contains string _B_	[x for x in _A_ if _B_ in x[2]]
Sort lists in the list _A_ by the element at index 3 of each list	_A_.sort(key=lambda x: x[3])
Log message _A_ on the root logger.	logging.info(_A_)
Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib	fig.add_subplot(1, 1, 1)
Sort dictionary _A_ by value in ascending order	sorted(list(_A_.items()), key=operator.itemgetter(1))
Sort dictionary _A_ by value in ascending order	sorted(_A_, key=_A_.get)
Sort dictionary _A_ by value in descending order	sorted(_A_, key=_A_.get, reverse=True)
Sort dictionary _A_ by value in ascending order	sorted(list(_A_.items()), key=(lambda x: x[1]))
elementwise product of 3d arrays _A_ and _B_	np.einsum('ijk,ikl->ijl', _A_, _B_)
Print a string _A_ with string formatting	print('I have: {0.price}'.format(_A_))
Write a comment _A_ to a file object _B_	_B_.write('_A_')
move the last item in list _A_ to the beginning	_A_ = _A_[-1:] + _A_[:-1]
Parse DateTime object _A_ using format _B_	_A_.strftime(_B_)
Normalize line ends in a string _A_	_A_.replace('\r\n', '\n').replace('\r', '\n')
find the real user home directory using python	os.path.expanduser('~user')
index a list _A_ with another list _B_	T = [_A_[i] for i in _B_]
get a list of words _A_ of a file _B_	_A_ = open(_B_).read().split()
Get a list of lists with summing the values of the second element from each list of lists _A_	[[sum([x[1] for x in i])] for i in _A_]
summing the second item in a list of lists of lists	[sum([x[1] for x in i]) for i in data]
sort objects in `Articles` in descending order of counts of _A_	Article.objects.annotate(like_count=Count('_A_')).order_by('-like_count')
return a DateTime object with the current UTC date	today = datetime.datetime.utcnow().date()
create a list containing the multiplication of each elements at the same index of list _A_ and list _B_	[(a * b) for a, b in zip(_A_, _B_)]
fetch smilies matching regex pattern _A_ in string _B_	re.findall(_A_, _B_)
match the pattern _A_ to the string _B_	re.match(_A_, _B_)
convert a list of objects _A_ to json string _B_	_B_ = json.dumps([ob.__dict__ for ob in _A_])
create a list _A_ of _B_ zeros	_A_ = [0] * _B_
decode the string _A_  to UTF-8	_A_.decode('utf-8', 'ignore')
Match regex pattern _A_ on string _B_	re.findall(_A_, _B_)
Create a key _A_ if it does not exist in dict _B_ and append element _C_ to value.	_B_.setdefault(_A_, []).append(_C_)
Get the value of the minimum element in the second column of array _A_	_A_[np.argmin(_A_[:, (1)])]
extend dictionary _A_ with key/value pairs of dictionary _B_	_A_.update(_B_)
removing key values pairs with key _A_ from a list of dictionaries _B_	[{k: v for k, v in d.items() if k != _A_} for d in _B_]
Removing key values pairs from a list of dictionaries	[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]
create 3 by 3 matrix of random numbers	numpy.random.random((3, 3))
make new column _A_ in panda dataframe by adding values from other columns _B_ and _C_	df[_A_] = df[_B_] + df[_C_]
create a list of values from the dictionary _A_ that have a key with a case insensitive match to _B_	[value for key, value in list(_A_.items()) if _B_ in key.lower()]
append a path _A_ in system path	sys.path.append('_A_')
get all digits in a string _A_ after a _B_ character	re.findall('\\d+(?=_B_^_B_]+$)', _A_)
python pickle/unpickle a list to/from a file _A_	pickle.load(open(_A_, 'rb'))
Clicking a link using selenium using python	driver.find_element_by_xpath('xpath').click()
count unique index values in column _A_ in pandas dataframe _B_	_B_.groupby(level=_A_).agg(lambda x: x.index.get_level_values(1).nunique())
Create a pandas dataframe of values from a dictionary _A_ which contains dictionaries of dictionaries	pd.concat(map(pd.DataFrame, iter(_A_.values())), keys=list(_A_.keys())).stack().unstack(0)
find out the number of non-matched elements at the same index of list _A_ and list _B_	sum(1 for i, j in zip(_A_, _B_) if i != j)
make all keys lowercase in dictionary _A_	_A_ = {(a.lower(), b): v for (a, b), v in list(_A_.items())}
sort list _A_ based on first element of each tuple and by the length of the second element of each tuple	_A_.sort(key=lambda x: [x[0], len(x[1]), x[1]])
trim whitespace in string _A_	_A_.strip()
trim whitespace (including tabs) in _A_ on the left side	_A_ = _A_.lstrip()
trim whitespace (including tabs) in _A_ on the right side	_A_ = _A_.rstrip()
trim characters _A_ in _B_	_B_ = _B_.strip(_A_)
trim whitespaces (including tabs) in string _A_	print(re.sub('[\\_A_+]', '', _A_))
In Django, filter _A_ based on all entities in [_B_, _C_, _D_]	_A_.exclude(prerequisites__status__in=[_B_, _C_, _D_])
Change background color in Tkinter	root.configure(background='black')
convert dict _A_ to numpy structured array	numpy.array([(key, val) for key, val in _A_.items()], dtype)
Concatenate dataframe _A_ to dataframe _B_ sorted by values of the column _C_	pd.concat([_A_, _B_.sort_values(_C_)])
replace the last occurence of an expression _A_ with _B_ in a string _C_	re.sub('(.*)_A_', '\\1_B_', _C_)
get the maximum of _A_ and _B_ values in a dictionary	print(max(d, key=lambda x: (d[x][_A_], d[x][_B_])))
Filter Django objects by _A_ with ids _B_ and _C_	Book.objects.filter(_A___id=_B_).filter(_A___id=_C_)
split string _A_ based on case-insensitive matching using string _B_	re.compile(_B_, re.IGNORECASE).split(_A_)
get list of sums of neighboring integers in string _A_	[sum(map(int, s)) for s in _A_.split()]
Get all the keys from dictionary _A_ whose value is _B_	[i for i in _A_ if _A_[i] == _B_]
converting byte string _A_ in unicode string	_A_.decode('unicode_escape')
unpivot first 2 columns into new columns _A_ and _B_ from a pandas dataframe _C_	pd.melt(_C_, id_vars=['farm', 'fruit'], var_name=_A_, value_name=_B_)
add key _A_ and value _B_ to dictionary `default_data `	default_data['_A_'] = _B_
add key _A_ and value _B_ to dictionary `default_data `	default_data.update({'_A_': _B_, })
add key value pairs _A_ , 4 and _B_ , 5 to dictionary _C_	_C_.update({_A_: 4, _B_: 5, })
Get the first and last 3 elements of list _A_	_A_[:3] + _A_[-3:]
reset index to default in dataframe _A_	_A_ = _A_.reset_index(drop=True)
For each index _A_ from 0 to 3, append the element at index _A_ of list _B_ to the list at index _A_ of list a.	[a[_A_].append(_B_[_A_]) for _A_ in range(3)]
get canonical path of the filename _A_	os._A_.realpath(_A_)
check if dictionary _A_ is in dictionary _B_	set(_A_).issubset(set(_B_))
find all the indexes in a Numpy 2D array where the value is 1	zip(*np.where(a == 1))
How to find the index of a value in 2d array in Python?	np.where(a == 1)
Collapse hierarchical column index to level 0 in dataframe _A_	_A_.columns = _A_.columns.get_level_values(0)
create a matrix from a list _A_	x = scipy.matrix(_A_).transpose()
add character _A_ after word _B_ in string _C_	_C_ = re.sub('(\\bget\\b)', '\\1_A_', _C_)
get a numpy array that contains the element wise minimum of three 3x1 arrays	np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)
add a column _A_ to dataframe _B_ for index in range	_B_[_A_] = list(range(1, len(_B_) + 1))
set environment variable _A_ equal to 1	os.environ[_A_] = '1'
Get a environment variable _A_	print(os.environ['_A_'])
set environment variable _A_ to _B_	os.environ[_A_] = _B_
update dictionary _A_, overwriting values where keys are identical, with contents of dictionary _B_	_A_.update(_B_)
get all the values in column _A_ from pandas data frame _B_	_B_['_A_']
make a line plot with errorbars, _A_, from data `x, y, err` and set color of the errorbars to _B_ (yellow)	_A_ = plt.errorbar(x, _B_, yerr=err, ecolor='_B_')
find all files with extension _A_ in directory _B_	results += [each for each in os.listdir(_B_) if each.endswith(_A_)]
add unicode string _A_ to UTF-8 decoded string _B_	print(_B_.decode('utf8') + _A_)
lower-case the string obtained by replacing the occurrences of regex pattern _A_ in string _B_ with eplacement _C_	re.sub(_A_, _C_, _B_).lower()
Setting stacksize in a python script	os.system('ulimit -s unlimited; some_executable')
format a string _A_ using string formatting	"""""""{0:.3g}"""""".format(_A_)"
append the first element of array _A_ to array _A_	numpy.append(_A_, _A_[0])
return the column for value 38.15 in dataframe _A_	_A_.ix[:, (_A_.loc[0] == 38.15)].columns
merge 2 dataframes _A_ and _B_ with same values in a column _C_ with and index _D_	_B_[_C_] = _B_.CET.map(_A_.set_index(_D_)[_C_])
load a json data _A_ into variable _B_	_B_ = json.loads(_A_)
convert radians 1 to degrees	math.cos(math.radians(1))
count the number of integers in list _A_	sum(isinstance(x, int) for x in _A_)
replacing  _A_ with _B_ in a string  using regular expressions	'used\u200b'.replace(_A_, _B_)
run function _A_ simultaneously	threading.Thread(target=_A_).start()
sum of squares values in a list _A_	sum(i * i for i in _A_)
calculate the sum of the squares of each value in list _A_	sum(map(lambda x: x * x, _A_))
Create a dictionary _A_ from list _B_	_A_ = dict(((key, value) for (key, value) in _B_))
Create a dictionary _A_ from list _B_	_A_ = {key: value for (key, value) in _B_}
Create a dictionary _A_ from list of key value pairs _B_	_A_ = {k: v for (k, v) in _B_}
round off entries in dataframe _A_ column _B_ to two decimal places, and entries in column _C_ to three decimal places	_A_.round({'_B_': 2, '_C_': 3})
Make function _A_ output nothing in curl _B_	_B_.setopt(pycurl._A_, lambda x: None)
return a random word from a word list _A_	print(random.choice(_A_))
Find a max value of the key _A_ in a nested dictionary _B_	max(_B_, key=lambda x: _B_[x]['_A_'])
get list of string elements in string _A_ delimited by commas, putting _B_ in place of empty strings	[(int(x) if x else _B_) for x in _A_.split(',')]
split string _A_ into a list of strings based on _B_ then replace empty strings with zero	""""""","""""".join(x or '0' for x in _A_.split(_B_))"
regular expression match nothing	re.compile('$^')
regular expression syntax for not to match anything	re.compile('.\\A|.\\A*|.\\A+')
create a regular expression object with a pattern that will match nothing	re.compile('a^')
drop all columns in dataframe _A_ that holds a maximum value bigger than 0	_A_.columns[_A_.max() > 0]
check if date _A_ is equal to today's date	_A_.date() == datetime.today().date()
print bold text _A_	print('\x1b[1m' + _A_)
remove 20 symbols in front of _A_ in string 'unique12345678901234567890.mkv'	re_A_sub('_A_{20}(_A_mkv)', '\\1', 'unique12345678901234567890_A_mkv')
Define a list with string values _A_	_A_
substitute multiple whitespace with single whitespace in string _A_	""""""" """""".join(_A_.split())"
print a floating point number 2.345e-67 without any truncation	print('{:.100f}'.format(2.345e-67))
Check if key _A_ in _B_	(_A_ in _B_)
Check if key _A_ in _B_	(_A_ in _B_)
Check if key _A_ in _B_	(_A_ in _B_)
Check if a given key _A_ exists in dictionary _B_	if (_A_ in _B_):<nl>    pass
Check if a given key _A_ exists in dictionary _B_	if (_A_ in _B_):<nl>    pass
create a django query for a list of values _A_	Blog.objects.filter(pk__in=[_A_])
read a binary file _A_	f = open(_A_, 'rb')
insert _A_ between every three digit before _B_ and replace _C_ with _B_ in 12345678.46	format(12345678_D_46, _C_)_D_replace(_C_, _A_)_D_replace(_B_, _C_)
Join pandas data frame _A_ and _B_ with left join by _C_ and right join by _D_	pd.merge(_A_, _B_, left_on='_C_', right_on='_D_')
calculate ratio of sparsity in a numpy array _A_	np.isnan(_A_).sum() / np.prod(_A_.shape)
reverse sort items in default dictionary _A_ by the third item in each key's list of values	sorted(iter(_A_.items()), key=lambda k_v: k_v[1][2], reverse=True)
Sort dictionary _A_ in ascending order based on second elements of its values	sorted(list(_A_.items()), key=lambda v: v[1])
reverse sort dictionary _A_ based on its values	sorted(list(_A_.items()), key=lambda k_v: k_v[1], reverse=True)
sorting a defaultdict _A_ by value	sorted(list(_A_.items()), key=lambda k_v: k_v[1])
open a file _A_ in the same directory as a python script	f = open(os.path.join(__location__, _A_))
open the file _A_ in _B_ mode	f = open(_A_, _B_)
divide the values with same keys of two dictionary _A_ and _B_	{k: (float(_B_[k]) / _A_[k]) for k in _B_}
divide the value for each key _A_ in dict _B_ by the value for the same key _A_ in dict _D_	{_A_: (_B_[_A_] / _D_[_A_]) for _A_ in list(_D_.keys()) & _B_}
divide values associated with each key in dictionary _A_ from values associated with the same key in dictionary _B_	dict((k, float(_B_[k]) / _A_[k]) for k in _B_)
write dataframe _A_ to csv file _B_ with dates formatted as yearmonthday  _C_	_A_.to_csv(_B_, date_format='_C_')
remove a key _A_ from a dictionary _B_	_B_.pop(_A_, None)
replace NaN values in array _A_ with zeros	b = np.where(np.isnan(_A_), 0, _A_)
subprocess run command _A_ through the shell	subprocess.call(_A_, shell=True)
run command _A_ on command line tools as separate processes	subprocess.call(_A_, shell=True)
replace percent-encoded code in request _A_ to their single-character equivalent	_A_ = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))
remove white spaces from the end of string _A_	"""""_A_"""".rstrip()"
Replace special characters in utf-8 encoded string _A_ using the %xx escape	urllib.parse.quote(_A_.encode('utf-8'))
URL encoding in python	urllib.parse.quote_plus('a b')
Create an array containing the conversion of string _A_ into separate elements	np.array(map(int, _A_))
convert a string _A_ to numpy array of integer values	print(np.array(list(_A_), dtype=int))
convert an rgb image _A_ into grayscale _B_	_B_ = cv2.imread(_A_, 0)
sort list _A_ in descending order based on the second item of each tuple in it	_A_.sort(key=lambda x: x[2], reverse=True)
How to find all occurrences of an element in a list?	indices = [i for i, x in enumerate(my_list) if x == 'whatever']
execute shell command _A_ with a | pipe in it	subprocess.call(_A_, shell=True)
count the number of trailing question marks in string _A_	len(_A_) - len(_A_.rstrip('?'))
remove dollar sign _A_ from second to last column data in dataframe _B_ and convert the data into floats	_B_[df.columns[1:]].replace('[\\_A_,]', '', regex=True).astype(float)
Merge column  _A_ in dataframe _B_ with column _A_ on dataframe _C_	_C_.merge(_B_, how='left', on=_A_)
switch positions of each two adjacent characters in string _A_	print(''.join(''.join(i) for i in zip(a2, a1)) + _A_[-1] if len(_A_) % 2 else '')
make a window _A_ jump to the front	_A_.attributes('-topmost', True)
make a window _A_ jump to the front	_A_.lift()
Convert list of booleans _A_ into a hex string	hex(int(''.join([str(int(b)) for b in _A_]), 2))
convert the sum of list _A_ into a hex presentation	hex(sum(b << i for i, b in enumerate(reversed(_A_))))
print the string _A_, the value of the variable _B_, the string _C_ and the value of the variable _D_ in one print call.	print(('_A_', _B_, '_C_', _D_))
print multiple arguments _A_ and _B_.	print('Total _B_ for {} is {}'.format(_A_, _B_))
print a string using multiple strings _A_ and _B_	print('Total _B_ for %s is %s  ' % (_A_, _B_))
print string including multiple variables _A_ and _B_	print(('Total _B_ for', _A_, 'is', _B_))
serve a static html page _A_ at the root of a django project	url('^$', TemplateView.as_view(template_name=_A_))
use a list of values `[3,6]` to select rows from a pandas dataframe _A_'s column 'A'	_A_[df['A'].isin([3, 6])]
How to get the concrete class name as a string?	instance.__class__.__name__
execute python code _A_ in a virtualenv _B_ from matlab	system('_B_/bin/python _A_')
django return a QuerySet list containing the values of field _A_ in model _B_	_B_.objects.values_list(_A_, flat=True)
find all digits in string _A_ and put them to a list	re.findall('\\d|\\d,\\d\\)', _A_)
prompt string _A_ to the console	input(_A_)
print string _A_ as hex literal	"""""""_A_"""""".encode('hex')"
insert a new field _A_ on an existing document  _B_ using pymongo	db.Doc.update({'_id': _B_['_id']}, {'$set': {_A_: myGeolocCountry}})
Write a regex statement to match _A_ to 'lolllll'.	re.sub('l+', 'l', 'lollll')
BeautifulSoup find all _A_ elements in HTML string _B_ at the five stride starting from the fourth element	rows = _B_.findAll(_A_)[4::5]
reverse all x-axis points in pyplot	plt.gca().invert_xaxis()
reverse y-axis in pyplot	plt.gca().invert_yaxis()
stack two dataframes next to each other in pandas	pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)
create a json response _A_	return HttpResponse(json.dumps(_A_), content_type='application/json')
decode escape sequences in string _A_	_A_.decode('string_escape')
calculate the md5 checksum of a file named  _A_	hashlib.md5(open(_A_, 'rb').read()).hexdigest()
Find all keys from a dictionary _A_ whose values are _B_	[k for k, v in _A_.items() if v == _B_]
create a set containing all keys' names from dictionary _A_	{k for d in _A_ for k in list(d.keys())}
create a set containing all keys names from list of dictionaries _A_	set([i for s in [list(d.keys()) for d in _A_] for i in s])
extract all keys from a list of dictionaries _A_	[i for s in [list(d.keys()) for d in _A_] for i in s]
unpack keys and values of a dictionary _A_ into two lists	keys, values = zip(*list(_A_.items()))
convert a string _A_ containing a decimal to an integer	int(Decimal(_A_))
Convert a string to integer with decimal in Python	int(s.split('.')[0])
check if array _A_ contains all elements of array _B_	numpy.in1d(_A_, _B_).all()
numpy:  check if array _A_ contains all the numbers in array _B_.	numpy.array([(x in _A_) for x in _B_])
Draw node labels _A_ on networkx graph `G ` at position _B_	networkx.draw_networkx__A_(G, _B_, _A_)
make a row-by-row copy _A_ of array _B_	_A_ = [row[:] for row in _B_]
Create 2D numpy array from the data provided in _A_ with each row in the file having same number of values	X = numpy.loadtxt(_A_, delimiter=',')
get a list of items from the list _A_ that contain string _B_	matching = [s for s in _A_ if _B_ in s]
export a pandas data frame _A_ to a file _B_ and retain the indices	_A_.to_csv('_B_', sep='\t')
How do I create a LIST of unique random numbers?	random.sample(list(range(100)), 10)
split a string _A_ on last delimiter	_A_.rsplit(',', 1)
Check if all elements in list _A_ are tupples of long and int	all(isinstance(x, int) for x in _A_)
check if all elements in a list _A_ are the same type _B_	all(isinstance(x, _B_) for x in _A_)
strip a string _A_ of all carriage returns and newlines	_A_.strip()
scroll to the bottom of a web page using selenium webdriver	driver.execute_script('window.scrollTo(0, Y)')
scroll a to the bottom of a web page using selenium webdriver	driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
convert Date object _A_ into a DateTime object	datetime.datetime.combine(_A_, datetime.time())
check if any item from list _A_ is in list _B_	print(any(x in _B_ for x in _A_))
save a numpy array _A_ as an image _B_	scipy.misc.imsave(_B_, _A_)
Remove anything in parenthesis from string _A_ with a regex	_A_ = re.sub(' ?\\([^)]+\\)', '', _A_)
Remove word characters in parenthesis from string _A_ with a regex	_A_ = re.sub(' ?\\(\\w+\\)', '', _A_)
Remove all data inside parenthesis in string _A_	_A_ = re.sub(' \\(\\w+\\)', '', _A_)
check if any elements in one list _A_ are in another list _B_	len(set(_A_).intersection(_B_)) > 0
convert hex string _A_ to decimal	i = int(_A_, 16)
convert hex string _A_ to decimal	int('_A_', 16)
convert hex string _A_ to decimal	int('_A_', 16)
convert hex string _A_ to decimal	ast.literal_eval(_A_)
convert hex string _A_ to decimal	int(_A_, 16)
take screenshot _A_ on mac os x	os.system('screencapture _A_')
Set a window size to _A_ using selenium webdriver	driver.set_window_size(_A_)
replace non-ascii chars from a unicode string u_A_	unicodedata.normalize('NFKD', _A_).encode('ascii', 'ignore')
concatenate dataframe _A_ with _B_ whilst removing duplicates	pandas.concat([_A_, _B_]).drop_duplicates().reset_index(drop=True)
Construct an array with data type float32 _A_ from data in binary file _B_	_A_ = numpy.fromfile(_B_, dtype=numpy.float32)
execute a mv command _A_ in subprocess	subprocess.call('_A_', shell=True)
How to use the mv command in Python with subprocess	subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)
print a character that has unicode value _A_	print('_A_'.encode('utf-8'))
compare contents  at filehandles _A_ and _B_ using difflib	difflib.SequenceMatcher(None, _A_.read(), _B_.read())
Create a dictionary from string _A_ separated by _B_ and _C_	dict((k_C_ int(v)) for k_C_ v in (_A_.split(' _B_ ') for _A_ in s.split('_C_')))
check if all elements in a tuple _A_ are in another _B_	all(i in _B_ for i in _A_)
extract unique dates from time series _A_ in dataframe _B_	_B_[_A_].map(lambda t: t.date()).unique()
right align string _A_ with a width of 7	"""""""{:>7s}"""""".format(_A_)"
read an excel file _A_	open(_A_, 'rb').read(200)
sort dataframe _A_ based on column _B_ in ascending and column _C_ in descending	_A_.sort_values([_B_, _C_], ascending=[True, False], inplace=True)
sort dataframe _A_ based on column _B_ in ascending and column _C_ in descending	_A_.sort_values([_B_, _C_], ascending=[True, False])
sort a pandas data frame with column _A_ in ascending and _B_ in descending order	df1.sort(['_A_', '_B_'], ascending=[True, False], inplace=True)
sort a pandas data frame by column _A_ in ascending, and by column _B_ in descending order	df.sort(['_A_', '_B_'], ascending=[True, False])
django redirect to view _A_	redirect(_A_)
remove all values within one list _A_ from another list _B_	[x for x in _B_ if x not in _A_]
remove the punctuation _A_, _B_, _C_ from a string _D_	out = ''.join(c for c in _D_ if c not in (_A_, _B_, _C_))
BeautifulSoup get value associated with attribute _A_ where attribute _B_ is equal to _C_ in tag _D_ in HTML parsed string _E_	_E_.find(_D_, {_B_: _C_})[_A_]
unquote a urlencoded unicode string _A_	urllib.parse.unquote(_A_)
decode url _A_ from UTF-16 code to UTF-8 code	urllib.parse.unquote(_A_).decode('utf8')
empty a list _A_	del _A_[:]
empty a list _A_	del lst1[:]
empty a list _A_	_A_[:] = []
empty a list _A_	_A_[:] = []
reset index of series _A_	_A_.reset_index(0).reset_index(drop=True)
convert unicode text from list _A_ with index 0 to normal text _B_	_A_[0].getText().encode(_B_)
create a list containing the subtraction of each item in list _A_ from the item prior to it	[(y - x) for x, y in zip(_A_, _A_[1:])]
get value in string _A_ matched by regex pattern _B_	print(re.search(_B_, _A_).group(1))
import all classes from module _A_	globals().update(importlib.import_module('_A_').__dict__)
convert a list of characters _A_ into a string	""""""""""""".join(_A_)"
"Slice _A_ with _B_ as delimiter  to get  ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from url ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"""	_A_.split(_B_)
sort dictionary _A_ by key	od = collections.OrderedDict(sorted(_A_.items()))
sort a dictionary _A_ by key	OrderedDict(sorted(list(_A_.items()), key=(lambda t: t[0])))
Execute a put request to the url _A_	response = requests.put(_A_, data=json.dumps(data), headers=headers)
replace everything that is not an alphabet or a digit with _A_ in _B_.	re.sub('[\\W_]+', _A_, _B_)
create a list of aggregation of each element from list _A_ to all elements of list _B_	[(x + y) for x in _A_ for y in _B_]
convert string `x'  to dictionary splitted by `=` using list comprehension	dict([x.split('=') for x in s.split()])
remove index 2 element from a list _A_	_A_.pop(2)
Delete character _A_ from a string _B_ using python	_B_ = _B_.replace('_A_', '')
How to delete a character from a string using python?	newstr = oldstr.replace('M', '')
get the sum of the products of each pair of corresponding elements in lists _A_ and _B_	sum(x * y for x, y in zip(_A_, _B_))
sum the products of each two elements at the same index of list _A_ and list _B_	list(x * y for x, y in list(zip(_A_, _B_)))
sum the product of each two items at the same index of list _A_ and list _B_	sum(i * j for i, j in zip(_A_, _B_))
sum the product of elements of two lists named _A_ and _B_	sum(x * y for x, y in list(zip(_A_, _B_)))
write the content of file _A_ to file _B_	_B_.write(open('_A_', 'rb').read())
Add 1 to each integer value in list _A_	new_list = [(x + 1) for x in _A_]
get a list of all items in list _A_ with values greater than _B_	[x for x in _A_ if x >= _B_]
set color marker styles _A_ in matplotlib	plt.plot(list(range(10)), '_A_')
set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)	plt.plot(list(range(10)), linestyle='--', marker='o', color='b')
split strings in list _A_ on the first occurring tab _B_ and enter only the first resulting substring in a new list	[i.split('_B_', 1)[0] for i in _A_]
Split each string in list _A_ on the tab character	_A_ = [i.split('\t')[0] for i in _A_]
Sum numbers in a list _A_	sum(_A_)
attach debugger pdb to class _A_	_A_().set_trace()
Compose keys from dictionary _A_ with respective values in dictionary _B_	result = {k: _B_.get(v) for k, v in list(_A_.items())}
add one day and three hours to the present time from datetime.now()	datetime.datetime.now() + datetime.timedelta(days=1, hours=3)
Convert binary string to list of integers using Python	[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]
switch keys and values in a dictionary _A_	dict((v, k) for k, v in _A_.items())
sort a list _A_ by number after second _B_	print(sorted(_A_, key=lambda x: int(x.split(_B_)[2])))
Check if the value of the key _A_ is _B_ in a list of dictionaries _C_	any(d['_A_'] == '_B_' for d in _C_)
remove all instances of [1, 1] from list _A_	_A_[:] = [x for x in _A_ if x != [1, 1]]
remove all instances of _A_ from a list _B_	[x for x in _B_ if x != _A_]
convert a list _A_ to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value	b = {_A_[i]: _A_[i + 1] for i in range(0, len(_A_), 2)}
check whether elements in list _A_ appear only once	len(set(_A_)) == len(_A_)
Generate MD5 checksum of file in the path _A_ in hashlib	print(hashlib.md5(open(_A_, 'rb').read()).hexdigest())
How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list	sorted(list(data.items()), key=lambda x: x[1][0])
randomly switch letters' cases in string _A_	""""""""""""".join(x.upper() if random.randint(0, 1) else x for x in _A_)"
force bash interpreter _A_ to be used instead of shell	"os.system('GREPDB=""echo 123""; _A_ -c ""$GREPDB""')"
Run a command _A_ in bash instead of shell	"os.system('/bin/bash -c ""_A_""')"
access the class variable _A_ from a class object _B_	getattr(_B_, _A_)
Display a image file _A_	Image.open('_A_').show()
replace single quote character in string _A_ with empty string _B_	"""""_A_"""".replace(""'"", _B_)"
sort list _A_ based on variable _B_	_A_.sort(key=_B_)
remove all whitespace in a string _A_	_A_.replace(' ', '')
remove all whitespace in a string _A_	pattern = re.compile('\\s+')<nl>_A_ = re.sub(pattern, '', _A_)
remove whitespace in string _A_ from beginning and end	_A_.strip()
remove all whitespaces in string _A_	_A_ = re.sub('\\s+', '', _A_, flags=re.UNICODE)
remove all whitespaces in a string _A_	_A_ = ''.join(_A_.split())
sum all the values in a counter variable _A_	sum(_A_.values())
find the euclidean distance between two 3-d arrays _A_ and _B_	np.sqrt(((_A_ - _B_) ** 2).sum(-1))
create list _A_ containing 3 empty dictionaries	_A_ = [{}, {}, {}]
find the sums of length 7 subsets of a list _A_	weekly = [sum(visitors[x:x + 7]) for x in range(0, len(_A_), 7)]
Delete an element _A_ from a dictionary _B_	del _B_[_A_]
Delete an element 0 from a dictionary _A_	{i: _A_[i] for i in _A_ if (i != 0)}
Delete an element _A_ from a dictionary _B_	_B_.pop('_A_')
Delete an element with key _A_ dictionary _B_	del _B_[_A_]
solve for the least squares' solution of matrices _A_ and _B_	np.linalg.solve(np.dot(_A_.T, _A_), np.dot(_A_.T, _B_))
split dictionary/list inside a pandas column _A_ into separate columns in dataframe _B_	pd.concat([_B_.drop(_A_, axis=1), pd.DataFrame(_B_[_A_].tolist())], axis=1)
loop through 0 to 10 with step 2	for i in range(0, 10, 2):<nl>    pass
loop through _A_ with step 2	for i in _A_[::2]:<nl>    pass
lowercase string values with key _A_ in a list of dictionaries _B_	[{_A_: x[_A_].lower()} for x in _B_]
convert a list _A_ into string with values separated by spaces	""""""" """""".join(_A_)"
replace each occurrence of the pattern _A_ within _B_ with _C_	re.sub(_A_, _C_, _B_)
check if string _A_ is palindrome	_A_(n) == _A_(n)[::-1]
upload binary file _A_ with ftplib	ftp.storbinary('STOR _A_', open('_A_', 'rb'))
remove all characters from string _A_ upto character _B_	re.sub('.*I', _B_, _A_)
parse a comma-separated string number _A_ into int	int(_A_.replace(',', ''))
combine  dataframe _A_ and dataframe _B_ by index number	pd.merge(_A_, _B_, left_index=True, right_index=True, how='outer')
Combine two Pandas dataframes with the same index	pandas.concat([df1, df2], axis=1)
check if all boolean values in a python dictionary _A_ are true	all(_A_.values())
use regex pattern _A_ to remove digit 12 if followed by 4 other digits in column _B_ of dataframe _C_	_C_._B_.str.replace(_A_, '')
reverse a list _A_	_A_[::(-1)]
reverse a list _A_	reversed(_A_)
reverse a list _A_	_A_.reverse()
reverse a list _A_	list(reversed(_A_))
get first element of each tuple in list _A_	[tup[0] for tup in _A_]
replace character _A_ with character _B_ and character _C_ with character _D_ in file _E_	newcontents = _E_.replace(_A_, _B_).replace(_C_, _D_)
serialise SqlAlchemy RowProxy object _A_ to a json object	json.dumps([dict(list(_A_.items())) for _A_ in rs])
get file _A_	config_file = os.path.expanduser(_A_)
get multiple parameters with same name from a url in pylons	request.params.getall('c')
Convert array _A_ into a correlation matrix	np.corrcoef(_A_)
Find the greatest number in set _A_	print(max_A_)
Retrieve parameter _A_ from a GET request.	self.request.get(_A_)
Add 100 to each element of column _A_ in dataframe _B_	_B_['_A_'].apply(lambda _A_, y: _A_ + y, args=(100,))
Django get first 10 records of model _A_ ordered by criteria _B_ of model _C_	_A_.objects.order_by('-_C____B_')[:10]
delay for _A_ seconds	time.sleep(_A_)
make a 60 seconds time delay	time.sleep(60)
make a 0.1 seconds time delay	sleep(0.1)
make a 60 seconds time delay	time.sleep(60)
make a 0.1 seconds time delay	time.sleep(0.1)
From a list of strings _A_, remove the values that contains numbers.	[x for x in _A_ if not any(c.isdigit() for c in x)]
get the middle two characters of a string _A_ in a pandas dataframe _B_	_B_[_A_].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])
draw a grid line on every tick of plot _A_	_A_.grid(True)
sort list _A_ based on each element's number of occurrences	sorted(_A_, key=lambda x: (-1 * c[x], _A_.index(x)))
Get the value with the maximum length in each column in array _A_	[max(len(str(x)) for x in line) for line in zip(*_A_)]
get the count of each unique value in column _A_ of dataframe _B_ and store in column _C_	_B_._A_.value_counts().reset_index(name='_C_')
calculat the difference between each row and the row previous to it in dataframe _A_	_A_.set_index('Date').diff()
append values _A_ to a set _B_	_B_.update(_A_)
set every two-stride far element to -1 starting from second element in array _A_	_A_[1::2] = -1
Get rank of rows from highest to lowest of dataframe _A_, grouped by value in column _B_, according to value in column _C_	_A_.groupby('_B_')['_C_'].rank(ascending=False)
convert js date object _A_ to python datetime	datetime.strptime(_A_, '%a, %d %b %Y %H:%M:%S %Z')
Convert a binary value _A_ to string	struct.pack('<I', _A_)
append string _A_ to list _B_	_B_.append('_A_')
insert string _A_ at position _B_ of list _C_	_C_.insert(_B_, '_A_')
convert keys in dictionary _A_ into case insensitive	theset = set(k.lower() for k in _A_)
pad _A_ up to a length of 5 characters with _B_	"""""""{s:{c}^{n}}"""""".format(s=_A_, n=5, c=_B_)"
check if type of variable _A_ is a string	isinstance(_A_, str)
check if type of a variable _A_ is string	isinstance(_A_, str)
Convert list of dictionaries _A_ into a flat dictionary	dict(pair for d in _A_ for pair in list(d.items()))
merge a list of dictionaries in list _A_ into a single dict	{k: v for d in _A_ for k, v in list(d.items())}
sort a pandas data frame according to column _A_ in ascending and _B_ in descending order	df.sort_values(['_A_', '_B_'], ascending=[True, False], inplace=True)
sort a pandas data frame by column _A_ in ascending and _B_ in descending order	df.sort(['_A_', '_B_'], ascending=[True, False], inplace=True)
run the code contained in string _A_	eval(_A_)
creating a list of dictionaries [{_A_: 1, _B_: 4, _C_: 2, _D_: 4}, {_A_: 1, _B_: 4, _C_: 1, _D_: 5}]	[{__E__: 1, __G__: 4, __F__: 2, __H__: 4}, {__E__: 1, __G__: 4, __F__: 1, __H__: 5}]
Creating a list of dictionaries in python	[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
get all possible combination of items from 2-dimensional list _A_	list(itertools.product(*_A_))
"Get sum of values of columns  _A_, _B_, _C_ after group by on columns _D_ and ""Item_code"" in dataframe _E_."	_E_.groupby(['_D_', 'Item_Code'])[[_A_, _B_, _C_]].sum()
create list _A_ containing permutations of each element in list _B_ with variable _C_ as tuples	_A_ = [(el, _C_) for el in _B_]
remove Nan values from array _A_	_A_ = _A_[numpy.logical_not(numpy.isnan(_A_))]
remove first directory from path '/First/Second/Third/Fourth/Fifth'	os.path.join(*x.split(os.path.sep)[2:])
Replace _A_ with _B_ in a string _C_	_C_ = _C_.replace('_A_', '_B_')
call bash command _A_ with pipe	subprocess.call(_A_, shell=True)
Convert a hex string `437c2123 ` according to ascii value.	"""""""437c2123"""""".decode('hex')"
Get a list of all fields in class _A_ that are marked _B_	[k for k, v in _A_._fields.items() if v._B_]
remove column by index _A_ in dataframe _B_	_B_ = _B_.ix_A_
change a string of integers _A_ separated by spaces to a list of int	_A_ = map(int, _A_.split())
convert a string of integers _A_ separated by spaces to a list of integers	_A_ = [int(i) for i in _A_.split()]
find element by css selector _A_	driver.find_element_by_css_selector(_A_)
Python / Remove special character from string	re.sub('[^a-zA-Z0-9-_*.]', '', my_string)
display a pdf  file that has been downloaded as _A_	webbrowser.open('file:///_A_')
replace backslashes in string _A_ with empty string _B_	_A_ = _A_.replace('\\', _B_)
remove backslashes from string _A_	_A_.replace('\\', '')
replace value _A_ in any column of pandas dataframe to _B_	df.replace(_A_, '_B_')
convert datetime object to date object in python	datetime.datetime.now().date()
How do I convert datetime to date (in Python)?	datetime.datetime.now().date()
get all sub-elements of an element _A_ in an elementtree	[elem.tag for elem in _A_.iter()]
get all sub-elements of an element tree _A_ excluding the root element	[elem.tag for elem in _A_.iter() if elem is not _A_]
How can I split and parse a string in Python?	"""""""2.7.0_bf4fda703454"""""".split('_')"
move dictionaries in list _A_ to the end of the list if value of key _B_ in each dictionary is not equal to _C_	sorted(_A_, key=lambda x: x[_B_] != _C_)
check if all values of a dictionary _A_ are zero _B_	all(value == _B_ for value in list(_A_.values()))
produce a pivot table as dataframe using column _A_ in datafram _B_ to form the axes of the resulting dataframe	_B_.pivot_table(_A_, rows='X', cols='X2')
call _A_ in a try-except without handling the exception	try:<nl>    _A_<nl>except:<nl>    pass
call _A_ in a try-except without handling the exception	try:<nl>    _A_<nl>except Exception:<nl>    pass
get a sum of 4d array _A_	_A_.sum(axis=0).sum(axis=0)
Convert a datetime object _A_ to microtime	time.mktime(_A_.timetuple()) + _A_.microsecond / 1000000.0
select all rows in dataframe _A_ where the values of column _B_ is bigger than or equal to _C_ and smaller than or equal to _D_	_A_[(_C_ <= _A_[_B_]) & (_A_[_B_] <= _D_)]
sort a list of lists _A_ by index 2 of the inner list	sorted(_A_, key=itemgetter(2))
sort a list of lists _A_ by index 2 of the inner list	_A_.sort(key=(lambda x: x[2]))
sort list _A_ by index 2 of the item	sorted(_A_, key=(lambda x: x[2]))
sort a list of lists _A_ by indices 2,0,1 of the inner list	sorted_list = sorted(_A_, key=itemgetter(2, 0, 1))
find rows of 2d array in 3d numpy array _A_ if the row has value _B_	np.argwhere(np.all(_A_ == _B_, axis=(1, 2)))
From multiIndexed dataframe _A_ select columns _B_ and _C_ within each higher order column _D_ and _E_	_A_.loc[:, (list(itertools.product(['_D_', '_E_'], ['_B_', '_C_'])))]
select only specific columns _A_ and _B_ from a dataframe _C_ with multiindex columns	_C_.loc[:, ([('one', _A_), ('one', _B_), ('two', _A_), ('two', _B_)])]
match a sharp, followed by letters (including accent characters) in string _A_ using a regex	hashtags = re.findall('#(\\w+)', _A_, re.UNICODE)
Rename file from _A_ to _B_	os.rename(_A_, _B_)
Get all texts and tags from a tag _A_ from etree tag _B_ using lxml	print(etree.tostring(_B_.find('_A_')))
Serialize dictionary _A_ and its keys to a JSON formatted string	json.dumps({str(k): v for k, v in _A_.items()})
parse UTF-8 encoded HTML response _A_ to BeautifulSoup object	soup = BeautifulSoup(_A_.read().decode('utf-8'))
delete file _A_	os.remove(_A_)
get the next value greatest to _A_ from a list of numbers _B_	min([x for x in _B_ if x > _A_])
Replace each value in column _A_ of dataframe _B_ with string _C_	_B_[_A_] = _C_
sort list _A_ with positives coming before negatives with values sorted respectively	sorted(_A_, key=lambda x: (x < 0, x))
get the date 6 months from today	six_months = (date.today() + relativedelta(months=(+ 6)))
get the date 1 month from today	(date(2010, 12, 31) + relativedelta(months=(+ 1)))
get the date 2 months from today	(date(2010, 12, 31) + relativedelta(months=(+ 2)))
calculate the date six months from the current date	print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())
get a list of keys of dictionary _A_ sorted by the value of nested dictionary key _B_	sorted(list(_A_.keys()), key=lambda x: _A_[x][_B_], reverse=True)
get all the values from a numpy array _A_ excluding index 3	_A_[np.arange(len(_A_)) != 3]
delete all elements from a list _A_ if a function _B_ taking value as parameter returns _C_	[_A_ for _A_ in lst if _B_(_A_) != _C_]
set dataframe _A_ index using column _B_	_A_.set_index(_B_)
read lines from a csv file _A_ into a list of lists _B_	_B_ = [line.split(',') for line in open('_A_')]
list comprehension that produces integers between 11 and 19	[i for i in range(100) if i > 10 if i < 20]
Get only digits from a string _A_	""""""""""""".join([c for c in _A_ if c.isdigit()])"
split a string _A_ based on tab _B_	re.split('\\t+', _A_.rstrip(_B_))
scalar multiply matrix _A_ by _B_	(_A_.T * _B_).T
remove trailing newline in string _A_	'_A_'.rstrip()
remove trailing newline in string _A_	_A_.rstrip('\n')
remove newline in string _A_	_A_.strip()
remove newline in string _A_ on the right side	_A_.rstrip()
remove newline in string _A_ on the left side	_A_.lstrip()
remove newline in string _A_	_A_.rstrip('\r\n')
remove newline in string _A_ on the right side	_A_.rstrip('\r\n')
remove newline in string _A_ on the right side	_A_.rstrip('\r\n')
remove newline in string _A_ on the right side	'_A_'.rstrip('\n')
split string _A_ into chunks of 16 characters each	re.findall('.{,16}\\b', _A_)
Get a list comprehension in list of lists _A_	[[_A_[i][j] for j in range(len(_A_[i]))] for i in range(len(_A_))]
convert unicode string _A_ to byte string	_A_.encode('latin-1')
split dataframe _A_ where the value of column _B_ is equal to _C_	_A_.groupby((_A_._B_ == _C_).shift(1).fillna(0).cumsum())
save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2	urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')
Find indices of elements equal to zero from numpy array _A_	numpy.where((_A_ == 0))[0]
flush output of python print	sys.stdout.flush()
convert _A_ to string	str(_A_)
convert _A_ to string	_A_.__str__()
convert _A_ to string	str(_A_)
sort list of lists _A_ by the second item in each list	_A_.sort(key=operator.itemgetter(1))
Print variable _A_ and variable _B_ with space string _C_ in between	print(str(_A_) + _C_ + str(_B_))
change NaN values in dataframe _A_ using preceding values in the frame	_A_.fillna(method='ffill', inplace=True)
change the state of the Tkinter `Text` widget to read only i.e. `disabled`	text.config(state=DISABLED)
python sum of ascii values of all characters in a string _A_	sum(map(ord, _A_))
apply itertools.product to elements of a list of lists _A_	list(itertools.product(*_A_))
print number _A_ as thousands separators	'{:,}'.format(_A_)
print number 1255000 as thousands separators	locale.setlocale(locale.LC_ALL, 'en_US')<nl>locale.format('%d', 1255000, grouping=True)
get rows of dataframe _A_ where column _B_ has values _C_	_A_[df._B_.isin(_C_)]
get the value at index 1 for each tuple in the list of tuples _A_	[x[1] for x in _A_]
"split unicode string ""раз два три"" into words"	'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()
sort query set by number of characters in a field _A_ in django model _B_	_B_.objects.extra(select={'_A_': 'Length(name)'}).order_by('_A_')
get a dictionary in list _A_ which key _B_ is closer to a global value 1.77672955975	min(_A_, key=lambda x: (abs(1.77672955975 - x[_B_]), -x['pixels']))
get the non-masked values of array _A_	_A_[~_A_.mask]
Find all words containing letters between A and Z in string _A_	re.findall('\\b[A-Z]', _A_)
create a list _A_ containing 5 lists, each of 5 items  all set to 0	_A_ = [([0] * 5) for i in range(5)]
creating a numpy array of 3d coordinates from three 1d arrays _A_, _B_ and _C_	np.vstack(np.meshgrid(_A_, _B_, _C_)).reshape(3, -1).T
find the minimum value in a numpy array _A_ excluding 0	_A_[arr != 0].min()
get the text of multiple elements found by xpath _A_	browser.find_elements_by_xpath(_A_).text
find all the values in attribute _A_ for the tags whose _B_ attribute is _C_ in selenium	"browser.find_elements_by_xpath(""//*[@_B_='_C_']"").get_attribute('_A_')"
parse a YAML file _A_	with open('_A_', 'r') as stream:<nl>    try:<nl>        print((yaml.load(stream)))<nl>    except yaml.YAMLError as exc:<nl>        print(exc)
parse a YAML file _A_	with open('_A_') as stream:<nl>    try:<nl>        print((yaml.load(stream)))<nl>    except yaml.YAMLError as exc:<nl>        print(exc)
Sort the values of the dataframe _A_ and align the columns accordingly based on the obtained indices after np.argsort.	pd.DataFrame(_A_.columns[np.argsort(_A_.values)], _A_.index, np.unique(_A_.values))
Getting today's date in YYYY-MM-DD	datetime.datetime.today().strftime('%Y-%m-%d')
urlencode a querystring _A_ in python 2	urllib.parse.quote_plus(_A_)
sort a dictionary _A_ by length of its values and print as string	print(' '.join(sorted(_A_, key=lambda k: len(_A_[k]), reverse=True)))
convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists	map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
convert list of tuples to multiple lists in Python	map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
convert list of tuples to multiple lists in Python	zip(*[(1, 2), (3, 4), (5, 6)])
create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list _A_	[(x, y) for x, y in zip(_A_, _A_[1:]) if y == 9]
navigate to webpage given by url `http://www.python.org` using Selenium	driver.get('http://www.google.com.br')
reverse a UTF-8 string _A_	b = _A_.decode('utf8')[::-1].encode('utf8')
extract date from a string _A_	dparser.parse(_A_, fuzzy=True)
extract date from a string _A_	dparser.parse(_A_, fuzzy=True)
extract date from a string _A_	dparser.parse('_A_', fuzzy=True)
Convert a list _A_ to dictionary	dict(map(lambda s: s.split(':'), _A_))
check if string _A_ contains any upper or lower-case ASCII letters	re.search('[a-zA-Z]', _A_)
convert a pandas _A_ groupby object to dataframe	DataFrame({'count': _A_.groupby(['Name', 'City']).size()}).reset_index()
remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `	re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')
get items from list _A_ that don't appear in list _B_	[y for y in _A_ if y not in _B_]
extract the first four rows of the column _A_ from a pandas dataframe _B_	_B_.groupby('_A_').head(4)
Unzip a list of tuples _A_ into a list of lists	zip(*_A_)
combine two lists _A_ and _B_ into a dictionary	dict(zip(_A_, _B_))
combine two lists _A_ and _B_ into a dictionary	dict(zip(_A_, _B_))
retrieve the path from a Flask request	request.url
replace carriage return in string _A_ with empty string _B_	_A_.replace('\\r', _B_)
serialize dictionary _A_ as a JSON formatted string with each key formatted to pattern '%d,%d'	simplejson.dumps(dict([('%_A_,%_A_' % k, v) for k, v in list(_A_.items())]))
parse string _A_ into datetime by format _B_	datetime.strptime('_A_', '_B_')
parse string _A_ into datetime	parser.parse('_A_')
Get absolute folder path and filename for file `existGDBPath `	os.path.split(os.path.abspath(existGDBPath))
extract folder path from file path	os.path.dirname(os.path.abspath(existGDBPath))
Execute a post request to url _A_ with json data _B_	requests.post('_A_', json=_B_)
remove dictionary from list _A_ if the value associated with its key _B_ is in list _C_	_A_ = [x for x in _A_ if x[_B_] not in _C_]
get a request parameter _A_ in jinja2	{{request.args.get('_A_')}}
create a list of integers between 2 values _A_ and _B_	list(range(_A_, _B_))
Change data type of data in column _A_ of dataframe _B_ into float and then to int	_B_[_A_] = _B_[_A_].astype(float).astype(int)
Find the list in a list of lists _A_ with the max value of the second element.	max(_A_, key=lambda x: x[1])
remove leading and trailing zeros in the string 'your_Strip'	your_string.strip('0')
generate a list of all unique pairs of integers in _A_	list(permutations(list(_A_), 2))
create a regular expression that matches the pattern _A_ over multiple lines of text	re.compile(_A_, re.MULTILINE)
regular expression _A_ matching a multiline block of text	re.compile('_A_', re.MULTILINE)
Run _A_ file with python location _B_ and arguments _C_ as a subprocess	call([_B_, _A_, _C_])
sort a multidimensional list _A_ by second and third column	_A_.sort(key=operator.itemgetter(2, 3))
Add a tuple with value _A_ to a tuple _B_	final_choices = ((_A_,) + _B_)
Add a tuple with value _A_ to a tuple _B_	final_choices = ((_A_,) + _B_)
find the current directory	os.getcwd()
find the current directory	os.path.realpath(__file__)
get the directory name of _A_	os._A_.dirname(_A_)
get the canonical path of file _A_	os._A_.realpath(_A_)
Find name of current directory	dir_path = os.path.dirname(os.path.realpath(__file__))
Find current directory	cwd = os.getcwd()
Find the full path of current directory	full_path = os.path.realpath(__file__)
sort array _A_ in ascending order by values of the 3rd column	_A_[arr[:, (2)].argsort()]
sort rows of numpy matrix _A_ in ascending order according to all column values	numpy.sort(_A_, axis=0)
split string _A_ on space _B_ and dot character _C_	_B_re_C_split('[_B__C_]',_B__A_)_B_
copy the content of file _A_ to file _B_	shutil.copy(_A_, _B_)
generate random upper-case ascii string of 12 characters length	print(''.join(choice(ascii_uppercase) for i in range(12)))
merge the elements in a list _A_ sequentially	[''.join(seq) for seq in zip(_A_, _A_[1:])]
rename column _A_ in dataframe _B_ to _C_	_B_.rename(columns={_A_: _C_}, inplace=True)
convert a beautiful soup html _A_ to text	print(_A_.get_text())
Sort list _A_ in descending order based on the second element of each list inside list_A_	sorted(_A_, key=operator.itemgetter(1), reverse=True)
replace value 0 with _A_ and value 1 with _B_ in column _C_ of dataframe _D_	_D_[_C_].replace([0, 1], [_A_, _B_], inplace=True)
split string _A_ on punctuation	re.split('\\W+', _A_)
Extract first two substrings in string _A_ that end in _B_, _C_ or _D_	re_B_match('(_B_*_C_[_B__C__D_](_C_:\\s+_B_*_C_[_B__C__D_]){0,1})', _A_)_B_group(1)
split string _A_ into strings of repeating elements	print([a for a, b in re.findall('((\\w)\\2*)', _A_)])
Create new string with unique characters from _A_ seperated by _B_	print(_B_.join(OrderedDict.fromkeys(_A_)))
create a set from string _A_ to remove duplicate characters	print(' '.join(set(_A_)))
list folders in zip file _A_ that ends with _B_	[x for x in _A_.namelist() if x.endswith(_B_)]
find the count of a word _A_ in a string _B_	_B_.count(_A_)
reduce the first element of list of strings _A_ to a string, separated by _B_	print(_B_.join([item[0] for item in _A_]))
Move the cursor of file pointer _A_ at the end of the file.	_A_.seek(2)
convert a flat list into a list of tuples of every two items in the list, in order	print(zip(my_list[0::2], my_list[1::2]))
group a list of ints into a list of tuples of each 2 elements	my_new_list = zip(my_list[0::2], my_list[1::2])
set the default encoding to 'utf-8'	sys.setdefaultencoding('utf8')
Formate current date and time to a string using pattern _A_	datetime.datetime.now().strftime(_A_)
retrieve arabic texts from string _A_	print(re.findall('[\\u0600-\\u06FF]+', _A_))
group dataframe _A_ based on minute interval	_A_.groupby(_A_.index.map(lambda t: t.minute))
access value associated with key _A_ of key _B_ from dictionary _C_	_C_[_B_][_A_]
remove all null values from columns _A_, _B_ and _C_ of dataframe _D_	_D_.dropna(subset=[_A_, _B_, _C_], how='all')
insert a list _A_ at the front of list _B_	_B_.insert(0, _A_)
insert elements of list _A_ into list _B_ at position _C_	_B_ = _B_[:_C_] + _A_ + _B_[_C_:]
calculate the mean of the nonzero values' indices of dataframe `df`	np.flatnonzero(x).mean()
get date from dataframe _A_ column _B_ to column _C_	_A_[_C_] = _A_[_B_].dt.date
remove elements in list _A_ from list _B_	[x for x in _B_ if x not in _A_]
join elements of each tuple in list _A_ into one string	[''.join(x) for x in _A_]
join items of each tuple in list of tuples _A_ into a list of strings	list(map(''.join, _A_))
match blank lines in _A_ with regular expressions	re.split('\n\\_A_*\n', _A_)
merge a list of integers _A_ into a single integer	from functools import reduce<nl>reduce(lambda x, y: 10 * x + y, _A_)
Convert float 24322.34 to comma-separated string	"""""""{0:,.2f}"""""".format(24322.34)"
pass dictionary items _A_ as keyword arguments in function _B_	_B_(**_A_)
get line count of file _A_	sum((1 for line in open(_A_)))
get line count of file _A_	def bufcount(_A_):<nl>    f = open(_A_)<nl>    lines = 0<nl>    buf_size = (1024 * 1024)<nl>    read_f = f.read<nl>    buf = read_f(buf_size)<nl>    while buf:<nl>        lines += buf.count('\n')<nl>        buf = read_f(buf_size)<nl>    return lines
round 1123.456789 to be an integer	print(round(1123.456789, -1))
sort list _A_ based on values from another list _B_	[x for y, x in sorted(zip(_B_, _A_))]
sorting list _A_ based on values from another list _B_	[x for y, x in sorted(zip(_B_, _A_))]
get equivalent week number from a date `2010/6/16` using  isocalendar	datetime.date(2010, 6, 16).isocalendar()[1]
select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe _A_	_A_.iloc[:, (np.r_[1:10, (15), (17), 50:100])]
apply two different aggregating functions _A_ and _B_ to the same column _C_ in pandas data frame _D_	_D_.groupby('_C_').agg({'returns': [np._A_, np._B_]})
convert string _A_ to lowercase	_A_.lower()
convert utf-8 string _A_ to lowercase	_A_.decode('utf-8').lower()
How to download a file via FTP with Python ftplib	ftp.retrbinary('RETR %s' % filename, file.write)
handle the `urlfetch_errors ` exception for imaplib request to url _A_	urlfetch.fetch(_A_, deadline=10 * 60)
output first 100 characters in a string _A_	print(_A_[0:100])
make matplotlib plot legend put marker in legend only once	legend(numpoints=1)
get set intersection between dictionaries _A_ and _B_	dict((x, set(y) & set(_A_.get(x, ()))) for x, y in _B_.items())
convert csv file _A_ into two-dimensional matrix	numpy.loadtxt(open(_A_, 'rb'), delimiter=',', skiprows=1)
filter the objects in django model _A_ between date range _B_ and _C_	_A_.objects.filter(date__range=['_B_', '_C_'])
filter objects month wise in django model _A_ for year _B_	_A_.objects.filter(date__year='_B_', date__month='01')
create a dictionary _A_ into another dictionary _B_ field _C_	_B_[_C_] = _A_
apply _A_ to each row of a matrix _B_	numpy.apply_along_axis(_A_, 1, _B_)
merge dictionaries form array _A_ in a single expression	dict((k, v) for d in _A_ for k, v in list(d.items()))
Convert escaped utf string to utf string in _A_	print('_A_'.decode('string_escape'))
counting the number of true booleans in a python list _A_	sum(_A_)
set the size of figure _A_ in inches to width height of _B_, _C_	_A_.set_size_inches(_B_, _C_, forward=True)
format string with dict _A_ with integer keys	'hello there %(5)s' % _A_
Convert a string of numbers _A_ separated by _B_ into a list of integers	map(int_B_ _A_.split('_B_'))
Convert a string of numbers _A_ separated by comma into a list of numbers	[int(s) for s in _A_.split(',')]
Flatten list _A_	_A_ = [i[0] for i in _A_]
convert list _A_ into a flat list	y = map(operator.itemgetter(0), _A_)
get a list _A_ of the first element of every tuple in list _B_	_A_ = [i[0] for i in _B_]
extract all the values of a specific key named 'values' from a list of dictionaries	results = [item['value'] for item in test_data]
get current datetime in ISO format	datetime.datetime.now().isoformat()
get UTC datetime in ISO format	datetime.datetime.utcnow().isoformat()
Merge all columns in dataframe _A_ into one column	_A_.apply(' '.join, axis=0)
pandas subtract a row from dataframe _A_ from dataframe _B_	pd.DataFrame(_B_.values - _A_.values, columns=_B_.columns)
read file _A_ using universal newline mode _B_	print(open(_A_, _B_).read())
print line _A_ from text file with _B_ format	print(_A_.decode(_B_).split())
open a text file _A_ in io module with encoding _B_	file = io.open('_A_', 'r', encoding='_B_')
Join data of dataframe _A_ with data in dataframe _B_ based on similar values of column _C_ in both dataframes	s1 = pd.merge(_A_, _B_, how='inner', on=[_C_])
check if string _A_ is UTF-8 encoded	_A_.decode('utf8').encode('utf8')
get the dimensions of numpy array _A_	_A_.shape
get the dimensions of numpy array _A_	N.shape(_A_)
get the dimensions of array _A_	N.shape(_A_)
get the dimensions of numpy array _A_	_A_.shape
get the indices of tuples in list of tuples _A_ where the first value is 53	[i for i, v in enumerate(_A_) if v[0] == 53]
convert string of bytes _A_ into an int	struct.unpack('<L', '_A_')[0]
get the first row, second column; second row, first column, and first row third column values of numpy array _A_	_A_[[0, 1, 1], [1, 0, 2]]
create a list with permutations of string _A_	list(powerset(_A_))
Convert string to boolean from defined set of strings	s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']
replace special characters in url _A_ using the '%xx' escape	urllib.parse.quote(_A_)
Save plot _A_ as svg file _B_	_A_.savefig(_B_)
count the number of elements in array _A_	len(_A_)
insert directory _A_ to current directory	sys.path.insert(0, _A_)
How to plot with x-axis at the top of the figure?	ax.xaxis.set_ticks_position('top')
Insert records in bulk from _A_ of _B_ DB to _A_ of  sqlite3 _C_ object	_C_.execute('INSERT OR REPLACE INTO _B_._A_ SELECT * FROM _A_')
Match regex _A_ on string _B_	re.match(_A_, _B_)
match regex _A_ on string _B_	re.match(_A_, _B_)
Convert hex string _A_ to integer	int('_A_', 16)
Convert hex string _A_ to integer	int('_A_', 16)
Convert hex string _A_ to integer	int('_A_', 16)
Convert hex string _A_ to integer	int(_A_, 16)
Convert hex string _A_ to int	int(_A_, 16)
print variable `value ` without spaces	"print('Value is ""' + str(value) + '""')"
Print a string _A_ with string formatting	"print('Value is ""{}""'.format(_A_))"
Jinja join elements of array _A_ with space string _B_	{{_A_ | join(_B_)}}
get a list of locally installed Python modules	help('modules')
Get only first element in each of the innermost of the multidimensional list _A_	[[[x[0]] for x in _A_[i]] for i in range(len(_A_))]
Sort a string _A_ in lexicographic order	sorted(_A_, key=str.upper)
sort string _A_ in lexicographic order	sorted(sorted(_A_), key=str.upper)
get a sorted list of the characters of string _A_ in lexicographic order, with lowercase letters first	sorted(_A_, key=str.lower)
find all the rows in Dataframe _A_ that are also present in Dataframe _B_, for the columns _C_, _D_, _E_ and _F_.	pd.merge(_B_, _A_, on=[_C_, _D_, _E_, _F_], how='inner')
Reverse key-value pairs in a dictionary _A_	dict((v, k) for k, v in _A_.items())
decode unicode string _A_ into a readable unicode literal	_A_.decode('unicode_escape')
convert list of strings _A_ into list of integers	[int(i) for i in _A_]
convert a list with string _A_ into list with integers	map(int, _A_)
convert list with str into list with int	list(map(int, ['1', '2', '3']))
find all anchor tags in html _A_ whose url begins with `http://www.iwashere.com`	_A_.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))
find all anchors with a hyperlink that matches the pattern _A_	soup.find_all('a', href=re.compile(_A_))
execute a jar file _A_ using subprocess	subprocess.call(['java', '-jar', _A_])
insert row into mysql database with column _A_ set to the value _B_	cursor.execute('INSERT INTO table (`_A_`) VALUES (%s)', (_B_,))
remove a substring _A_ from the end of string _B_	if _B_.endswith('_A_'):<nl>    _B_ = _B_[:(-4)]
remove a substring _A_ from the end of string _B_	_B_ = re.sub('\\_A_$', '', _B_)
remove a substring _A_ from the end of string _B_	print(_B_.replace('_A_', ''))
remove a substring _A_ from the end of string _B_	if (not _B_.endswith(_A_)):<nl>    return _B_<nl>return _B_[:(len(_B_) - len(_A_))]
print each first value from a list of tuples _A_ with string formatting	print(', ,'.join([str(i[0]) for i in _A_]))
clamping floating number _A_ to be between _B_ and _C_	max(min(_A_, _C_), _B_)
split a unicode string _A_ into a list of words and punctuation characters with a regex	re.findall('\\w+|[^\\w\\s]', _A_, re.UNICODE)
execute raw sql queue _A_ in database _B_ in sqlalchemy-flask app	result = _B_.engine.execute(_A_)
quit program	sys.exit(0)
get digits in string _A_	""""""""""""".join(c for c in _A_ if c.isdigit())"
split string _A_ on one or more spaces with a regular expression	re.split(' +', _A_)
python split string based on regular expression	re.findall('\\S+', str1)
Evaluate a nested dictionary `myobject.id.number` to get _A_ if _B_ is present with getattr	getattr(getattr(_B_, 'id', None), '_A_', None)
convert generator object to a dictionary	{i: (i * 2) for i in range(10)}
convert generator object to a dictionary	dict((i, i * 2) for i in range(10))
Matplotlib clear the current axes.	plt.cla()
split string _A_ into float values and write sum to _B_	_B_ = sum(float(item) for item in _A_.split(','))
Convert ascii value _A_ to binary	bin(ord(_A_))
print a string after a specific substring _A_ in string `my_string `	print(my_string.split(_A_, 1)[1])
get value of key _A_ associated with first index of key _B_ of dictionary _C_	print(_C_['_B_'][0]['_A_'])
remove colon character surrounded by vowels letters in string _A_	_A_ = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\1\\2', _A_)
extract data field _A_ from json object	"json.loads('{""foo"": 42, ""bar"": ""baz""}')[_A_]"
Convert JSON array _A_ to Python object	data = json.loads(_A_)
Convert JSON array _A_ to Python object	data = json.loads(_A_)
pars a string _A_ to extract hashtags into an array	re.findall('#(\\w+)', _A_)
do a boolean check if a string _A_ contains any of the items in list _B_	any(e in _A_ for e in _B_)
How to plot two columns of a pandas data frame using points?	df.plot(x='col_name_1', y='col_name_2', style='o')
Parsing HTML string _A_ using BeautifulSoup	parsed__A_ = BeautifulSoup(_A_)<nl>print(parsed__A_.body.find('div', attrs={'class': 'container', }).text)
Parsing webpage _A_ using BeautifulSoup	page = urllib.request.urlopen(_A_)<nl>soup = BeautifulSoup(page)
change figure size to 3 by 4 in matplotlib	plt.figure(figsize=(3, 4))
Strip punctuation from string _A_	_A_.translate(None, string.punctuation)
django urlsafe base64 decode string _A_ with decryption	base64.urlsafe_b64decode(_A_.encode('ascii'))
get the number of all keys in the nested dictionary `dict_list`	len(dict_test) + sum(len(v) for v in dict_test.values())
return the conversion of decimal _A_ to hex without the '0x' prefix	hex(_A_).split('x')[1]
create a list containing digits of number 123 as its elements	list(str(123))
converting integer _A_ to list	[int(x) for x in str(_A_)]
select a first form with no name in mechanize	br.select_form(nr=0)
Open file _A_ in read mode with encoding of _B_	json.load(codecs.open(_A_, 'r', _B_))
load json file _A_ with utf-8 bom header	json.loads(open(_A_).read().decode('utf-8-sig'))
setup a smtp mail server to _A_ with port _B_	server = smtplib.SMTP('_A_', _B_)
revers correlating bits of integer _A_	int('{:08b}'.format(_A_)[::-1], 2)
add column _A_ to index of dataframe _B_	_B_.set_index(['_A_'], append=True)
Iterating over a dictionary _A_ using for loops	for (key, value) in _A_.items():<nl>    pass
Iterating over a dictionary _A_ using for loops	for (key, value) in list(_A_.items()):<nl>    pass
Iterating key and items over dictionary _A_	for (letter, number) in list(_A_.items()):<nl>    pass
Iterating key and items over dictionary _A_	for (k, v) in list(_A_.items()):<nl>    pass
get keys and items of dictionary _A_	list(_A_.items())
get keys and items of dictionary _A_ as a list	list(_A_.items())
Iterating key and items over dictionary _A_	for (k, v) in list(_A_.items()):<nl>    pass
Iterating key and items over dictionary _A_	for (letter, number) in list(_A_.items()):<nl>    pass
Iterating key and items over dictionary _A_	for (letter, number) in list(_A_.items()):<nl>    pass
query all data from table _A_ where the value of column _B_ is bigger than 3 hours	session.query(_A_).filter(_A_._B_ > timedelta(hours=3)).all()
compile Visual Studio project _A_ from the command line through python	os.system('msbuild _A_ /p:Configuration=Debug')
get max key in dictionary _A_	max(list(_A_.keys()), key=int)
execute command _A_ from python script	os.system(_A_)
get a name of function _A_ as a string	_A_.__name__
How to get a function name as a string in Python?	my_function.__name__
check if all values in the columns of a numpy matrix _A_ are same	np.all(_A_ == _A_[(0), :], axis=0)
sort list _A_ in ascending order based on the addition of the second and third elements of each tuple in it	sorted(_A_, key=lambda x: (sum(x[1:3]), x[0]))
sort a list of tuples _A_ by the sum of second and third element of each tuple	sorted(_A_, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)
sorting a list of tuples _A_ by the sum of the second elements onwards, and third element of the tuple	sorted(_A_, key=lambda x: (sum(x[1:]), x[0]))
sort the list of tuples _A_ by the sum of every value except the first and by the first value in reverse order	sorted(_A_, key=lambda x: (sum(x[1:]), x[0]), reverse=True)
add header 'WWWAuthenticate' in a flask app with value _A_	response.headers['WWW-Authenticate'] = _A_
clear session key _A_	del request.session[_A_]
convert date string _A_ to date object in format _B_	datetime.datetime.strptime(_A_, _B_).date()
Replace non-ASCII characters in string _A_ with a single space	re.sub('[^\\x00-\\x7F]+', ' ', _A_)
List of lists into numpy array	numpy.array([[1, 2], [3, 4]])
Get a list _A_ from 1 to 10	_A_ = [i for i in range(10)]
use regex pattern _A_ to split string _B_	[m[0] for m in re.compile(_A_).findall(_B_)]
use regular expression _A_ to split string _B_	[i[0] for i in re.findall(_A_, _B_)]
remove the space between subplots in matplotlib.pyplot	fig.subplots_adjust(wspace=0, hspace=0)
Reverse list _A_	_A_[::-1]
Python JSON encoding	json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})
write a list of strings _A_ to csv object _B_	_B_.writerow(_A_)
Jinja2 formate date _A_ accorto pattern _B_	{{(_A_ | date): _B_}}
Split a string _A_ with comma, question mark or exclamation by non-consuming regex using look-behind	re.split('(?<=[\\.\\?!]) ', _A_)
create a regular expression object with the pattern _A_	re.compile(_A_)
declare an array _A_	_A_ = []
declare an array with element _A_	intarray = array(_A_)
given list _A_, reverse the all sublists and the list itself	[sublist[::-1] for sublist in _A_[::-1]]
Replace all non-alphanumeric characters in a string	re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')
unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`	""""""""""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])"
disable logging while running unit tests in python django	logging.disable(logging.CRITICAL)
adding url _A_ to mysql row	cursor.execute('INSERT INTO index(_A_) VALUES(%s)', (_A_,))
convert column of date objects _A_ in pandas dataframe _B_ to strings in new column _C_	_B_[_C_] = _B_[_A_].dt.strftime('%d%m%Y')
split string _A_ by _B_ and get the first element	_A_.split(_B_)[0]
drop rows of dataframe _A_ whose index is smaller than the value of _B_ or bigger than the value of_C_	_A_.query('index < @_B_ or index > @_C_')
Drop the rows in pandas timeseries _A_ from the row containing index _B_ to the row containing index _C_	_A_.loc[(_A_.index < _B_) | (_A_.index > _C_)]
Get the number of NaN values in each column of dataframe _A_	_A_.isnull().sum()
reset index of dataframe _A_so that existing index values are transferred into _A_as columns	_A_.reset_index(inplace=True)
generate a list containing values associated with the key _A_ of each dictionary inside list _B_	[x[_A_] for x in _B_]
python getting a list of value from list of dict	[d['value'] for d in l]
python getting a list of value from list of dict	[d['value'] for d in l if 'value' in d]
convert numpy array into python list structure	np.array([[1, 2, 3], [4, 5, 6]]).tolist()
converting string _A_ to a tuple	ast.literal_eval(_A_)
keep a list _A_ of lists sorted as it is created by second element	_A_.sort(key=lambda x: x[1])
remove duplicated items from list of lists _A_	list(map(list, set(map(lambda i: tuple(i), _A_))))
uniqueness for list of lists _A_	[list(i) for i in set(tuple(i) for i in _A_)]
in django, check if a user is in a group _A_	return user.groups.filter(name=_A_).exists()
check if a user _A_ is in a group from list of groups _B_	return _A_.groups.filter(name__in=_B_).exists()
Change log level dynamically to _A_ without restarting the application	logging.getLogger().setLevel(logging._A_)
Concat each values in a tuple _A_ to get a string	""""""""""""".join(str(i) for i in _A_)"
swap each pair of characters in string _A_	""""""""""""".join([_A_[x:x + 2][::-1] for x in range(0, len(_A_), 2)])"
save current figure to file _A_ with resolution of 1000 dpi	plt.savefig(_A_, dpi=1000)
delete items from list _A_ if the item exist in list `to_dell`	_A_ = [[x for x in sublist if x not in to_del] for sublist in _A_]
find all the elements that consists value _A_ in a list of tuples _B_	[item for item in _B_ if _A_ in item]
find all elements in a list of tuples _A_ where the first element of each tuple equals 1	[item for item in _A_ if item[0] == 1]
Get the index value in list _A_ using enumerate in list comprehension	{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(_A_)}
how to uniqify a list of dict in python	[dict(y) for y in set(tuple(x.items()) for x in d)]
load a file _A_ into the python console	exec(compile(open('_A_').read(), '_A_', 'exec'))
SQLAlchemy count the number of rows in table _A_	rows = session.query(_A_).count()
Execute Shell Script from python with variable	subprocess.call(['test.sh', str(domid)])
read excel file _A_ using pandas	dfs = pd.read_excel(_A_, sheetname=None)
unpack the binary data represented by the hexadecimal string _A_ to a float	struct.unpack('d', binascii.unhexlify(_A_))
Get index of numpy array _A_ with another numpy array _B_	_A_[tuple(_B_)]
find all possible sequences of elements in a list _A_	map(list, permutations(_A_))
sort a list _A_ based on another sorted list _B_	sorted(_A_, key=_B_.index)
How to get yesterday in python	datetime.datetime.now() - datetime.timedelta(days=1)
create a dataframe _A_ filled with zeros with indices from 0 to length of _B_ and column names from _C_	_A_ = pd.DataFrame(0, index=np.arange(len(_B_)), columns=_C_)
find the index of sub string _A_ in _B_	_B_.find(_A_)
find the index of sub string _A_ in _B_	_B_.find(_A_)
find the index of sub string _A_ in string _B_	_B_.index(_A_)
find the index of sub string _A_ in string _B_	_B_.index(_A_)
find the index of sub string _A_ in string _B_	_B_.find(_A_)
find the index of sub string _A_ in string _B_	_B_.find(_A_)
find the index of sub string _A_ in string _B_ starting from index 11	_B_.find(_A_, 11)
find the index of sub string _A_ in string _B_ starting from index 15	_B_.find(_A_, 15)
find the index of sub string _A_ in string _B_ starting from index 16	_B_.find(_A_, 16)
find the index of sub string _A_ in string _B_ starting from index 11 and ending at index 14	_B_.find(_A_, 11, 14)
sort list of date strings _A_	sorted(_A_, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))
Get all the sentences from a string _A_ using regex	re.split('\\.\\s', _A_)
Regular expression in Python sentence extractor	re.split('\\.\\s', re.sub('\\.\\s*$', '', text))
get all characters in string _A_ up to the fourth index	"""""""_A_""""""[:4]"
cut a string by delimiter _A_	s.rfind(_A_)
cut a string using delimiter _A_	s[:s.rfind(_A_)]
find a tag _A_ whose _B_ attribute is _C_ in selenium	"driver.find_element_by_xpath(""//_A_[@_B_='"" + _C_ + ""']"").click()"
append line _A_ to file _B_	with open('_B_', 'a') as myfile:<nl>    myfile.write('_A_')
append line _A_ to file _B_	with open('_B_', 'a') as f:<nl>    f.write('_A_')
append to file _A_ content 'koko'	with open(_A_, 'ab') as f:<nl>    pass
append to file _A_ content _B_	open(_A_, 'a+b').write(_B_)
split string _A_ into tokens	print([i for i in re.split('([\\d.]+|\\W+)', _A_) if i])
Find all Chinese characters in string _A_	re.findall('[\u4e00-\u9fff]+', _A_)
split string _A_ by letter _B_	_A_.split('_A_')
run shell command 'rm -r some.file' in the background	subprocess.Popen(['rm', '-r', 'some.file'])
convert a list of dictionaries `listofdict into a dictionary of dictionaries	dict((d['name'], d) for d in listofdict)
print current date and time in a regular format	datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
print current date and time in a regular format	time.strftime('%Y-%m-%d %H:%M')
find consecutive consonants in a word `CONCENTRATION` using regex	re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)
get a list of indices of non zero elements in a list _A_	[i for i, e in enumerate(_A_) if e != 0]
get multiple integer values from a string _A_	map(int, re.findall('\\d+', _A_))
get the path of Python executable under windows	os.path.dirname(sys.executable)
move an x-axis label to the top of a plot _A_ in matplotlib	_A_.xaxis.set_label_position('top')
move x-axis to the top of a plot _A_	_A_.xaxis.tick_top()
Move x-axis of the pyplot object _A_ to the top of a plot in matplotlib	_A_.xaxis.set_ticks_position('top')
parse string _A_ to DateTime object using format _B_	datetime.strptime(_A_, _B_)
Open image _A_	img = Image.open(_A_)<nl>img.show()
Open image _A_	img = Image.open('_A_')<nl>Img.show
terminate the script using status value 0	sys.exit(0)
abort the execution of the script using message _A_	sys.exit(_A_)
abort the execution of a python script	sys.exit()
find maximum with lookahead = 4 in a list _A_	[max(abs(x) for x in _A_[i:i + 4]) for i in range(0, len(_A_), 4)]
set the current working directory to _A_	os.chdir(_A_)
set the current working directory to path _A_	os.chdir(_A_)
get a list _A_ of all the items in list _B_ that are not of type _C_	_A_ = [x for x in _B_ if not isinstance(x, _C_)]
match contents of an element to _A_ in xpath (lxml)	"tree.xpath("".//a[text()=_A_]"")[0].tag"
concatenate key/value pairs in dictionary _A_ with string _B_ into a single string	"""""""_B_"""""".join([(str(k) + ' ' + str(v)) for k_B_v in list(_A_.items())])"
Strip all non-ASCII characters from a unicode string, _A_	print(set(re.sub('[\x00-\x7f]', '', '_A_')))
Get all non-ascii characters in a unicode string _A_	print(re.sub('[\x00-\x7f]', '', '_A_'))
build a dict of key:value pairs from a string representation of a dict, _A_	"ast.literal_eval(""_A_"")"
Print string _A_ with proper unicode representations	print(_A_.decode('unicode_escape'))
Normalize string _A_ from _B_ code to _C_ code	print(_A_.encode(_B_).decode(_C_).encode(_B_).decode(_C_))
merge lists _A_ and _B_ into a list of tuples	zip(_A_, _B_)
merge lists _A_ and _A_ into a list of tuples	list(zip(_A_, b))
convert pandas DataFrame _A_ to a dictionary using _B_ field as the key	_A_.set_index('_B_').to_dict()
convert pandas dataframe _A_ with fields _B_, _C_ to dictionary	_A_.set_index(_B_)[_C_].to_dict()
Can I sort text by its numeric value in Python?	sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))
remove parentheses and text within it in string _A_	re.sub('\\([^)]*\\)', '', _A_)
Check if string _A_ only contains letters and spaces	"""""""_A_"""""".replace(' ', '').isalpha()"
sum each element _A_ in list _B_ with element _C_ at the same index in list _D_.	[(_A_ + _C_) for _A_, _C_ in zip(_B_, _D_)]
sort a python dictionary _A_ by element _B_ of the value	sorted(list(_A_.items()), key=lambda item: item[_B_][_B_])
How to exclude a character from a regex group?	re.compile('[^a-zA-Z0-9-]+')
get index of the biggest 2 values of a list _A_	sorted(list(range(len(_A_))), key=lambda i: _A_[i])[-2:]
get indexes of the largest _A_ values from a list _B_ using itemgetter	zip(*sorted(enumerate(_B_), key=operator.itemgetter(1)))[0][-_A_:]
get the indexes of the largest _A_ values from a list of integers _B_	sorted(list(range(len(_B_))), key=lambda i: _B_[i], reverse=True)[:_A_]
get index of key _A_ in dictionary _B_	list(_B_.keys()).index(_A_)
Print +1 using format _A_	print(_A_.format(score))
remove adjacent duplicate elements from a list _A_	[k for k, g in itertools.groupby(_A_)]
split string _A_ based on delimiter _B_	"""""_A_"""".split(_B_)"
convert the string _A_ to a list of integers	[int(x) for x in _A_.split(',')]
convert list of key-value tuples _A_ into dictionary	dict(_A_)
save numpy array _A_ into text file _B_	np.savetxt(_B_, _A_)
store the output of command _A_ in variable _B_	_B_ = subprocess.check_output(_A_, shell=True)
get all column name of dataframe _A_ except for column _B_	_A_[df.columns - [_B_]]
get count of values in numpy array _A_ that are between values _B_ and _C_	((_B_ < _A_) & (_A_ < _C_)).sum()
Get day name from a datetime object	date.today().strftime('%A')
Python regular expression match whole word	re.search('\\bis\\b', your_string)
Jinja parse datetime object _A_ to use format pattern _B_	{{_A_ | _B_}}
Get the date object _A_ of object _B_ in string  format _C_	{{_B_._A_.strftime(_C_)}}
make a flat list from list of lists _A_	[item for _A_ in l for item in _A_]
make a flat list from list of lists _A_	list(itertools.chain(*_A_))
make a flat list from list of lists _A_	list(itertools.chain.from_iterable(_A_))
convert ascii value _A_ to int	ord(_A_)
replace white spaces in string _A_ with empty string _B_	re.sub('(?m)^[^\\S\\n]+', _B_, _A_)
remove white spaces from all the lines using a regular expression in string _A_	re.sub('(?m)^\\s+', '', _A_)
destruct elements of list _A_ to variables _B_, _C_ and _D_	_B_, _C_, _D_ = _A_
split list _A_ into a list of lists whose elements have the same first five characters	[list(v) for k, v in itertools.groupby(_A_, key=lambda x: x[:5])]
remove all instances of parenthesesis containing text beginning with _A_ from string _B_	_B_ = re.sub('\\(+_A_.*?\\) ', '', _B_)
skip the newline while printing _A_	print(_A_.rstrip('\n'))
get index values of pandas dataframe _A_ as list	_A_.index.values.tolist()
check if list _A_ is empty	if (not _A_):<nl>    pass
check if list _A_ is empty	if (not _A_):<nl>    pass
check if list _A_ is empty	if (len(_A_) == 0):<nl>    pass
create a list containing the indices of elements greater than 4 in list _A_	[i for i, v in enumerate(_A_) if v > 4]
reverse list _A_	sorted(_A_, reverse=True)
sort list of nested dictionaries _A_ in reverse based on values associated with each dictionary's key 'subkey'	sorted(_A_, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)
sort list of nested dictionaries _A_ in reverse order of _B_ and _C_	_A_.sort(key=lambda e: e[_B_][_C_], reverse=True)
remove decimal points in pandas data frame using round	df.round()
Get data from matplotlib plot	gca().get_lines()[n].get_xydata()
get the maximum 2 values per row in array _A_	_A_[:, -2:]
Get value for  _A_ parameter in GET request  in Django	request.GET.get('_A_', '')
pretty-print ordered dictionary _A_	pprint(dict(list(_A_.items())))
Confirm urls in Django properly	url('^$', include('sms.urls')),
Configure url in django properly	url('^', include('sms.urls')),
get the tuple in list _A_ that has the largest item in the second index	max_item = max(_A_, key=operator.itemgetter(1))
find tuple in list of tuples _A_ with the largest second element	max(_A_, key=operator.itemgetter(1))
resample series _A_ into 3 months bins and sum each bin	_A_.resample('3M', how='sum')
extract elements at indices (1, 2, 5) from a list _A_	[_A_[i] for i in (1, 2, 5)]
filter lines from a text file _A_ which contain a word _B_	[line for line in open(_A_) if _B_ in line]
convert a date string _A_ to a datetime object	datetime.datetime.strptime(_A_, '%Y-%m-%dT%H:%M:%SZ')
reading tab-delimited csv file _A_ with pandas on mac	pandas.read_csv(_A_, sep='\t', lineterminator='\r')
replace only first occurence of string _A_ from a string _B_	'_B_'.replace('_A_', '?', 1)
zip file _A_ using its basename as directory name	archive.write(_A_, os.path.basename(_A_))
create a dictionary of pairs from a list of tuples _A_	dict(x[1:] for x in reversed(_A_))
subtract elements of list _A_ from elements of list _B_	[(x1 - x2) for x1, x2 in zip(_A_, _B_)]
check if string _A_ starts with a number	_A_[0].isdigit()
Check if string _A_ starts with any of the elements in list (_B_, _C_, _D_, _E_, _F_, _G_, _H_, _I_, _J_, _K_)	_A_.startswith((_B_, _C_, _D_, _E_, _F_, _G_, _H_, _I_, _J_, _K_))
print script's directory	print(os.path.dirname(os.path.realpath(__file__)))
split string _A_ by the occurrences of regex pattern _B_	re.split(_B_, _A_)
Make a scatter plot using unpacked values of list _A_	plt.scatter(*zip(*_A_))
rearrange tuple of tuples _A_	tuple(zip(*_A_))
Get average for every three columns in _A_ dataframe	_A_.groupby(np.arange(len(_A_.columns)) // 3, axis=1).mean()
convert a list _A_ of ascii values to a string	""""""""""""".join(chr(i) for i in _A_)"
count the number of pairs in dictionary _A_ whose value equal to _B_	sum(x == _B_ for x in list(_A_.values()))
count the number of values in _A_ dictionary that are predicate to function _B_	sum(1 for x in list(_A_.values()) if _B_(x))
convert double 0.00582811585976 to float	struct.unpack('f', struct.pack('f', 0.00582811585976))
convert datetime.date _A_ to utc timestamp	timestamp = (_A_ - datetime(1970, 1, 1)).total_seconds()
sort column _A_ in panda dataframe _B_	_B_.sort('_A_')
Sort a data _A_ in descending order based on the _B_ attribute of elements using lambda function	_A_ = sorted(_A_, key=lambda x: x._B_, reverse=True)
print the truth value of _A_	print(bool(_A_))
rename _A_ row index label in dataframe _B_ to _C_	_B_ = _B_.rename(index={_A_: '_C_'})
Fit Kmeans function to a one-dimensional array _A_ by reshaping it to be a multidimensional array of single values	km.fit(_A_.reshape(-1, 1))
Sort a list of strings _A_ such that items starting with _B_ come first.	sorted(_A_, key=lambda x: 'a' + x if x.startswith(_B_) else 'b' + x)
open the login site _A_ in the browser	webbrowser.open(_A_)
fetch all elements in a dictionary _A_, falling between two keys 2 and 4	dict((k, v) for k, v in _A_.items() if 2 < k < 4)
fetch all elements in a dictionary _A_ where the key is between the range of 2 to 4	dict((k, v) for k, v in _A_.items() if k > 2 and k < 4)
sort two lists _A_ and _B_ together using lambda function	[list(x) for x in zip(*sorted(zip(_A_, _B_), key=lambda pair: pair[0]))]
get the number of values in list _A_ that is greater than 5	sum(((i > 5) for i in _A_))
get the number of values in list _A_ that is greater than 5	len([1 for i in _A_ if (i > 5)])
get the number of values in list _A_ that is greater than _B_	_A_ = np.array(_A_)<nl>sum((_A_ > _B_))
zip list _A_, _B_, _C_ into a list of tuples	[(x + tuple(y)) for x, y in zip(zip(_A_, _B_), _C_)]
changing permission of file _A_ to _B_	os.chmod(_A_, _B_)
argparse associate zero or more arguments with flag _A_	parser.add_argument(_A_, nargs='*')
get a list of booleans _A_ that shows wether the corresponding items in list _B_ and _C_ are equal	_A_ = [(i == j) for i, j in zip(_B_, _C_)]
create a list which indicates whether each element in _A_ and _B_ is identical	[(_A_[i] == _B_[i]) for i in range(len(_A_))]
Python: Extract numbers from a string	"[int(s) for s in re.findall('\\b\\d+\\b', ""he33llo 42 I'm a 32 string 30"")]"
create an empty data frame _A_ with index from another data frame _B_	_A_ = pd.DataFrame(index=_B_.index)
unpack first and second bytes of byte string _A_ into integer	struct.unpack('h', _A_[0:2])
print list _A_ into a table-like shape	print('\n'.join('  '.join(map(str, row)) for row in _A_))
Sort Pandas Dataframe by Date	df.sort_values(by='Date')
check if a checkbox is checked in selenium python webdriver	driver.find_element_by_name('<check_box_name>').is_selected()
determine if checkbox with id _A_ is checked in selenium python webdriver	driver.find_element_by_id(_A_).is_selected()
replace _A_ with _B_ in the list `[0, 1, 0, 3]`	[(a if a else _B_) for a in [_A_, 1, _A_, 3]]
Produce a string that is suitable as Unicode literal from string _A_	_A_.encode().decode('unicode-escape')
Parse a unicode string _A_	'_A_'.decode('unicode-escape')
convert Unicode codepoint to utf8 hex	chr(int('fd9b', 16)).encode('utf-8')
use upper case letters to print hex value _A_	print('0x%X' % _A_)
get a list _A_ that contains all non-empty elements in list _B_	_A_ = [x for x in _B_ if x]
create a slice object using string _A_	slice(*[(int(i.strip()) if i else None) for i in _A_.split(':')])
Find all the tags _A_ and _B_ from Beautiful Soup object _C_	_C_.find_all(['_A_', '_B_'])
get the name of function _A_ as a string	print(_A_.__name__)
convert dictionary _A_ into string	""""""""""""".join('{}{}'.format(key, val) for key, val in sorted(_A_.items()))"
convert dictionary _A_ into string	""""""""""""".join('{}{}'.format(key, val) for key, val in list(_A_.items()))"
copy list _A_ as _B_	_B_ = _A_[:]
copy list _A_ as _B_	_B_ = list(_A_)
copy list _A_ as _B_	_B_ = copy.copy(_A_)
deep copy list _A_ as _B_	_B_ = copy.deepcopy(_A_)
make a copy of list _A_	[i for i in _A_]
remove frame of legend in plot _A_	_A_.legend(frameon=False)
Print a emoji from a string _A_ having surrogate pairs	"""""""_A_"""""".encode('utf-16', 'surrogatepass').decode('utf-16')"
calling a function named _A_ in the module	globals()[_A_]()
Check the status code of url _A_	urllib.request.urlopen('_A_').getcode()
Check the status code of url _A_	conn = httplib.HTTPConnection('_A_')<nl>conn.request('HEAD', '/')<nl>r1 = conn.getresponse()<nl>print(r1.status, r1.reason)
Check the status code of url _A_	r = requests.head(_A_)<nl>return (r.status_code == 200)
Checking if website _A_ is up	print(urllib.request.urlopen('_A_').getcode())
Selenium _A_ click a hyperlink with the pattern _B_	_A_.find_element_by_css_selector(_B_).click()
store data frame _A_ to file _B_ using pandas, python	_A_.to_pickle(_B_)
calculate the mean of columns with same name in dataframe _A_	_A_.groupby(by=_A_.columns, axis=1).mean()
sort list _A_ by each element's attribute _B_ and attribute _C_ in reverse order	_A_.sort(key=lambda x: (x._B_, x._C_), reverse=True)
get alpha value _A_ of a png image _B_	_A_ = _B_.split()[-1]
How to get the length of words in a sentence?	[len(x) for x in s.split()]
BeautifulSoup find tag _A_ with styling _B_ in HTML string _C_	_C_.findAll(_A_, style=_B_)
Execute SQL statement _A_ with values of dictionary _B_ as parameters	cursor.execute(_A_, list(_B_.values()))
Convert CSV file _A_ to Pandas dataframe using separator _B_	df.to_csv('_A_', index=False, sep=_B_)
update the _A_ dictionary with the contents of the _B_ dictionary	_A_.update(_B_)
find all substrings in _A_ beginning and ending with square brackets	re.findall('\\[(.*?)\\]', _A_)
Format all floating variables _A_, _B_, _C_, _A_ to print to two decimal places.	print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (_A_, _B_, _C_, var4))
Remove all items from a dictionary _A_ where the values are less than `1`	_A_ = dict((k, v) for k, v in _A_.items() if v > 0)
Filter dictionary _A_ to have items with value greater than 0	_A_ = {k: v for k, v in list(_A_.items()) if v > 0}
convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe	pd.to_datetime(pd.Series(date_stngs))
get  value at index _A_ in dataframe _B_	_B_.iloc_A_
change the font size on plot _A_ to 22	_A_.rcParams.update({'font.size': 22})
converting dictionary _A_ into a dataframe _B_ with keys as data for column _C_ and the corresponding values as data for column _D_	_B_.DataFrame(list(_A_.items()), columns=[_C_, _D_])
create a dataframe containing the multiplication of element-wise in dataframe _A_ and dataframe _B_ using index name and column labels of dataframe _A_	pd.DataFrame(_A_.values * _B_.values, columns=_A_.columns, index=_A_.index)
extract floating number from string _A_	re.findall('\\d+\\.\\d+', _A_)
extract floating point numbers from a string _A_	re.findall('[-+]?\\d*\\.\\d+|\\d+', _A_)
pair each element in list _A_ 3 times into a tuple	zip(_A_, _A_, _A_)
lowercase a python dataframe string in column _A_ if it has missing values in dataframe _B_	_B_[_A_].str.lower()
append dict _A_ to value of key _B_ in dict _C_	_C_['_B_'].append(_A_)
Concat a list of strings _A_ using string formatting	""""""""""""".join(_A_)"
sum values greater than 0 in dictionary _A_	sum(v for v in list(_A_.values()) if v > 0)
run flask application _A_ in debug mode.	_A_.run(debug=True)
drop rows whose index value in list _A_ in dataframe _B_	_B_.drop(_B_.index[_A_], inplace=True)
replace nan values in a pandas data frame with the average of columns	df.apply(lambda x: x.fillna(x.mean()), axis=0)
extract attribute _A_ from each object in list _B_	[o._A_ for o in _B_]
python get time stamp on file _A_ in _B_ format	time.strftime(_B_, time.gmtime(os.path.getmtime(_A_)))
check if dictionary _A_ is a subset of dictionary _B_	all(item in list(_B_.items()) for item in list(_A_.items()))
Convert integer elements in list _A_ to strings	[str(wi) for wi in _A_]
Reset the indexes of a pandas data frame	df2 = df.reset_index()
format datetime in _A_ as string in format _B_	_A_.strftime(_B_')
format floating point number  _A_ to be rounded off to two decimal places and have a comma thousands' seperator	print('Total cost is: ${:,.2f}'.format(_A_))
sum the values in each row of every two adjacent columns in dataframe _A_	_A_.groupby(np.arange(len(_A_.columns)) // 2 + 1, axis=1).sum().add_prefix('s')
create list _A_ with 10 random floating point numbers between 0.0 and 1.0	_A_ = [random.random() for _ in range(10)]
find href value that has string 'follow?page' inside it	print(soup.find('a', href=re.compile('.*follow\\?page.*')))
immediately see output of print statement that doesn't end in a newline	sys.stdout.flush()
get a random key _A_ and value _B_ form a dictionary _C_	_A_, _B_ = random.choice(list(_C_.items()))
split string _A_ into a list of characters	list('_A_')
Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'	[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]
Validate IP address using Regex	pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
execute file _A_	exec(compile(open(_A_).read(), _A_, 'exec'))
SQLAlchemy count the number of rows with distinct values in column _A_ of table _B_	session.query(_B_).distinct(_B_._A_).group_by(_B_._A_).count()
remove null columns in a dataframe _A_	_A_ = _A_.dropna(axis=1, how='all')
check if all lists in list _A_ have three elements of integer 1	all(x.count(1) == 3 for x in _A_)
Get a list comparing two lists of tuples _A_ and _B_ if any first value in _A_ matches with first value in _B_	[x[0] for x in _A_ if any(x[0] == y[0] for y in _B_)]
clear the textbox `text` in tkinter	tex.delete('1.0', END)
Convert long int _A_ into date and time represented in the the string format _B_	datetime.datetime.fromtimestamp(_A_).strftime(_B_)
Spawn a process to run python script _A_ in C++	system('python _A_')
sort a list _A_ of class objects by their values for the attribute _B_	_A_.sort(key=operator.attrgetter('_B_'))
sort list _A_ by the _B_ attribute of each object	_A_.sort(key=lambda x: x._B_)
convert a tensor with list of constants _A_ into a numpy array in tensorflow	print(type(tf.Session().run(tf.constant(_A_))))
convert list _A_ from being consecutive sequences of tuples into a single sequence of elements	list(itertools.chain(*_A_))
Set value for key _A_ in dict _B_ to _C_ if key _A_ does not exist or if value is `none`	_B_.setdefault('_A_', _C_)
Do group by on _A_ column in _B_ and get its mean	_B_.groupby(['_A_']).mean()
get number in list _A_ closest in value to number _B_	min(_A_, key=lambda x: abs(x - _B_))
check if any of the items in  _A_ appear in _B_	any(x in _B_ for x in _A_)
search for occurrences of regex pattern _A_ in string _B_	print(_A_.search(_B_).group(1))
factorize all string values in dataframe _A_ into floats	(_A_.factorize()[0] + 1).astype('float')
Get a list _A_ by subtracting values in one list _B_ from corresponding values in another list _C_	__C__ = [(a - b) for a, b in zip(_C_, _B_)]
derive the week start for the given week number and year ‘2011, 4, 0’	datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')
convert a list of strings _A_ to a list of numbers	map(int, _A_)
"create datetime object from ""16sep2012"""	datetime.datetime.strptime('16Sep2012', '%d%b%Y')
update fields in Django model _A_ with arguments in dictionary _B_ where primary key is equal to _C_	_A_.objects.filter(_C_=pk).update(**_B_)
update the fields in django model _A_ using dictionary _B_	_A_.objects.create(**_B_)
print a digit _A_ with exactly 2 digits after decimal	print('{0:.2f}'.format(_A_))
generate a 12-digit random number	random.randint(100000000000, 999999999999)
generate a random 12-digit number	int(''.join(str(random.randint(0, 9)) for _ in range(12)))
generate a random 12-digit number	""""""""""""".join(str(random.randint(0, 9)) for _ in range(12))"
generate a 12-digit random number	'%0.12d' % random.randint(0, 999999999999)
remove specific elements in a numpy array _A_	numpy.delete(_A_, index)
sort list _A_ based on values of dictionary `trail_dict`	sorted(_A_, key=lambda x: trial_dict[x])
read a single character from stdin	sys.stdin.read(1)
get a list of characters in string _A_ matching regex pattern _B_	print(re.findall(_B_, _A_))
get the context of a search by keyword _A_ in beautifulsoup _B_	k = _B_.find(text=re.compile(_A_)).parent.text
convert rows in pandas data frame _A_ into list	_A_.apply(lambda x: x.tolist(), axis=1)
convert a 1d _A_ array to a 2d array _B_	_B_ = np.reshape(_A_, (-1, 2))
run app _A_ on host _B_ and port 9000 in Flask	_A_.run(host=_B_, port=9000, debug=False)
encode unicode string _A_ to utf-8 code	print(_A_.encode('UTF8'))
get the first element of each tuple from a list of tuples _A_	[x[0] for x in _A_]
regular expression matching all but _A_ and _B_ for string _C_	re.findall('-(?!_A_-|_B_-)([^-]+)', _C_)
regular expression matching all but _A_ and _B_	re.findall('-(?!_A_|_B_)([^-]+)', string)
remove false entries from a dictionary _A_	{k: v for k, v in list(_A_.items()) if v}
Get a dictionary from a dictionary _A_ where the values are present	dict((k, v) for k, v in _A_.items() if v)
sort list _A_ based on the value of variable _B_ for each object in list _A_	sorted(_A_, key=operator.itemgetter(_B_))
sort a list of objects _A_ by a member variable _B_	_A_.sort(key=operator.attrgetter(_B_))
sort a list of objects _A_ where the object has member number variable _B_	_A_.sort(key=lambda x: x._B_)
join multiple dataframes `d1`, `d2`, and `d3` on column _A_	df1.merge(df2, on=_A_).merge(df3, on=_A_)
generate random Decimal	decimal.Decimal(random.randrange(10000)) / 100
list all files of a directory _A_	onlyfiles = [f for f in listdir(_A_) if isfile(join(_A_, f))]
list all files of a directory _A_	f = []<nl>for (dirpath, dirnames, filenames) in walk(_A_):<nl>    f.extend(filenames)<nl>    break
list all _A_ files of a directory _B_	print(glob.glob('_B_*_A_'))
list all files of a directory _A_	os.listdir('_A_')
execute sql query _A_ with all parameters in list _B_	cur.executemany(_A_, _B_)
get keys with same value in dictionary _A_	print([key for key in _A_ if _A_[key] == 1])
get keys with same value in dictionary _A_	print([key for key, value in _A_.items() if value == 1])
Get keys from a dictionary _A_ where the value is _B_.	print([key for key, value in list(_A_.items()) if value == _B_])
create list of _A_ empty strings	strs = ['' for x in range(_A_)]
generate pdf file _A_ from markdown file _B_	with open(_B_, 'r') as f:<nl>    html_text = markdown(f.read(), output_format='html4')<nl>pdfkit.from_string(html_text, _A_)
remove duplicate dict in list _A_	[dict(t) for t in set([tuple(d.items()) for d in _A_])]
Set time zone _A_ in Django	TIME_ZONE = '_A_'
append _A_ to list value of _B_ in dictionary _C_, or create key _B_ with value _A_ in a list if it does not exist	_C_.setdefault(_B_, []).append(_A_)
Group the values from django model _A_ with group by value _B_ and annotate by _C_	_A_.objects.values('_B_').annotate(article_count=Count('_C_'))
clear Tkinter Canvas _A_	_A_.delete('all')
Initialize a pandas series object _A_ with columns _B_	_A_ = pd.Series(_B_)
None	datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')
sort list _A_ using the first dimension of the element as the key to list _B_	_A_.sort(key=lambda x: _B_.index(x[0]))
How to sort a list according to another list?	a.sort(key=lambda x_y: b.index(x_y[0]))
Save plot _A_ as png file _B_	_A_.savefig(_B_)
Save matplotlib graph to image file _A_ at a resolution of `300 dpi`	plt.savefig('_A_', dpi=300)
get output from process _A_	_A_.communicate()[0]
How to get output of exe in python script?	output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]
searche in HTML string for elements that have text _A_	soup.body.findAll(text=_A_)
BeautifulSoup find string _A_ in HTML body _B_	soup._B_.findAll(text=_A_)
Sort items in dictionary _A_  using the first part of the key after splitting the key	sorted(list(_A_.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))
create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]	set([1, 2, 3]) ^ set([3, 4, 5])
Get a list values of a dictionary item _A_ from post requests in django	request.POST.getlist('_A_')
Filter duplicate entries w.r.t. value in _A_ from a list of dictionaries _B_	list(dict((x[_A_], x) for x in _B_).values())
Get pandas GroupBy object with sum over the rows with same column names within  dataframe _A_	_A_.groupby(_A_.columns, axis=1).sum()
convert the zip of range _A_ and range _B_ into a dictionary	dict(zip(list(range_A_), list(range_B_)))
Get all indexes of boolean numpy array where boolean value _A_ is True	numpy.where(_A_)
case insensitive comparison of strings _A_ and _B_	if (_A_.lower() == _B_.lower()):<nl>    print('The strings are the same (case insensitive)')<nl>else:<nl>    print('The strings are not the same (case insensitive)')
case insensitive string comparison between _A_ and _B_	if (_A_.lower() == _B_.lower()):<nl>    pass
case insensitive string comparison between _A_ and _B_	(_A_.lower() == _B_.lower())
case insensitive string comparison between _A_ and _B_	(_A_.lower() == _B_.lower())
case insensitive comparison between strings _A_ and _B_	(_A_.upper() == _B_.upper())
Taking the results of a bash command _A_	os.system(_A_)
remove multiple values from a list _A_ at the same time with index starting at _B_ and ending just before _C_.	del _A_[_B_:_C_]
convert a string _A_ to its base-10 representation	int(_A_.encode('hex'), 16)
match regex pattern _A_ on string _B_	re.findall(_A_, _B_)
sort a set _A_ by numerical value	sorted(_A_, key=float)
convert an int 65 to hex string	hex(65)
append a pandas series _A_ to the series _B_ and get a continuous index	_B_.append(_A_).reset_index(drop=True)
simple way to append a pandas series _A_ and _B_ with same index	pd.concat([_A_, _B_], ignore_index=True)
Get a list of tuples with multiple iterators using list comprehension	[(i, j) for i in range(1, 3) for j in range(1, 5)]
reverse sort items in dictionary _A_ by value	sorted(iter(_A_.items()), key=itemgetter(1), reverse=True)
select the last business day of the month for each month in 2014 in pandas	pd.date_range('1/1/2014', periods=12, freq='BM')
disable the certificate check in https requests for url _A_	requests.get('_A_', verify=False)
return dataframe _A_ with last row dropped	_A_.ix[:-1]
check if _A_ is in string _B_	if ('_A_' not in _B_):<nl>    pass
check if string _A_ is in _B_	if (_A_ in _B_):<nl>    pass
check if string _A_ is in string	string.find('_A_')
check if string _A_ contains _B_	"if (_A_.find('_B_') == (-1)):<nl>    print(""No '_B_' here!"")<nl>else:<nl>    print(""Found '_B_' in the string."")"
extract first and last row of a dataframe _A_	pd.concat([_A_.head(1), _A_.tail(1)])
filter a Django model _A_ to have charfield length of max `255`	_A_.objects.extra(where=['CHAR_LENGTH(text) > 254'])
Filter queryset for all objects in Django model _A_ where texts length are greater than _B_	_A_.objects.filter(text__regex='^.{_B_}.*')
count the number of rows with missing values in a pandas dataframe _A_	sum(_A_.apply(lambda x: sum(x.isnull().values), axis=1) > 0)
Sorting while preserving order in python	sorted(enumerate(a), key=lambda x: x[1])
set the font _A_ of size 12 for a canvas' text item _B_	canvas.create_text(x, y, font=(_A_, 12), text=_B_)
create a list containing all values associated with key _A_ in dictionaries of list _B_ using list comprehension	[y[_A_] for x in _B_ for y in x['bar']]
read pandas data frame csv _A_ with extra commas in column specifying string delimiter _B_	"df = pd.read_csv(_B__A__B_, quotechar=""_B_"")"
replace string _A_ with _B_ in dataframe _C_ column _D_	_C_[_D_] = _C_[_D_].str.replace(_A_, _B_)
Get all indexes of a list _A_ where each value is greater than _B_	[i for i in range(len(_A_)) if _A_[i] > _B_]
check if a local variable _A_ exists	('_A_' in locals())
check if a global variable _A_ exists	('_A_' in globals())
check if object _A_ has attribute _B_	hasattr(_A_, _B_)
check if a local variable _A_ exists	if (_A_ in locals()):<nl>    pass
check if a global variable _A_ exists	if (_A_ in globals()):<nl>    pass
lambda function that adds two operands	lambda x, y: x + y
count the number of items in a generator/iterator _A_	sum(1 for i in _A_)
get tuples of the corresponding elements from lists _A_ and _B_	[(x, _B_[i]) for i, x in enumerate(_A_)]
create tuples containing elements that are at the same index of list _A_ and list _B_	[(i, j) for i, j in zip(_A_, _B_)]
get tuples from lists _A_ and _B_ using list comprehension in python 2	[(_A_[i], _B_[i]) for i in range(len(_A_))]
convert hex triplet string _A_ to rgb tuple	struct.unpack('BBB', _A_.decode('hex'))
Check if 3 is not in a list [2, 3, 4]	(3 not in [2, 3, 4])
Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]	((2, 3) not in [(2, 3), (5, 6), (9, 1)])
Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), _A_]	((2, 3) not in [(2, 7), (7, 3), '_A_'])
Check if 3 is not in the list [4,5,6]	(3 not in [4, 5, 6])
create a list by appending components from list _A_ and reversed list _B_ interchangeably	[value for pair in zip(_A_, _B_[::-1]) for value in pair]
delete the last column of numpy array _A_ and assign resulting array to _B_	_B_ = np.delete(_A_, -1, 1)
commit all the changes after executing a query.	dbb.commit()
join two dataframes based on values in selected columns	pd.merge(a, b, on=['A', 'B'], how='outer')
set text color as _A_ and background color as _B_ in qpushbutton	setStyleSheet('QPushButton {background-color: _B_; color: _A_;}')
find the mean of elements in list _A_	sum(_A_) / float(len(_A_))
Find all the items from a dictionary _A_ if the key contains the string _B_	[(k, v) for k, v in _A_.items() if '_B_' in k]
Get a md5 hash from string _A_	k = hashlib.md5('_A_').hexdigest()
How to get only the last part of a path in Python?	os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
sort datetime objects _A_ by _B_ and _C_	_A_.sort(key=lambda d: (d._B_, d._C_))
extract table data from table _A_ using beautifulsoup	[[td.findNext(text=True) for td in tr.findAll('td')] for tr in _A_]
strip the string _A_ from anywhere in the string `Boat.txt.txt`	"""""""Boat_A__A_"""""".replace('_A_', '')"
get a list of the row names from index of a pandas data frame	list(df.index)
get the row names from index in a pandas data frame	df.index
create a list of all unique characters in string _A_	""""""""""""".join(list(OrderedDict.fromkeys(_A_).keys()))"
get list of all unique characters in a string _A_	list(set(_A_))
List of all unique characters in a string?	""""""""""""".join(set('aaabcabccd'))"
find rows with non zero values in a subset of columns where _A_ is not equal to _B_ in pandas dataframe	df.loc[(df.loc[:, (_A_ != _B_)] != 0).any(1)]
upload file with Python Mechanize	br.form.add_file(open(filename), 'text/plain', filename)
check if  dictionary _A_ contains all keys in list _B_	all(word in _A_ for word in _B_)
hide output of subprocess _A_	subprocess.check_output(_A_, stderr=subprocess.STDOUT)
replace nans by preceding values in pandas dataframe _A_	_A_.fillna(method='ffill', inplace=True)
create 4 numbers in range between 1 and 3	print(np.linspace(1, 3, num=4, endpoint=False))
Create numpy array of _A_ numbers starting from _B_ with interval of _C_	print(np.linspace(_B_, _C_, num=_A_))
create a symlink directory _A_ for directory _B_ with unicode support using ctypes library	kdll.CreateSymbolicLinkW('_A_', '_B_', 1)
get a list _A_ of array slices of the first two rows and columns from array _B_	_A_ = [_B_[i][0:2] for i in range(0, 2)]
upload uploaded file from path _A_ to Google cloud storage _B_ bucket	upload_url = blobstore.create_upload_url(_A_, gs_bucket_name=_B_)
change directory to the directory of a python script	os.chdir(os.path.dirname(__file__))
call a function with argument list _A_	func(*_A_)
split column _A_ in dataframe _B_ into two columns by first whitespace _C_	_B_[_A_].str.split(_C_, 1, expand=True)
pandas dataframe, how do i split a column _A_ into two _B_ and _C_ on delimiter _D_	df[_B_], df[_C_] = df[_A_].str.split(_D_, 1).str
sort list _A_ based on the length of its elements	print(sorted(_A_, key=len))
sort list _A_ in ascending order of length of elements	_A_.sort(lambda x, y: cmp(len(x), len(y)))
sort list of strings _A_ by the length of string	_A_.sort(key=lambda s: len(s))
plot point marker _A_ on series _B_	_B_.plot(marker=_A_)
get all combination of n binary values	lst = list(itertools.product([0, 1], repeat=n))
get all combination of n binary values	lst = map(list, itertools.product([0, 1], repeat=n))
get all combination of 3 binary values	bin = [0, 1]<nl>[(x, y, z) for x in bin for y in bin for z in bin]
get all combination of 3 binary values	lst = list(itertools.product([0, 1], repeat=3))
append string _A_ at the beginning of each value in column _B_ of dataframe _C_	_C_[_B_] = _A_ + _C_[_B_].astype(str)
get a dict of variable names _A_ as a string and their values	dict((name, eval(name)) for name in _A_)
add a colorbar to plot _A_ using image _B_ on axes _C_	_A_.colorbar(_B_, _C_=ax)
convert nested list _A_ into a flat list	[a for c in _A_ for b in c for a in b]
create a list containing keys of dictionary _A_ and sort it alphabetically	sorted(_A_, key=_A_.get)
print the number of occurences of not `none` in a list _A_ in Python 2	print(len([x for x in _A_ if x is not None]))
lookup dictionary key _A_ in Django template _B_	{{_B_._A_}}
remove duplicates from list _A_	mynewlist = list(_A_)
get unique values from the list _A_	set(_A_)
set size of _A_ to landscape A4 i.e. _B_ inches	_A_(figsize=(_B_))
get every thing after last _A_	url.rsplit('_A_', 1)
get everything after last slash in a url stored in variable _A_	_A_.rsplit('/', 1)[-1]
open file _A_ in directory _B_	x_file = open(os.path.join(_B_, _A_), 'r')
create a list with the characters of a string _A_	list('_A_')
concatenate a list of numpy arrays _A_ together into a flattened list of values	np.concatenate(_A_).ravel().tolist()
convert dictionary _A_ into a flat list	print([y for x in list(_A_.items()) for y in x])
Convert a dictionary _A_ into a list with key and values as list items.	[y for x in list(_A_.items()) for y in x]
get a random record from model _A_ using django's orm	_A_.objects.order_by('?').first()
change current working directory to directory _A_	os.chdir(_A_)
change current working directory	os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')
change current working directory	os.chdir('.\\chapter3')
create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`	dict((key, sum(d[key] for d in dictList)) for key in dictList[0])
sort pandas data frame _A_ using values from columns _B_ and _C_ in ascending order	_A_.sort(['_B_', '_C_'], ascending=[True, True])
Converting string lists _A_ to float list	floats = [float(x) for x in _A_.split()]
Converting string lists _A_ to float list	floats = map(float, _A_.split())
set labels _A_ on axis X in plot _B_	_B_.xticks(_A_)
read line by line from stdin	for line in fileinput.input():<nl>    pass
read line by line from stdin	for line in sys.stdin:<nl>    pass
check if string _A_ exists in the values of dictionary _B_	'_A_' in list(_B_.values())
Check if value _A_ is among the values of dictionary _B_	_A_ in iter(_B_.values())
call parent class _A_ of child class constructor	super(_A_, self).__init__(name, year)
create a dictionary using two lists_A_ and _B_	dict(zip(_A_, _B_))
sort a list of dictionaries _A_ by dictionary values in descending order	sorted(_A_, key=lambda i: list(i.values())[0], reverse=True)
sorting a list of dictionary _A_ by values in descending order	sorted(_A_, key=dict.values, reverse=True)
Use multiple groupby and agg operations _A_, _B_, _C_ for pandas data frame _D_	_D_.groupby(level=0).agg(['_A_', '_B_', '_C_'])
for a dictionary _A_, set default value for key _B_ as list and append value _C_  in that key	_A_.setdefault('_B_', []).append('_C_')
sum values in list of dictionaries _A_ with key _B_	sum(item[_B_] for item in _A_)
get a sum of all values from key _A_ in a list of dictionary _B_	sum([item['_A_'] for item in _B_])
Get all the values in key _A_ summed from a list of dictionary _B_	sum(item['_A_'] for item in _B_)
writing string _A_ to file _B_	_B_.write(_A_)
Write a string _A_ to a file _B_ including new line character	_B_.write('_A_\n')
find consecutive segments from a column _A_ in a pandas data frame _B_	_B_.reset_index().groupby(_A_)['index'].apply(np.array)
get a relative path of file _A_ into variable _B_	_B_ = os.path.join(os.path.dirname(__file__), _A_)
retrieve an element from a set _A_ without removing it	e = next(iter(_A_))
execute a command in the command prompt to list directory contents of the c drive `c:\\'	os.system('dir c:\\')
Make a auto scrolled window to the end of the list in gtk	self.treeview.connect('size-allocate', self.treeview_changed)
check if 3 is inside list _A_	3 in _A_
Represent DateTime object _A_ with format _B_ into format _C_	datetime.datetime.strptime(_A_, _B_).strftime(_C_)
convert a string literal _A_ with values `\\` to raw string literal	_A_ = _A_.replace('\\', '\\\\')
get output of script _A_	print(_A_.communicate()[0])
create a pandas data frame from list of nested dictionaries _A_	pd.concat([pd.DataFrame(l) for l in _A_], axis=1).T
delete all columns in  DataFrame _A_ that do not hold a non-zero value in its records	_A_.loc[:, ((_A_ != 0).any(axis=0))]
sort a multidimensional array _A_ by column with index 1	sorted(_A_, key=lambda x: x[1])
split string _A_ to list conversion by _B_	[x.strip() for x in _A_.split(_B_)]
Get a list of items in the list _A_ with attribute equal to _B_	items = [item for item in _A_ if item.attribute == _B_]
create a file _A_ with each tuple in the list _B_ written to a line	open(_A_, 'w').write('\n'.join('%s %s' % x for x in _B_))
Get multiple matched strings using regex pattern _A_	pattern = re.compile('_A_', re.IGNORECASE)
read a text file _A_ into a string variable _B_	_B_ = open(_A_, 'r').read()
Return values for column _A_ after group by on column _B_ and _C_ in dataframe _D_	_D_.groupby(['__C__', '_C_'])['___C___'].unique()
read file _A_ line by line into a list _B_	with open(_A_) as f:<nl>    _B_ = f.readlines()
read file _A_ line by line into a list _B_	with open(_A_) as f:<nl>    _B_ = f.readlines()
read file _A_ line by line into a list _B_	_B_ = [line.rstrip('\n') for line in open(_A_)]
read file _A_ line by line into a list _B_	with open('_A_', 'r') as ins:<nl>    _B_ = []<nl>    for line in ins:<nl>        _B_.append(line)
convert the dataframe column _A_ from string types to datetime types	df[_A_] = pd.to_datetime(df[_A_])
get a list of the keys in each dictionary in a dictionary of dictionaries _A_	[k for d in list(_A_.values()) for k in d]
get user input using message _A_ and insert it to the first placeholder in string _B_	print(_B_.format(input(_A_)))
create pandas data frame _A_ from txt file _B_ with column _C_ and separator _D_	_A_ = pd.read_csv('_B_', sep='_D_', names=['_C_'])
Pandas: How can I use the apply() function for a single column?	df['a'] = df['a'].apply(lambda x: x + 1)
get the platform OS name	platform.system()
sort list _A_ in ascending order based on its elements' float values	_A_ = sorted(_A_, key=lambda x: float(x))
finding words in string _A_ after keyword _B_	re.search('_B_ (.*)', _A_)
Find all records from collection _A_ without extracting mongo id _B_	db._A_.find({}, {'_B_': False})
Get all the second values from a list of lists _A_	[row[1] for row in _A_]
extract first column from a multi-dimensional array _A_	[row[0] for row in _A_]
sort list _A_ in ascending order based on the integer value of its elements	sorted(_A_, key=int)
check if file _A_ is descendant of directory _B_	os.path.commonprefix([_B_, os.path.realpath(_A_)]) == _B_
check if any element of list _A_ are in string _B_	any(substring in _B_ for substring in _A_)
construct pandas dataframe from a list of tuples	df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])
find and replace 2nd occurrence of word _A_ by _B_ in a sentence _C_	re.sub('^((?:(?!_A_).)*_A_(?:(?!_A_).)*)_A_', '\\1Bull', _C_)
find and replace 2nd occurrence of word _A_ by _B_ in a sentence _C_	re.sub('^((.*?_A_.*?){1})_A_', '\\1Bull', _C_)
sort list of strings in list _A_ by integer suffix	sorted(_A_, key=lambda k: int(k.split('_')[1]))
sort list of strings _A_ by integer suffix before _B_	sorted(_B_A_B_, key=lambda x: int(x.split('_B_')[1]))
make a list of lists in which each list _A_ are the elements from list _B_ which have the same characters up to the first _C_ character	[list(_C_A_C_) for _C_, _C_A_C_ in itertools.groupby(_C_B_C_, lambda x: x.split('_C_')[0])]
How to group similar items in a list?	[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]
Load the url _A_ in selenium webdriver _B_	_B_.get('_A_')
using python's datetime module, get the year that utc-11 is currently in	(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
Get the difference between two lists _A_ and _B_ that may have duplicate values	Counter(_A_) - Counter(_B_)
remove tags from a string _A_	re.sub('<[^>]*>', '', _A_)
encode string _A_ as _B_	_A_.encode('_B_')
filter `Users` by field _A_ with level greater than or equal to _B_	User.objects.filter(_A___level__gte=_B_)
BeautifulSoup find a tag whose id ends with string _A_	soup.findAll(id=re.compile('_A_$'))
select _A_ tags whose _B_s begin with _C_	"soup.select('_A_[_B_^=""_C_""]')"
delete an item _A_ in a list _B_ if it exists	cleaned_list = [x for x in _B_ if x is not _A_]
print _A_ to console, and read user input to _B_	_B_ = input('_A_')
append 4 to list _A_	_A_.append(4)
append a list [8, 7] to list _A_	_A_.append([8, 7])
insert 77 to index 2 of list _A_	_A_.insert(2, 77)
remove white space padding around a saved image _A_ in matplotlib	plt.savefig('_A_', bbox_inches='tight')
concatenate lists _A_ and _B_	(_A_ + _B_)
iterate items in lists _A_ and _B_	for item in itertools.chain(_A_, _B_):<nl>    pass
create dataframe _A_ containing data of dataframe _B_ where column _C_ is equal to _D_ and column _E_ is equal to 2014	_A_ = _B_[(_B_[_C_] == _D_) & (_B_[_E_] == 2014)]
print backslash	print('\\')
replace _A_ in pandas dataframe _B_ with _C_	_B_.replace(_A_, _C_)
delete column _A_ from dataframe _B_	_B_ = _B_.drop(_A_, 1)
delete 1st, 2nd and 4th columns from dataframe _A_	_A_.drop(_A_.columns[[0, 1, 3]], axis=1)
delete a column _A_ without having to reassign from pandas data frame _B_	_B_.drop('_A_', axis=1, inplace=True)
disable abbreviation in argparse	parser = argparse.ArgumentParser(allow_abbrev=False)
extract dictionary values by key _A_ from data frame _B_	feature3 = [d.get(_A_) for d in _B_.dic]
get data of column _A_ and column _B_ in dataframe _C_ where column _A_ is equal to _E_	_C_.loc[gb.groups[_E_], (__D__, _B_)]
print '[1, 2, 3]'	print('[%s, %s, %s]' % (1, 2, 3))
Display `1 2 3` as a list of string	print('[{0}, {1}, {2}]'.format(1, 2, 3))
get values from a dictionary _A_ whose key contains the string _B_	[v for k, v in list(_A_.items()) if '_B_' in k]
Python date string formatting	"""""""{0.month}/{0.day}/{0.year}"""""".format(my_date)"
drop a single subcolumn _A_ in column _B_ from a dataframe _C_	_C_.drop((_B_, _A_), axis=1)
dropping all columns named _A_ from a multiindex _B_, across all level.	_B_.drop(_A_, level=1, axis=1)
build dictionary with keys of dictionary _A_ as keys and values of returned value of function _B_ with correlating key as parameter	{_key: _B_(_key) for _key in _A_}
click on the text button _A_ using selenium python	browser.find_element_by_class_name(_A_).click()
combine two dictionaries `d ` and _A_, concatenate string values with identical _B_	dict((k, d.get(k, '') + _A_.get(k, '')) for k in _B_)
generate unique equal hash for equal dictionaries _A_ and _B_	hash(pformat(_A_)) == hash(pformat(_B_))
convert nested list of lists _A_ into a list of tuples	list(map(tuple, _A_))
sum the column _A_ along the  other columns _B_, _C_, _D_ in a pandas data frame _E_	_E_.groupby(['_B_', '_C_', '_D_'], as_index=False)['_A_'].sum()
Summing across rows of Pandas Dataframe	df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
change string _A_ to upper case	_A_.upper()
split a string _A_ by _B_ and convert to a dictionary	dict(item.split('=') for item in _A_.split(_B_))
Add header _A_ to mechanize browser _B_	_B_.addheaders = [_A_]
set data in column _A_ of dataframe _B_ equal to first element of each list	_B_[_A_] = _B_[_A_].str[0]
get element at index 0 of each list in column _A_ of dataframe _B_	_B_[_A_] = _B_[_A_].str.get(0)
remove square bracket _A_ from pandas dataframe _B_ column _C_	_B_[_C_] = _B_[_C_].str.strip(_A_)
Get a string with string formatting from dictionary _A_	""""""", """""".join(['{}_{}'.format(k, v) for k, v in _A_.items()])"
Sum of sums of each list, in a list of lists named _A_.	sum(sum(x) for x in _A_)
Check whether a numpy array _A_ contains a given row _B_	any(np.equal(_A_, _B_).all(1))
check if all elements in list _A_ are the same	len(set(_A_)) == 1
split a string _A_ at line breaks _B_	[map(int, x.split('\t')) for x in _A_.rstrip().split('_B_')]
sort a dictionary _A_ by values that are list type	t = sorted(list(_A_.items()), key=lambda x: x[1])
Search for string _A_ in txt file _B_	if (_A_ in open(_B_).read()):<nl>    pass
Search for string _A_ in txt file _B_	f = open(_B_)<nl>s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)<nl>if (s.find(_A_) != (-1)):<nl>    pass
Search for string _A_ in txt file _B_	datafile = file(_B_)<nl>found = False<nl>for line in datafile:<nl>    if (_A_ in line):<nl>        return True<nl>return False
insert string _A_ after each character of _B_	_B_.replace('', _A_)[len(_A_):-len(_A_)]
getting every possible combination of two elements in a list	list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))
get a utf-8 string literal representation of byte string _A_	"""""""_A_ = {}"""""".format(_A_.decode('utf8')).encode('utf8')"
check if _A_ is an integer	isinstance(_A_, int)
check if _A_ is an integer	(type(_A_) == int)
play the wav file _A_	winsound.PlaySound(_A_, winsound.SND_FILENAME)
create a list containing the _A_ next values of generator _B_	[next(_B_) for _ in range(_A_)]
get list of n next values of a generator _A_	list(itertools.islice(_A_, 0, n, 1))
compare two lists in python _A_ and _B_ and return matches	set(_A_).intersection(_B_)
How can I compare two lists in python and return matches	[i for i, j in zip(a, b) if i == j]
convert list _A_ into a string of its elements	print(''.join(map(str, _A_)))
match regex pattern _A_ on string _B_	re.match(_A_, _B_)
import a nested module `c.py` within _A_ within _B_ with importlib	importlib.import_module('.c', '_B_._A_')
import a module _A_ with importlib.import_module in python 2	importlib.import_module(_A_)
Convert array _A_ to numpy array	_A_ = np.array(_A_)
Find all _A_ tags whose classes has the value _B_ in a beautiful soup object _C_	_C_.find_all('_A_', class_=re.compile('_B_'))
a sequence of empty lists of length _A_	[[] for _ in range(_A_)]
create dictionary from list of variables _A_ and _B_ already defined	dict((k, globals()[k]) for k in (_A_, _B_))
get two random records from model _A_ in Django	_A_.objects.order_by('?')[:2]
Print a dictionary _A_ with string formatting	"""""""Hello {user[name]}"""""".format(**_A_)"
create a dictionary _A_ containing each tuple in list _B_ as values and the tuple's first element as the corresponding key	_A_ = {t[0]: t for t in _B_}
Generate a random integer between 0 and 9	randint(0, 9)
Generate a random integer between _A_ and _B_	random.randint(_A_, _B_)
Generate random integers between 0 and 9	print((random.randint(0, 9)))
reverse a string _A_ by 2 characters at a time	""""""""""""".join(reversed([_A_[i:i + 2] for i in range(0, len(_A_), 2)]))"
transform time series _A_ into a pivot table aggregated by column _B_ using column `df.index.date` as index and values of column `df.index.time` as columns	pd.pivot_table(_A_, index=_A_.index.date, columns=_A_.index.time, values=_B_)
check if the third element of all the lists in a list _A_ is equal to zero.	any(item[2] == 0 for item in _A_)
Find all the lists from a lists of list _A_ if third element in all sub-lists is _B_	[x for x in _A_ if x[2] == _B_]
sort dictionary of dictionaries _A_ according to the key _B_	sorted(list(_A_.items()), key=lambda x: x[1][_B_], reverse=True)
plot a data logarithmically in y axis	plt.yscale('log', nonposy='clip')
extract digits in a simple way from a python string	map(int, re.findall('\\d+', s))
list the contents of a directory _A_	os.listdir(_A_)
list all the contents of the directory _A_.	os.listdir(_A_)
merge a pandas data frame _A_ and column _B_ in pandas data frame _C_ into single	pd.concat([_A_, _C_._B_], axis=1)
get value of first index of each element in list _A_	[x[0] for x in _A_]
python how to get every first element in 2 dimensional list _A_	[i[0] for i in _A_]
remove line breaks from string _A_ using regex	re.sub('(?<=[a-z])\\r?\\n', ' ', _A_)
Open gzip-compressed file encoded as utf-8 _A_ in text mode	gzip.open(_A_, 'rt', encoding='utf-8')
test if either of strings _A_ or _B_ are members of the set of strings, `['b', 'a', 'foo', 'bar']`	set(['_A_', '_B_']).issubset(['_B_', '_A_', 'foo', 'bar'])
Check if all the values in a list _A_ are present in another list _B_	all(x in _B_ for x in _A_)
Remove characters _A_ from a string _B_	_B_.translate(None, '_A_')
Remove characters _A_ from a string _B_	_B_ = re.sub('[_A_]', '', _B_)
Remove string _A_ from string _B_	_B_.replace('_A_', '')
Remove character _A_ from a string _B_	_B_ = _B_.replace(_A_, '')
Remove characters in `b` from a string _A_	_A_ = _A_.replace(char, '')
Remove characters in _A_ from a string _B_	_B_ = _B_.translate(string.maketrans('', ''), _A_)
binarize the values in columns of list _A_ in a pandas data frame	pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[_A_]
store integer 3, 4, 1 and 2 in a list	[3, 4, 1, 2]
define global variable _A_ with value _B_	globals()['_A_'] = '_B_'
insert spaces before capital letters in string _A_	re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', _A_)
print unicode string _A_ in uppercase	print('_A_'.upper())
get last element of string splitted by '\\' from list of strings _A_	[l.split('\\')[-1] for l in _A_]
combine two sequences into a dictionary	dict(zip(keys, values))
customize the time format in python logging	formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')
Replace comma with dot in a string _A_ using regex	"new_string = re.sub('""(\\d+),(\\d+)""', '\\1.\\2', _A_)"
call a function _A_ inside a bash script _B_ using subprocess	subprocess.call('_B_ _A_')
Can a python script execute a function inside a bash script?	subprocess.Popen(['bash', '-c', '. foo.sh; go'])
remove multiple spaces in a string _A_	""""""" """""".join(_A_.split())"
convert decimal 8 to a list of its binary values	list('{0:0b}'.format(8))
convert decimal integer 8 to a list of its binary values as elements	[int(x) for x in list('{0:0b}'.format(8))]
convert decimal _A_ to binary list	[int(x) for x in bin(_A_)[2:]]
get key-value pairs in dictionary _A_ for all keys in list _B_ in the order they appear in _B_	dict(zip(_B_, map(_A_.get, _B_)))
cartesian product of _A_ and _B_ array points into single array of 2d points	numpy.dstack(numpy.meshgrid(_A_, _B_)).reshape(-1, 2)
selenium wait for driver _A_ 60 seconds before throwing a NoSuchElementExceptions exception	_A_.implicitly_wait(60)
selenium webdriver switch to frame _A_	driver.switch_to_frame(_A_)
format current date to pattern _A_	time.strftime(_A_)
sort list _A_	sorted(_A_)
find all occurrences of regex pattern _A_ in string _B_	re.findall(_A_, _B_)
remove duplicate rows from dataframe _A_ and calculate their frequency	_A_.groupby(['key', 'year']).size().reset_index()
sort dictionary _A_ in ascending order by its values	sorted(list(_A_.items()), key=operator.itemgetter(1))
Iterate over dictionary _A_ in ascending order of values	sorted(iter(_A_.items()), key=lambda x: x[1])
iterate over a python dictionary, ordered by values	sorted(list(dictionary.items()), key=lambda x: x[1])
split 1d array _A_ into 2d array at the last element	np.split(_A_, [-1])
convert dataframe _A_ into a pivot table using column _B_ as index and values of column _C_ as columns	_A_.pivot(index=_B_, columns=_C_)
select all rows from pandas DataFrame _A_ where the value in column _B_ is greater than 1 or less than -1 in column _C_.	_A_[(_A_[_B_] > 1) | (_A_[_C_] < -1)]
Get the zip output as list from the lists _A_, _B_, _C_	[list(a) for a in zip(_A_, _B_, _C_)]
select rows of dataframe _A_ whose value for column _B_ is _C_	print(__B__.loc[__B__['_B_'] == '_C_'])
select rows whose column value in column _A_ does not equal _B_ in pandas data frame	df.loc[df['_A_'] != _B_]
select rows from a dataframe _A_ whose value for column _B_ is not in _C_	_A_.loc[~_A_['_B_'].isin(_C_)]
select all rows whose values in a column _A_ equals a scalar _B_ in pandas data frame object _C_	_C_.loc[_C_['_A_'] == _B_]
Select rows whose value of the _A_ column is _B_ or _C_ in the DataFrame _D_	print(_D_.loc[_D_['_A_'].isin(['_B_', '_C_'])])
repeat every character for 7 times in string _A_	""""""""""""".join(map(lambda x: x * 7, _A_))"
delete an empty directory	os.rmdir()
recursively delete all contents in directory _A_	shutil.rmtree(_A_, ignore_errors=False, onerror=None)
recursively remove folder _A_	os.removedirs(_A_)
Add row _A_ to dataframe _B_	_B_.loc[len(_B_)] = _A_
list all files in a current directory	glob.glob('*')
List all the files that doesn't contain the name _A_	glob.glob('[!_A_]*.txt')
List all the files that matches the pattern _A_	glob.glob('_A_')
evaluate the expression _A_	eval(_A_)
Copy list _A_ and name it _B_	_B_ = [x[:] for x in _A_]
convert scientific notation of variable _A_ to decimal	"""""""{:.50f}"""""".format(float(_A_[0] / _A_[1]))"
convert dataframe _A_ to integer-type sparse object	_A_.to_sparse(0)
display attribute _A_ for each object _B_ in list _C_	print([_B_._A_ for _B_ in _C_])
count the number of True values associated with key _A_ in dictionary _B_	sum(1 if _B_[_A_] else 0 for _B_ in s)
get the sum of values associated with the key ‘success’ for a list of dictionaries _A_	sum(d['success'] for d in _A_)
get complete path of a module named _A_	imp.find_module('_A_')[1]
get logical xor of _A_ and _B_	(bool(_A_) != bool(_B_))
get logical xor of _A_ and _B_	((_A_ and (not _B_)) or ((not _A_) and _B_))
get logical xor of _A_ and _B_	(bool(_A_) ^ bool(_B_))
get logical xor of _A_ and _B_	xor(bool(_A_), bool(_B_))
get the logical xor of two variables _A_ and _B_	return (bool(_A_) ^ bool(_B_))
Sort list _A_ in alphabetical order based on the values associated with key _B_ of each dictionary in the list	_A_.sort(key=operator.itemgetter(_B_))
split a string _A_  using both commas and semicolons as delimeters	re.split('\\s*,\\s*|\\s*;\\s*', '_A_')
Split a string _A_ by multiple separators _B_ and _C_	[t.strip() for s in _A_.split('_B_') for t in s.split('_C_')]
make a function _A_ that calculates the sum of two integer variables _B_ and _C_	_A_ = lambda _B_, _C_: _B_ + _C_
Create list _A_ containing 29 objects of type MyClass	_A_ = [MyClass() for i in range(29)]
"Make a dictionary from list _A_ which is in the format of four sets of  ""val, key, val"""	{_A_[i + 1]: [_A_[i], _A_[i + 2]] for i in range(0, len(_A_), 3)}
convert bytes string _A_  to an unsigned integer	struct.unpack('>q', _A_)[0]
concatenate a series _A_ onto a dataframe _B_ with pandas	pd.concat([_A_, pd.DataFrame(_B_)], axis=1)
Sort list _A_ in ascending order based on each of its elements' attribute _B_	_A_.sort(key=lambda x: x._B_)
BeautifulSoup select _A_ elements with an id attribute value ending with sub-string _B_ in HTML parsed string _C_	_C_.select('_A_[id$=_B_]')
sympy solve matrix of linear equations _A_ with variables _B_	linsolve(Matrix_A_, _B_)
best way to extract subset of key-value pairs with keys matching _A_, _B_, or _C_ from python dictionary object	{k: bigdict[k] for k in list(bigdict.keys()) & {_A_, _B_, _C_}}
extract subset of key-value pairs with keys as _A_ from dictionary object _B_	dict((k, _B_[k]) for k in _A_)
Get items from a dictionary _A_ where the keys are present in _B_	{k: _A_.get(k, None) for k in _B_}
Extract subset of key value pair for keys _A_, _B_, _C_ from _D_ in python 3	{k: _D_[k] for k in (_A_, _B_, _C_)}
Selenium get the entire _A_ page text	_A_.page_source
extracting column _A_ and _B_ from array _C_	_C_[:, ([_A_, _B_])]
remove all square brackets from string _A_	re.sub('\\[.*?\\]', '', _A_)
How can I resize the root window in Tkinter?	root.geometry('500x500')
find all substrings in string _A_ composed only of letters _B_ and _C_ where each _B_ is directly preceded and succeeded by _C_	re.findall('\\_C_(?:_C_+_B_)+_C_+\\_C_', _A_)
convert list _A_ of tuples of floats to list _B_ of tuples of strings of floats in scientific notation with eight decimal point precision	_B_ = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in _A_]
convert list of sublists _A_ of floats to a list of sublists _B_ of strings of integers in scientific notation with 8 decimal points	_B_ = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in _A_]
Create a tuple _A_ containing first element of each tuple in tuple _B_	_A_ = tuple(x[0] for x in _B_)
obtain the current day of the week in a 3 letter format from a datetime object	datetime.datetime.now().strftime('%a')
get the ASCII value of a character _A_ as an int	ord(_A_)
get the ASCII value of a character u'あ' as an int	ord('\u3042')
get the ASCII value of a character as an int	ord()
decode JSON string _A_ to a dictionary	json.load(_A_)
Delete mulitple columns _A_, _B_ in pandas data frame _C_	_C_.drop(['_A_', '_B_'], axis=1, inplace=True)
get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string _A_	[_A_.strip() for _A_ in input().split(',')]
create a list containing the digits values from binary string _A_ as elements	[int(d) for d in str(bin(_A_))[2:]]
get the max string length in list _A_	max(len(word) for word in _A_)
get the maximum string length in nested list _A_	len(max(_A_, key=len))
execute os command _A_	os.system(_A_)
sort list _A_ alphabetically	_A_.sort(key=lambda x: x.lower())
sort list _A_ in alphabetical order	_A_.sort(key=str.lower)
sort a list of strings _A_.	_A_.sort()
sort a list of strings _A_	_A_.sort()
Set multi index on columns _A_ and _B_ of data frame _C_ in pandas.	_C_.set_index([_A_, _B_], inplace=True)
get the attribute _A_ from object _B_	getattr(_B_, _A_)
remove first word in string _A_	_A_.split(' ', 1)[1]
save xlsxwriter file in _A_ path and assign to variable _B_	_B_ = xlsxwriter.Workbook(_A_)
save xlsxwriter file to _A_ path	workbook = xlsxwriter.Workbook(_A_)
change legend size to _A_ in upper-left location	pyplot.legend(loc=2, fontsize=_A_)
change legend font size with matplotlib.pyplot to 6	plot.legend(loc=2, prop={'size': 6})
split list _A_ into _B_ sized lists	[_A_[i:i + _B_] for i in range(0, len(_A_), _B_)]
split a list _A_ into evenly sized chunks _B_	[_A_[i:i + _B_] for i in range(0, len(_A_), _B_)]
check if character _A_ exists in a dataframe _B_ cell _C_	_B_[_C_].str.contains(_A_)
remove all non -word, -whitespace, or -apostrophe characters from string _A_	"re.sub(""[^\\w' ]"", '', ""_A_"")"
find all digits between two characters _A_ and _B_in a string _C_	print(re.findall('\\d+', '\n'.join(re.findall('_A_([\\s\\S]*?)_B_', _C_))))
plot data of column _A_ versus column _B_ of dataframe _C_ after resetting its index	_C_.reset_index().plot(x=_A_, y=_B_)
get the output of a subprocess command _A_ in command line	subprocess.check_output('_A_', shell=True)
Encode each value to _A_ in the list _B_	[x.encode(_A_) for x in _B_]
combine two columns _A_ and _B_ in a pandas data frame	pandas.concat([df['_A_'].dropna(), df['_B_'].dropna()]).reindex_like(df)
generate a list of consecutive integers from 0 to 8	list(range(9))
convert list _A_ into a unicode string	""""""""""""".join(chr(i) for i in _A_)"
inherit from class _A_	super(_A_, self).__init__(*args)
Remove the string value _A_ from a list of strings _B_	[_A_ for _A_ in _B_ if _A_ != '_A_']
randomly select an item from list _A_	random.choice(_A_)
check if all of the following items in list _A_ are in a list _B_	set(_A_).issubset(_B_)
Check if all the items in a list _A_ exists in another list _B_	set(_A_).issubset(set(_B_))
set the stdin of the process 'grep f' to be b_A_	p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl>grep_stdout = p.communicate(input=_A_)[0]
set the stdin of the process 'grep f' to be _A_	p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)<nl>p.stdin.write(_A_)<nl>p.communicate()[0]<nl>p.stdin.close()
to convert a list of tuples _A_ into list of lists	[list(t) for t in zip(*_A_)]
group a list _A_ of tuples by values	zip(*_A_)
merge pandas dataframe _A_ with columns _B_ and _C_ and dataframe _D_ with column 'y'	pd.merge(_D_, _A_, on='k')[[_B_, _C_, '_D_']]
Split string with comma (,) and remove whitespace from a string _A_	[item.strip() for item in _A_.split(',')]
Get all object attributes of object _A_	print((_A_.__dict__))
Get all object attributes of an object	dir()
Get all object attributes of an object	dir()
pygobject center window _A_	_A_.set_position(Gtk.WindowPosition.CENTER)
change the size of the sci notation to _A_ above the y axis in matplotlib _B_	_B_.rc('font', **{'size': _A_})
check if datafram _A_ has any NaN vlaues	_A_.isnull().values.any()
unpack the arguments out of list _A_ to function _B_	_B_(*_A_)
decode encodeuricomponent in GAE	urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')
get proportion of rows in dataframe _A_ whose values for column _B_ are greater than 0	(_A_['_B_'] > 0).mean()
convert a set of tuples _A_ to a string _B_	_B_ = '\n'.join(item[0] for item in _A_)
convert a set of tuples _A_ to a list of strings	[item[0] for item in _A_]
convert a list of tuples _A_ to a string from the first indexes.	emaillist = '\n'.join([item[0] for item in _A_])
get the widget which has currently the focus in tkinter instance _A_	print(('focus object class:', _A_.focus_get().__class__))
Initialize a list _A_ with _B_ items and each item's value _C_	_A_ = [_C_] * _B_
Keep only unique words in list of words _A_ and join into string	print(' '.join(sorted(set(_A_), key=_A_.index)))
generate 6 random numbers between 1 and 50	random.sample(range(1, 50), 6)
generate six unique random numbers in the range of 1 to 49.	random.sample(range(1, 50), 6)
lowercase keys and values in dictionary _A_	{k.lower(): v.lower() for k, v in list(_A_.items())}
lowercase all keys and values in dictionary _A_	dict((k.lower(), v) for k, v in _A_.items())
Convert each key,value pair in a dictionary _A_ to lowercase	dict((k.lower(), v.lower()) for k, v in _A_.items())
sorting the lists in list of lists _A_	[sorted(item) for item in _A_]
SQLite get a list of column names from cursor object _A_	names = list(map(lambda x: x[0], _A_.description))
get the absolute path of a running python script	os.path.abspath(__file__)
sort 2d array _A_ by row with index 1	sorted(_A_, key=itemgetter(1))
Get all indexes of a letter _A_ from a string _B_	[index for index, letter in enumerate(_B_) if letter == '_A_']
decode utf-8 code _A_ into a raw unicode literal	print(str(_A_).decode('raw_unicode_escape'))
split string _A_ into a list of characters	re.findall('\\w', _A_)
check whether a file _A_ exists	os.path.isfile(_A_)
check whether file _A_ exists	my_file = Path('_A_')<nl>if my_file.is_file():<nl>    pass
check whether file _A_ exists	os.path.exists(_A_)
check whether a file _A_ exists	print(os.path.isfile('_A_'))
check whether a file _A_ exists	print(os.path.isfile('_A_'))
check whether a path _A_ exists	print(os.path.exists('_A_'))
check whether a file _A_ exists	print(os.path.isfile('_A_'))
check whether a path _A_ exists	print(os.path.exists('_A_'))
check whether a path _A_ exists	print(os.path.exists('_A_'))
split string _A_ on delimiters _B_ and _C_	"""""_A_"""".replace(_B_, ' ').replace(_C_, ' ').split()"
get a list each value _A_ in the implicit tuple _B_	list(_A_ for _A_ in _B_)
add field names as headers in csv constructor _A_	_A_.writeheader()
flatten a tuple _A_	[(a, b, c) for a, (b, c) in _A_]
convert 3652458 to string represent a 32bit hex number	"""""""0x{0:08X}"""""".format(3652458)"
convert a python dictionary _A_ to a list of tuples	[(v, k) for k, v in list(_A_.items())]
convert dictionary of pairs _A_ to a list of tuples	[(v, k) for k, v in _A_.items()]
convert python 2 dictionary _A_ to a list of tuples where the value is the first tuple element and the key is the second tuple element	[(v, k) for k, v in _A_.items()]
convert a python dictionary _A_ to a list of tuples	[(k, v) for k, v in _A_.items()]
convert a list of hex byte strings _A_ to a list of hex integers	[int(x, 16) for x in _A_]
convert the elements of list _A_ from hex byte strings to hex integers	[int(x, 16) for x in _A_]
assign values to two variables, _A_ and _B_ from user input response to _C_ split on whitespace	_A_, _B_ = input(_C_').split()
Filter a json from a key-value pair as _A_ in Django	Test.objects.filter(actions__contains=[_A_])
create a list containing a four elements long tuples of permutations of binary values	itertools.product(list(range(2)), repeat=4)
get yesterday's date as a string in `YYYY-MM-DD` format using timedelta	(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')
Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`	np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
convert date strings in pandas dataframe column_A_ to pandas timestamps using the format _B_	_A_ = pd.to_datetime(_A_, format=_B_)
Importing file _A_ from folder _B_	sys.path.insert(0, _B_)<nl>import _A_
do a _A_ merge of dataframes _B_ and _C_ on the column _D_ and sort by _E_	_B_.reset__E_().merge(_C_, how='_A_', on='_D_', sort=False).sort('_E_')
Create a default empty json object if no json is available in request parameter _A_	json.loads(request.POST.get('_A_', '{}'))
get a list of tuples of every three consecutive items in list _A_	list(zip(*((iter(_A_),) * 3)))
slice list _A_ into lists of two elements each	list(grouper(2, _A_))
Slicing a list into a list of sub-lists	[input[i:i + n] for i in range(0, len(input), n)]
Sort list _A_ based on its elements' dot-seperated numbers	_A_.sort(key=lambda x: map(int, x.split('.')))
Sort a list of integers _A_ where each value is in string format	_A_.sort(key=lambda x: [int(y) for y in x.split('.')])
convert a 3d array _A_ of dimensions 4x2x3 to a 2d array   of dimensions 3x8	_A_.transpose(2, 0, 1).reshape(3, -1)
replacing _A_ and _B_ values in column _C_ of dataframe _D_ with _E_	_D_[_C_].replace([_A_, _B_], _E_)
replace values _A_ in a column _B_ of  pandas dataframe _C_ with another value _D_	_C_[_B_] = _C_[_B_].replace(_A_, _D_)
Subtract the mean of each row in dataframe _A_ from the corresponding row's elements	_A_.sub(_A_.mean(axis=1), axis=0)
remove all non-alphabet chars from string _A_	""""""""""""".join([i for i in _A_ if i.isalpha()])"
split a string _A_ into integers	l = (int(x) for x in _A_.split())
split a string _A_ by white spaces.	"""""""_A_"""""".split()"
How to split a string into integers in Python?	map(int, '42 0'.split())
get indexes of all true boolean values from a list _A_	[i for i, elem in enumerate(_A_, 1) if elem]
group dataframe _A_ entries by year value of the date in column _B_	_A_.groupby(_A_[_B_].map(lambda x: x.year))
Get the indices in array _A_ of each element appearing in array _B_	np.in1d(_A_, _B_).nonzero()[0]
display current time in readable format	time.strftime('%l:%M%p %z on %b %d, %Y')
rotate x-axis text labels of plot _A_ 45 degrees	_A_.set_xticklabels(_A_.xaxis.get_majorticklabels(), rotation=45)
append array of strings _A_ into one string	""""""""""""".join(_A_)"
retrieve all items in an numpy array _A_ except the item of the index 1	_A_[(np.arange(_A_.shape[0]) != 1), :, :]
pull a value with key _A_ from a json object _B_	print(_B_[_A_])
read a file from redirected stdin and save to variable _A_	_A_ = sys.stdin.read()
Get all the texts without tags from beautiful soup object _A_	""""""""""""".join(_A_.findAll(text=True))"
extract all rows from dataframe _A_ where the value of column _B_ is True	_A_[data[_B_] == True]
removing duplicate characters from a string variable _A_	""""""""""""".join(set(_A_))"
sort objects in model _A_ based on Theirs _B_ attribute	sorted(_A_.objects.all(), key=lambda p: p._B_)
flatten a dataframe df to a list	df.values.flatten()
sort list _A_ using values associated with key _B_ according to elements in list _C_	_A_.sort(key=lambda x: _C_.index(x[_B_]))
sort a python list of dictionaries _A_ by a given list _B_ of ids _C_ with the desired order	_A_.sort(key=lambda x: _B_.index(x[_C_]))
request URI _A_ and pass authorization token _B_ to the header	r = requests.get(_A_, headers={'Authorization': _B_})
un-escape a backslash-escaped string in _A_	"print('""_A_""'.decode('string_escape'))"
match regex pattern _A_ on string _B_ with DOTALL enabled	re.findall(_A_, _B_, re.DOTALL)
get second array column length of array _A_	_A_.shape[1]
use operations like max/min within a row to a dataframe _A_ in pandas	_A_.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)
count number of occurrences of a substring _A_ in a string _B_	"""""_B_"""".count(_A_)"
get a list of values with key _A_ from a list of dictionaries _B_	[d[_A_] for d in _B_ if _A_ in d]
get a list of values for key _A_ from a list of dictionaries _B_	[d[_A_] for d in _B_]
get a list of values for key _A_ from a list of dictionaries in _B_	[d['_A_'] for d in _B_]
order a list of lists _A_ by the first value	_A_.sort(key=lambda x: int(x[0]))
order a list of lists _A_ by the first value of individual list	sorted(_A_)
replace a string _A_ in case sensitive way using maketrans	"""""""_A_"""""".translate(maketrans('abcABC', 'defDEF'))"
dictionary _A_ to string, custom format	"""""""<br/>"""""".join([('%s:: %s' % (key, value)) for key, value in list(_A_.items())])"
how to write a unicode csv in Python 2.7	self.writer.writerow([str(s).encode('utf-8') for s in row])
clear terminal screen on windows	os.system('cls')
clear the terminal screen in Linux	os.system('clear')
execute external commands/script _A_ with csh instead of bash	os.system('tcsh _A_')
execute command _A_ in Z shell	"os.system(""zsh -c _A_"")"
update a list _A_ dictionaries with a key _B_ and value from list _C_	[dict(d, _B_=n) for d, n in zip(_A_, _C_)]
create a list with the sum of respective elements of the tuples of list _A_	[sum(x) for x in zip(*_A_)]
sum each value in a list _A_ of tuples	map(sum, zip(*_A_))
count the number of non-nan elements in a numpy ndarray matrix _A_	np.count_nonzero(~np.isnan(_A_))
Convert each list in list _A_ into a tuple	map(list, zip(*_A_))
django get the value of key _A_ from POST request _B_ if exists, else return empty string _C_	_B_.POST.get(_A_, _C_)
check if string _A_ ends with one of the strings from a tuple _B_	"""""""_A_"""""".endswith(_B_)"
split a string _A_ by space while ignoring spaces within square braces and quotes.	"re.findall('\\[[^\\]]*\\]|""[^""]*""|\\S+', _A_)"
get biggest 3 values from each column of the pandas dataframe _A_	_A_.apply(lambda x: sorted(x, 3))
permanently set the current directory to the _A_	os.chdir(_A_)
get all characters between two _A_ characters in string _B_	re.findall('\\_A_([^_A_]*)\\_A_', _B_)
getting the string between 2 _A_ characters in '$sin (x)$ is an function of x'	re.findall('\\_A_(.*?)\\_A_', '_A_sin (x)_A_ is an function of x')
Format a date object `str_data` into iso fomrat	datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
get element at index 0 of first row and element at index 1 of second row in array _A_	_A_[[0, 1], [0, 1]]
subset numpy array _A_ by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.	_A_[np.arange(3), (0, 1, 0)]
Get a list of all keys from dictionary _A_ where the number of occurrences of value _B_ in that key is more than _C_	[k for k, v in _A_.items() if v.count('_B_') > _C_]
Create sub matrix of a list of lists _A_ (without numpy)	_A_
get an element at index `[1,1]`in a numpy array _A_	print(_A_[1, 1])
Set colorbar range from _A_ to _B_ for pyplot object _C_ in matplotlib	_C_.set_clim(vmin=_A_, vmax=_B_)
read csv file _A_ into numpy array	my_data = genfromtxt(_A_, delimiter=',')
read csv file _A_ into array	df = pd.read_csv(_A_, sep=',', header=None)
read csv file _A_ into array	np.genfromtxt(_A_, delimiter=',')
read csv file _A_ into array	np.genfromtxt(_A_, delimiter=',', dtype=None)
read the first line of a string _A_	_A_.splitlines()[0]
How do I read the first line of a string?	my_string.split('\n', 1)[0]
generate a list from a pandas dataframe _A_ with the column name and column values	_A_.values.tolist()
Replace repeated instances of a character _A_ with a single instance in a string _B_	re.sub('\\*\\*+', _A_, _B_)
replace repeated instances of _A_ with a single instance of _A_	re.sub('\\_A_+', '_A_', text)
multiply values of dictionary _A_ with their respective values in dictionary _B_	_A_((k, v * _B_[k]) for k, v in list(dict1.items()) if k in _B_)
Get a random string of length _A_	return ''.join(random.choice(string.lowercase) for i in range(_A_))
Get total number of values in a nested dictionary _A_	sum(len(x) for x in list(_A_.values()))
count all elements in a nested dictionary _A_	sum(len(v) for v in _A_.values())
apply logical operator 'AND' to all elements in list _A_	all(_A_)
removing vowel characters _A_ from string _B_	""""""""""""".join(c for c in _B_ if c not in _A_)"
Divide elements in list _A_ from elements at the same index in list _B_	[(x / y) for x, y in zip(_A_, _B_)]
match regex _A_ on string _B_	re.findall(_A_, _B_)
apply function _A_ to the grouped values by _B_ in dataframe _C_	_C_.groupby(_B_).apply(lambda x: np.mean(np._A_(x['v'])))
get geys of dictionary _A_ that contain any values from list _B_	[key for key, value in list(_A_.items()) if set(value).intersection(_B_)]
get list of keys in dictionary _A_ whose values contain values from list _B_	[key for item in _B_ for key, value in list(_A_.items()) if item in value]
Sum elements of tuple _A_ to their respective elements of each tuple in list _B_	c = [[(i + j) for i, j in zip(e, _A_)] for e in _B_]
get the common prefix from comparing two absolute paths _A_ and _B_	os.path.commonprefix([_A_, _B_])
get relative path of path _A_ regarding path _B_	print(os.path.relpath(_B_, _A_))
filter dataframe _A_ where the length of each group _B_ is bigger than 1	_A_.filter(lambda _B_: len(_B_) > 1)
sort dictionary of lists _A_ by the third item in each list	sorted(list(_A_.items()), key=lambda e: e[1][2])
Format string _A_ to be interspersed by _B_ three times, specifying the value as _C_ only once	"""""""_A_"""""".format(_B_='_C_')"
reorder indexed rows _A_ based on a list in pandas data frame _B_	_B_.reindex(_A_)
check if any values in a list _A_ is a list	any(isinstance(el, list) for el in _A_)
get the size of list _A_	len(_A_)
get the size of a list `[1,2,3]`	len([1, 2, 3])
get the size of object _A_	_A_.__len__()
function to get the size of object	len()
get the size of list _A_	len(_A_)
sort each row in a pandas dataframe _A_ in descending order	_A_.sort(axis=1, ascending=False)
Fastest way to sort each row in a pandas dataframe	df.sort(df.columns, axis=1, ascending=False)
get count of rows in each series grouped by column _A_ and column _B_ of dataframe _C_	_C_.groupby([_A_, _B_]).size().groupby(level=1).max()
check if string _A_ is  in list `[_A_, 'd', 'a', 's', 'd', 's']`	_A_ in [_A_, 'd', 'a', 's', 'd', 's']
Delete an item with key _A_ from _B_	_B_.pop('_A_', None)
Delete an item with key _A_ from _B_	del _B_[_A_]
Delete an item with key _A_ from _B_	try:<nl>    del _B_[_A_]<nl>except KeyError:<nl>    pass<nl>try:<nl>    del _B_[_A_]<nl>except KeyError:<nl>    pass
specify multiple positional arguments with argparse	parser.add_argument('input', nargs='+')
Plot using the color code _A_ in matplotlib pyplot	pyplot.plot(x, y, color='_A_')
strip html from strings	re.sub('<[^<]+?>', '', text)
align values in array _A_ to the order of corresponding values in array _B_	_B_[np.in1d(_B_, _A_)]
split string _A_ on the first occurrence of delimiter _B_	"""""_A_"""".split(_B_, 1)"
print numbers in list _A_ with precision of 3 decimal places	print('[%s]' % ', '.join('%.3f' % val for val in _A_))
format print output of list of floats _A_ to print only up to 3 decimal points	print('[' + ', '.join('%5.3f' % v for v in _A_) + ']')
print a list of floating numbers _A_ using string formatting	print([('%5.3f' % val) for val in _A_])
Change the current directory one level up	os.chdir('..')
print a unicode string _A_	print(_A_.encode('windows-1252'))
convert string representation _A_ of binary string rep of integer to floating point number	struct.unpack('d', struct.pack('Q', int(_A_, 0)))[0]
convert a binary _A_ to a float number	float(int(_A_, 0))
convert a binary _A_ to a float number	struct.unpack('d', _A_)[0]
plot a bar graph from the column 'color' in the DataFrame _A_	_A_.colour.value_counts().plot(kind='bar')
plot categorical data in series _A_ with kind _B_ using pandas and matplotlib	_A_.groupby('colour').size().plot(kind='_B_')
strip and split each line _A_ on white spaces	_A_.strip().split(' ')
apply functions _A_ and _B_ to each column in dataframe _C_	_C_.groupby(lambda idx: 0).agg(['_A_', '_B_'])
sort dictionary _A_ in reverse order by values cast to integers	sorted(list(_A_.items()), key=lambda x: int(x[1]), reverse=True)
find the largest integer less than _A_	int(math.ceil(_A_)) - 1
check if the string _A_ is empty	if (not _A_):<nl>    pass
check if string _A_ is empty	if (not _A_):<nl>    pass
check if string _A_ is empty	if (not _A_):<nl>    pass
check if string `my_string` is empty	if some_string:<nl>    pass
iterate over a dictionary _A_ in sorted order	it = iter(sorted(_A_.items()))
iterate over a dictionary _A_ in sorted order	for (key, value) in sorted(_A_.items()):<nl>    pass
iterate over a dictionary _A_ in sorted order	return sorted(_A_.items())
iterate over a dictionary _A_ in sorted order	return iter(sorted(_A_.items()))
iterate over a dictionary _A_ in sorted order	for (k, v) in sorted(_A_.items()):<nl>    pass
iterate over a dictionary _A_ sorted by the key	for k in sorted(_A_.keys()):<nl>    pass
assign the index of the last occurence of _A_ in list _B_ to the variable _C_	_C_ = len(_B_) - _B_[::-1].index(_A_) - 1
concatenating values in _A_ to a string	str1 = ''.join(_A_)
concatenating values in list _A_ to a string, separate by space	' '.join((str(x) for x in _A_))
concatenating values in _A_ to a string	str1 = ''.join((str(e) for e in _A_))
concatenating values in list _A_ to a string	makeitastring = ''.join(map(str, _A_))
remove None value from list _A_	[x for x in _A_ if x is not None]
select a random element from array _A_	random.choice(_A_)
creating a 5x6 matrix filled with _A_ and save it as _B_	_B_ = [[_A_ for _ in range(5)] for _ in range(6)]
create a new 2D array with 2 random rows from array _A_	_A_[(np.random.choice(_A_.shape[0], 2, replace=False)), :]
create a new 2 dimensional array containing two random rows from array _A_	_A_[(np.random.randint(_A_.shape[0], size=2)), :]
combining rows in pandas by adding their values	df.groupby(df.index).sum()
find all `owl:Class` tags by parsing xml with namespace	root.findall('{http://www.w3.org/2002/07/owl#}Class')
generate a random string of length _A_  containing lower cased ASCII letters	""""""""""""".join(random.choice(string.lowercase) for _A_ in range(X))"
add a path _A_ to system path	sys.path.append('_A_')
round number _A_ to nearest integer	int(round(_A_))
round number _A_ to nearest integer	_A_ = int(round(_A_))
round number 32.268907563 up to 3 decimal points	round(32.268907563, 3)
round number _A_ up to _B_ decimal places	round(_A_, _B_)
round number 1.0005 up to 3 decimal places	round(1.0005, 3)
round number 2.0005 up to 3 decimal places	round(2.0005, 3)
round number 3.0005 up to 3 decimal places	round(3.0005, 3)
round number 4.0005 up to 3 decimal places	round(4.0005, 3)
round number 8.005 up to 2 decimal places	round(8.005, 2)
round number 7.005 up to 2 decimal places	round(7.005, 2)
round number 6.005 up to 2 decimal places	round(6.005, 2)
round number 1.005 up to 2 decimal places	round(1.005, 2)
fill missing value in one column _A_ with the value of another column _B_	df[_A_].fillna(df[_B_])
convert the argument _A_ with string formatting in logging	logging.info('_A_=%s', _A_)
Log message of level _A_ with value of _B_ in the message	logging._A_('_B_={}'.format(_B_))
convert values in dictionary _A_ into integers	{k: int(v) for k, v in _A_.items()}
sum elements at the same index of each list in list _A_	map(sum, zip(*_A_))
Convert a string _A_ containing hex bytes to a hex string	_A_.decode('hex')
convert a string _A_ containing hex bytes to a hex string	binascii.a2b_hex(_A_)
send data 'HTTP/1.0 200 OK\r\n\r\n' to socket _A_	_A_.send('HTTP/1.0 200 established\r\n\r\n')
send data _A_ to socket _B_	_B_.send(_A_)
set the value of cell _A_ equal to 10 in dataframe _B_	_B__A_ = 10
normalize the dataframe _A_ along the rows	np.sqrt(np.square(_A_).sum(axis=1))
remove identical items from list _A_ and sort it alphabetically	sorted(set(_A_))
find the index of the element with the maximum value from a list _A_.	max(enumerate(_A_), key=lambda x: x[1])[0]
create a list where each element is a value of the key _A_ for each dictionary _B_ in the list _C_	[_B_[_A_] for _B_ in _C_]
create a list of tuples with the values of keys _A_ and _B_ from each dictionary _C_ in the list _D_	[(_C_[_A_], _C_[_B_]) for _C_ in _D_]
grab one random item from a database _A_ in django/postgresql	_A_.objects.all().order_by('?')[0]
run python script _A_ from another python script, passing in 1 as an argument	os.system('_A_ 1')
python regex for hyphenated words in _A_	re.findall('\\w+(?:-\\w+)+', _A_)
create variable key/value pairs with argparse	parser.add_argument('--conf', nargs=2, action='append')
Get _A_ unique items from a list	random.sample(list(range(1, 16)), _A_)
sort list _A_ in alphabetical order based on the letter after percent character _B_ in each element	_A_.sort(key=lambda str: re.sub('.*_B_(.).*', '\\1', str))
sort a list of strings _A_ based on regex match	_A_.sort(key=lambda str: re.sub('.*%', '', str))
Create list _A_ containing 3 empty lists	_A_ = [[] for i in range(3)]
sort numpy float array _A_ column by column	_A_ = np.array(sorted(_A_, key=tuple))
Get a list from two strings _A_ and _B_ with values as each character concatenated	[(x + y) for x in '_A_' for y in '_B_']
trim string _A_	'_A_'.strip()
trim string `myString `	myString.strip()
Trimming a string _A_	'_A_'.strip()
Trimming a string _A_	'_A_'.strip()
Trimming a string _A_	'_A_'.strip()
Trimming a string _A_	'_A_'.strip()
Trimming a string _A_	_A_.strip()
Trimming _A_ from string _B_	_B_.strip('_A_')
left trimming _A_ from string _B_	_B_.lstrip('_A_')
right trimming _A_ from string _B_	_B_.rstrip('_A_')
Trimming a string _A_ by space	'_A_'.strip(' ')
sort a list of tuples _A_ based on two elements, second and third	sorted(_A_, key=lambda element: (element[1], element[2]))
decode string _A_ to UTF-8 code	print(_A_.decode('utf8'))
find the index of the maximum value in the array _A_ where the boolean condition in array _B_ is true	np.ma.array(np.tile(_A_, 2).reshape(2, 3), mask=~_B_).argmax(axis=1)
convert a dataframe _A_'s column _B_ into datetime, after removing the first and last 3 letters	pd.to_datetime(_A_._B_.str[1:-3])
read CSV file _A_ into a dataframe _B_ with datatype of float for column _C_ considering character _D_ as NaN value	_B_ = pd.read_csv(_A_, dtype={_C_: np.float64}, na_values=[_D_])
convert nan values to ‘n/a’ while reading rows from a csv _A_ with pandas	df = pd._A_('my.csv', na_values=['n/a'])
create a list containing all cartesian products of elements in list _A_	list(itertools.product(*_A_))
remove uppercased characters in string _A_	re.sub('[^A-Z]', '', _A_)
convert string _A_ into a DateTime object using format _B_	datetime.strptime(_A_, _B_)
read file _A_ using encoding _B_	codecs.open(_A_, 'r', _B_).read()
create a list containing elements from list _A_ that are predicate to function _B_	[_B_(x) for x in _A_]
regex matching 5-digit substrings not enclosed with digits in _A_	re.findall('(?<!\\d)\\d{5}(?!\\d)', _A_)
create a list containing elements of list _A_ if the sum of the element is greater than 10	[item for item in _A_ if sum(item) > 10]
convert currency string _A_ to decimal _B_	_B_ = int(round(float(_A_.strip('$')) * 100))
remove letters from string _A_ if the letter exist in list _B_	""""""""""""".join(dropwhile(lambda x: x in _B_, _A_[::-1]))[::-1]"
Creating an empty list _A_	_A_ = []
Creating an empty list _A_	_A_ = list()
Creating an empty list	list()
Creating an empty list	[]
properly quit a program	sys.exit(0)
add string _A_ in `4th` position of a string _B_	_B_[:4] + '_A_' + _B_[4:]
append 3 lists in one list	[[] for i in range(3)]
Initialize a list of empty lists _A_ of size 3	_A_ = [[] for i in range(3)]
request URL _A_ using http header _B_	requests.get(_A_, headers=_B_)
set the y axis range to _A_ in subplot using pylab	pylab.ylim([_A_])
convert a column of list in series _A_ to dummies	pd.get_dummies(_A_.apply(pd.Series).stack()).sum(level=0)
Finding the largest delta between two integers in a list in python	max(abs(x - y) for x, y in zip(values[1:], values[:-1]))
convert a hex string _A_ to string	y = str(int(_A_, 16))
check if string _A_ is an integer	_A_.isdigit()
function to check if a string is a number	isdigit()
check if string _A_ is a number	_A_.isdigit()
pandas read comma-separated CSV file _A_ and skip commented lines starting with _B_	pd.read_csv(StringIO(_A_), sep=',', comment=_B_)
pandas: change all the values of a column _A_ into _B_	df[_A_] = df[_A_].apply(lambda x: _B_)
sum a list of numbers _A_	sum(_A_)
Get an item from a list of dictionary _A_ which has maximum value in the key _B_ using lambda function	max(_A_, key=lambda x: x['_B_'])
BeautifulSoup find all tags with attribute _A_ equal to _B_	soup.findAll(attrs={_A_: _B_})
remove all spaces from a string converted from dictionary _A_	str(_A_).replace(': ', ':').replace(', ', ',')
convert dictionary `dict` into a string formatted object	'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'
concatenate items from list _A_ into a string starting from the second element	""""""""""""".join(_A_[1:])"
insert a character _A_ into a string in front of _B_ character in second part of the string	"""""""_A_+"""""".join(c.rsplit(_B__A_ 1))"
delete all rows in a numpy array _A_ where any value in a row is zero _B_	_A_[np.all(_A_ != _B_, axis=1)]
extract only alphabetic characters from a string _A_	""""""" """""".join(re.split('[^a-zA-Z]*', '_A_'))"
Extract only characters from a string as a list	re.split('[^a-zA-Z]*', 'your string')
get the union set from list of lists _A_	results_union = set().union(*_A_)
get the union of values in list of lists _A_	return list(set(itertools.chain(*_A_)))
check if a numpy array _A_ contains any element of another array _B_	np.any(np.in1d(_A_, _B_))
removing control characters from a string _A_	return ''.join(ch for ch in _A_ if unicodedata.category(ch)[0] != 'C')
Compare if each value in list _A_ is less than respective index value in list _B_	all(i < j for i, j in zip(_A_, _B_))
python selenium click on button _A_	driver.find_element_by_css_selector(_A_).click()
python selenium click on button	driver.find_element_by_css_selector('.button .c_button .s_button').click()
kill a process _A_ from python script on windows	os.system('taskkill /im _A_')
SQLAlchemy select records of columns of table _A_ in addition to current date column	print(select([_A_, func.current_date()]).execute())
remove duplicate characters from string _A_	re.sub('([a-z])\\1+', '\\1', _A_)
remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string _A_ using regular expressions	re.sub('(?<!\\w)([A-Z])\\.', '\\1', _A_)
Get a list of strings `split_text` with fixed chunk size _A_ from a string _B_	split_list = [_B_[i:i + _A_] for i in range(0, len(_B_), _A_)]
"match string _A_ with regex _B_
then replace it with regex _C_"	re.sub(_B_, _C_, _A_)
output data of the first 7 columns of Pandas dataframe	pandas.set_option('display.max_columns', 7)
Display maximum output data of columns in dataframe _A_ that will fit into the screen	_A_.set_option('display.max_columns', None)
set the value in column _A_ to NaN if the corresponding value in column _B_ is equal to 0 in pandas dataframe _C_	_C_.ix[_C_._B_ == 0, __B__] = np.nan
Selecting Element _A_ followed by text _B_ with Selenium WebDriver _C_	"_C_.find_element_by_xpath(""_A_[contains(..,'_B_')]"")"
Sort a list of dictionaries _A_ by keys _B_ and _C_	_A_.sort(key=operator.itemgetter('_B_', '_C_'))
ordering a list of dictionaries _A_ by elements _B_ and _C_	_A_.sort(key=lambda d: (d[_B_], d[_C_]))
Convert a list of lists _A_ to a dictionary with key as second value of a list and value as list itself	{x[1]: x for x in _A_}
sort keys of dictionary _A_ based on their values	sorted(_A_, key=lambda k: _A_[k][1])
round 123 to 100	int(round(123, -2))
create file _A_ if file _A_ does not exist	fd = os.open(_A_, os.O_WRONLY | os.O_CREAT | os.O_EXCL)
get a list of last trailing words from another list  of strings_A_	new_list = [x.split()[-1] for x in _A_]
Reverse a string _A_	_A_[::(-1)]
Reverse list _A_	_A_[::(-1)]
Reverse string _A_	''.join(reversed(_A_))
Reverse a string _A_	''.join(reversed(_A_))
Reverse a string _A_	'_A_'[::(-1)]
Reverse a string _A_	_A_[::(-1)]
Reverse a string _A_	def reversed_string(_A_):<nl>    return _A_[::(-1)]
Reverse a string _A_	''.join(reversed(_A_))
generate a string of numbers separated by comma which is divisible by _A_ with remainder _B_ or _C_.	""""""","""""".join(str(i) for i in range(100) if i % _A_ in (_B_, _C_))"
convert list _A_ of key, value pairs into a dictionary	dict([(e[0], int(e[1])) for e in _A_])
sorting a list of tuples _A_ where each tuple is reversed	sorted(_A_, key=lambda tup: tup[::-1])
sorting a list of tuples _A_ by second key	sorted(_A_, key=lambda tup: tup[1])
Concatenating two one-dimensional NumPy arrays _A_ and _B_.	numpy.concatenate([_A_, _B_])
writing items in list _A_ to file _B_	for item in _A_:<nl>    _B_.write(('%s\n' % item))
writing items in list _A_ to file `thefile`	for item in _A_:<nl>    pass
serialize _A_ to file _B_	pickle.dump(_A_, _B_)
writing items in list _A_ to file _B_	_B_.write('\n'.join(_A_))
Update a user's name as _A_ having id _B_ in SQLAlchemy	session.query(User).filter_by(id=_B_).update({'name': '_A_'})
send cookies _A_ in a post request to url _B_ with the python requests library	r = requests.post(_B_, cookies=_A_)
insert directory _A_ at the 0th index of current directory	sys.path.insert(0, _A_)
get current date and time	datetime.datetime.now()
get current time	datetime.datetime.now().time()
get current time in pretty format	strftime('%Y-%m-%d %H:%M:%S', gmtime())
get current time in string format	str(datetime.now())
get current time	datetime.datetime.time(datetime.datetime.now())
convert hex _A_ to integer	ord(_A_)
identify duplicated rows in columns _A_ and _B_ with additional column in dataframe _C_	_C_.groupby([_A_, _B_]).cumcount() + 1
get current utc time	datetime.utcnow()
move last item of array _A_ to the first position	_A_[-1:] + _A_[:-1]
Convert dataframe _A_ to a pivot table using column _B_, _C_, and _D_ as indexes	_A_.set_index([_B_, _C_, _D_]).unstack(level=-1)
run a pivot with a multi-index _A_ and _B_ in a pandas data frame	df.pivot_table(values='value', index=['_A_', '_B_'], columns='item')
print a rational number `3/2`	print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')
What is the best way to sort list with custom sorting parameters in Python?	li1.sort(key=lambda x: not x.startswith('b.'))
iterate backwards from 10 to 0	range(10, 0, -1)
get value of first child of xml node _A_	_A_[0].firstChild.nodeValue
start a new thread for _A_ with parameters _B_ and 1	thread.start_new_thread(_A_, (_B_, 1))
start a new thread for _A_ with parameters _B_ and 1	thread.start_new_thread(_A_, (_B_, 1))
get index of the first biggest element in list _A_	_A_.index(max(_A_))
replace periods _A_ that are not followed by periods or spaces with a period and a space `. `	re_A_sub('\\_A_(?=[^ _A_])', '_A_ ', para)
convert a string _A_ of letters embedded in squared brackets into embedded lists	[i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', _A_)]
extract dictionary _A_ from list _B_ where the value associated with the key _C_ of dictionary _A_ is equal to _D_	[_A_ for _A_ in _B_ if _A_[_C_] == _D_]
extract dictionary from list of dictionaries based on a key's value.	[d for d in a if d['name'] == 'pluto']
Retrieve list of values from dictionary _A_	list(_A_.values())
replace occurrences of two whitespaces or more with one whitespace _A_ in string _B_	re.sub(' +', _A_, _B_)
Change the mode of file _A_ to permission number 484	os.chmod(_A_, 484)
write pandas dataframe _A_ to the file _B_ without row names	_A_.to_csv(_B_, index=False)
remove all words which contains number from a string _A_ using regex	re.sub('\\w*\\d\\w*', '', _A_).strip()
control the keyboard and mouse with dogtail in linux	dogtail.rawinput.click(100, 100)
parse date string _A_ using format _B_	datetime.strptime(_A_, _B_)
Get the position of a regex match for word _A_ in a string _B_	re.search('\\bis\\b', _B_).start()
Get the position of a regex match _A_ in a string _B_	re.search('_A_', _B_).start()
input an integer tuple from user	tuple(map(int, input().split(',')))
input a tuple of integers from user	tuple(int(x.strip()) for x in input().split(','))
replace unicode character _A_ in string _B_ with _C_	_B_.decode('utf-8').replace(_A_, _C_).encode('utf-8')
replace unicode characters _A_\u2022' in string 'str' with '*'	_A_ _A_s_A_t_A_r_A_._A_d_A_e_A_c_A_o_A_d_A_e_A_(_A_'_A_u_A_t_A_f_A_-_A_8_A_'_A_)_A_._A_r_A_e_A_p_A_l_A_a_A_c_A_e_A_(_A_'_A_\_A_u_A_2_A_0_A_2_A_2_A_'_A_,_A_ _A_'_A_*_A_'_A_)_A_ _A_
convert ndarray with shape 3x3 to array	np.zeros((3, 3)).ravel()
get os name	import platform<nl>platform.system()
get os version	import platform<nl>platform.release()
get the name of the OS	print(os.name)
What is the most pythonic way to exclude elements of a list that start with a specific character?	[x for x in my_list if not x.startswith('#')]
replace fields delimited by braces {} in string _A_ with string _B_	"""""_A_"""".format(_B_)"
Get a minimum value from a list of tuples _A_ with values of type `string` and _B_ with nan	min(_A_, key=lambda x: _B_('inf') if math.isnan(x[1]) else x[1])
Find average of a nested list _A_	_A_ = [(sum(x) / len(x)) for x in zip(*_A_)]
Log info message _A_ with attributes _B_	logging.info(_A_, extra=_B_)
replace values of dataframe _A_ with True if numeric	_A_.applymap(lambda x: isinstance(x, (int, float)))
sort list _A_ based on its elements' digits	sorted(_A_, key=lambda x: int(re.search('\\d+', x).group(0)))
close the window in tkinter	self.root.destroy()
get mean of columns _A_ for all rows in dataframe _B_	_B_.iloc[:, ([_A_])].mean(axis=1)
filter dataframe _A_ by sub-level index _B_ in pandas	_A_[df.index.map(lambda x: x[1].endswith(_B_))]
flask-sqlalchemy delete row _A_	db.session.delete(_A_)
Format a string `u'Andr\xc3\xa9'` that has unicode characters	""""""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')"
convert a unicode _A_ to a string	""""""""""""".join(chr(ord(c)) for c in _A_).decode('utf8')"
list all files in directory _A_	for (dirname, dirnames, filenames) in os_A_walk('_A_'):<nl>    for subdirname in dirnames:<nl>        print(os_A_path_A_join(dirname, subdirname))<nl>    for filename in filenames:<nl>        pass
list all files in directory _A_	os.listdir(_A_)
rename file _A_ to _A_ + _B_	os.rename(_A_, _A_ + _B_)
Insert a character _A_ after every two elements in a string _B_	"""""""_A_"""""".join(a + b for a, b in zip(_B_[::2], _B_[1::2]))"
printing numbers rounding up to third decimal place	print('%.3f' % 3.1415)
add variable _A_ to key _B_ of first element in JSON data _C_	_C_[0][_B_] = _A_
get the path of module _A_	print(_A_.__file__)
get the path of the current python module	print(os.getcwd())
get the path of the python module _A_	path = os.path.abspath(_A_.__file__)
fill list _A_ with 4 0's	self._A_.extend([0] * (4 - len(self._A_)))
drop duplicate indexes in a pandas data frame _A_	_A_[~_A_.index.duplicated()]
unpack elements of list _A_ as arguments into function _B_	_B_(*_A_)
generate list of numbers in specific format using string formatting precision.	[('%.2d' % i) for i in range(16)]
sort dictionary _A_ in descending order based on the sum of each value in it	sorted(iter(_A_.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]
get top _A_ items from a dictionary _B_ with largest sum of values	heapq.nlargest(_A_, iter(_B_.items()), key=lambda tup: sum(tup[1]))
get index of character _A_ in list _B_a', _A_]'	_B_'a'_C__A__D_.index(_A_)
set font size of axis legend of plot _A_ to _B_	_A_.setp(legend.get_title(), fontsize=_B_)
Python: Convert a string to an integer	int('  23  ')
extract the 2nd elements from a list of tuples	[x[1] for x in elements]
get the opposite diagonal of a numpy array _A_	np.diag(np.rot90(_A_))
flatten list of tuples _A_	list(chain.from_iterable(_A_))
substitute two or more whitespace characters with character _A_ in string _B_	re.sub('\\s{2,}', _A_, _B_.strip())
print float _A_ with two decimal points	print(('%.2f' % _A_))
print float _A_ with two decimal points	print(('{0:.2f}'.format(_A_)))
print float _A_ with two decimal points	print(('{0:.2f}'.format(round(_A_, 2))))
print float _A_ with two decimal points	print(('%.2f' % round(_A_, 2)))
limit float 13.9499999 to two decimal points	('%.2f' % 13.9499999)
limit float 3.14159 to two decimal points	('%.2f' % 3.14159)
limit float 13.949999999999999 to two decimal points	float('{0:.2f}'.format(13.95))
limit float 13.949999999999999 to two decimal points	'{0:.2f}'.format(13.95)
load a tsv file _A_ into a pandas data frame	DataFrame.from_csv('_A_', sep='\t')
set UTC offset by 9 hrs ahead for date _A_	dateutil.parser.parse('_A_ +0900')
pass a list of parameters `((1, 2, 3),) to sql queue _A_	cur.mogrify(_A_, ((1, 2, 3),))
sum all elements of two-dimensions list _A_	sum([sum(x) for x in _A_)
Retrieve an arbitrary value from dictionary _A_	next(iter(_A_.values()))
access an arbitrary value from dictionary _A_	next(iter(list(_A_.values())))
group dataframe _A_ by columns _B_ and _C_	_A_.groupby([_B_, _C_]).sum().unstack(level=0)
sort list _A_ of tuples by arbitrary key from list _B_	sorted(_A_, key=lambda x: _B_.index(x[1]))
sort a list of dictionary _A_ according to the key _B_	sorted(_A_, key=lambda x: x_B_)
remove the fragment identifier _A_ from a url `http://www.address.com/something#something`	urlparse.urldefrag('http://www.address.com/something_A_')
download to a directory _A_ from source _B_	urllib.request.urlretrieve(_B_, _A_)
remove all duplicates from a list of sets _A_	list(set(frozenset(item) for item in _A_))
remove duplicates from a list of sets _A_	[set(item) for item in set(frozenset(item) for item in _A_)]
terminate process _A_	_A_.terminate()
delete all values in a list _A_	del _A_[:]
throw an error window in python in windows	ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)
remove empty strings from list _A_	_A_ = list([_f for _f in _A_ if _f])
remove newlines and whitespace from string _A_	re.sub('[\\ \\n]{2,}', '', _A_)
remove the last dot and all text beyond it in string _A_	re.sub('\\.[^.]+$', '', _A_)
remove elements from an array _A_ that are in array _B_	_A_[np.all(np.any(_A_ - _B_[:, (None)], axis=2), axis=0)]
Write column _A_ of DataFrame _B_ to csv file _C_	_B_.to_csv(_C_, cols=[_A_])
call a Python script _A_	exec(compile(open('_A_').read(), '_A_', 'exec'))
call a Python script _A_	subprocess.call('_A_', shell=True)
sort a zipped list _A_ using lambda function	sorted(_A_, key=lambda x: x[1])
How do I sort a zipped list in Python?	zipped.sort(key=lambda t: t[1])
sort a dictionary _A_ by value then by key	sorted(list(_A_.items()), key=lambda x: (x[1], x[0]), reverse=True)
using beautifulsoup to select div blocks within html _A_	_A_.find_all('div', class_='crBlock ')
remove elements from list _A_ the indexes of which are in array _B_	[element for i, element in enumerate(_A_) if i not in _B_]
list duplicated elements in two lists _A_ and _B_	list(set(_A_) & set(_B_))
download _A_ from http and save as _B_	testfile = urllib.request.URLopener()<nl>testfile.retrieve('_A_', '_B_')
download file from http url _A_ and save as _B_	urllib.request.urlretrieve('_A_', '_B_')
download file from http url _A_	file_name = wget.download(_A_)
set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib _A_	_A_.set_yticklabels(['\xe9', '\xe3', '\xe2'])
get a list of all integer points in a _A_ dimensional hypercube with coordinates from _B_ to _C_ for all dimensions	list(itertools.product(list(range(_B_, _C_)), repeat=_A_))
convert unicode string _A_ into string literals	print(_A_.encode('unicode_escape'))
how to format a list of arguments _A_ into a string	'Hello %s' % ', '.join(_A_)
search and split string _A_ by delimiter _B_	re.split(_B_, _A_, 1)
regex search and split string _A_ by delimiter _B_	re.split(_B_, _A_, 1)
convert a list of dictionaries _A_ to pandas data frame	pd.DataFrame(_A_)
split string _A_ into words that do not contain whitespaces	"""""_A_"""".split()"
split string _A_ into words that does not contain whitespaces	"""""_A_"""".split()"
python pandas: apply a function with arguments to a series	my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)
remove all duplicate items from a list _A_	woduplicates = list(set(_A_))
sum of product of combinations in a list _A_	sum([(i * j) for i, j in list(itertools.combinations(_A_, 2))])
regular expression for validating string _A_ containing a sequence of characters ending with _B_ followed by any number of digits.	re.compile('{}_B_\\d*'.format(_A_))
convert all of the items in a list _A_ to float	[float(i) for i in _A_]
multiply all items in a list _A_ together	from functools import reduce<nl>reduce(lambda x, y: x * y, _A_)
write a tuple of tuples _A_ to a csv file using python	writer.writerow(_A_)
Write all tuple of tuples _A_ at once into csv file	writer.writerows(_A_)
python, format string _A_ to have _B_ and _C_ in the first and second positions	"""""_A_"""".format(_B_, _C_)"
Truncate _A_ from each string in a list of string _B_	_B_ = [x.replace('_A_', '') for x in _B_]
split elements of a list _A_ by _B_	[i.partition(_B_)[-1] for i in _A_ if _B_ in i]
search for regex pattern _A_ in string _B_ including new line character '\n'	re.search(_A_, _B_, re.DOTALL)
find button that is in li class _A_ and assign it to variable _A_	_A_ = driver.find_element_by_css_selector('li._A_>a')
get the  size of file _A_	os.stat(_A_).st_size
return a string from a regex match with pattern _A_ in string _B_	imtag = re.match(_A_, _B_).group(0)
Rename a folder _A_ to _B_	os.rename('_A_', '_B_')
find overlapping matches from a string _A_ using regex	re.findall('(?=(\\w\\w))', '_A_')
convert 173 to binary string	bin(173)
convert binary string _A_ to integer	int(_A_, 2)
convert binary string _A_ to integer	int(_A_, 2)
convert binary string _A_ to integer	int(_A_, 2)
convert 21 to binary string	bin(21)
convert binary string _A_ to integer	int(_A_, 2)
delete all digits in string _A_ that are not directly attached to a word character	re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', _A_)
delete digits at the end of string _A_	re.sub('\\b\\d+\\b', '', _A_)
Delete self-contained digits from string _A_	_A_ = re.sub('^\\d+\\_A_|\\_A_\\d+\\_A_|\\_A_\\d+$', ' ', _A_)
truncate string _A_ up to character _B_	_A_.split(_B_, 1)[1]
print a string _A_ by splitting with comma _B_	print(_A_.split('_B_'))
Create list  by splitting string _A_ using _B_ as delimiter	_A_.split('_B_')
remove parentheses only around single words in a string _A_ using regex	re.sub('\\((\\w+)\\)', '\\1', _A_)
webbrowser open url _A_	webbrowser.open_new(_A_)
webbrowser open url _A_	webbrowser.open(_A_)
change the background colour of the button `pushbutton` to red	self.pushButton.setStyleSheet('background-color: red')
apply a list of functions named _A_ over a list of values named _B_	[x(y) for x, y in zip(_A_, _B_)]
modify the width of a text control as _A_ keeping default height in wxpython	wx.TextCtrl(self, -1, size=(_A_, -1))
display a grayscale image from array of pixels _A_	imshow(_A_, cmap='Greys_r')
replace all the nan values with 0 in a pandas dataframe _A_	_A_.fillna(0)
export a table dataframe _A_ in pyspark to csv _B_	_A_.toPandas().to_csv(_B_)
Write DataFrame _A_ to csv file _B_	_A_.write.csv(_B_)
get the sum of each second value from a list of tuple _A_	sum(x[1] for x in _A_)
sum the 3 largest integers in groupby by _A_ and _B_	df.groupby(_A_)[_B_].agg(lambda x: x.nlargest(3).sum())
Parse string _A_ according to format _B_	datetime.strptime(_A_, _B_)
get current script directory	os.path.dirname(os.path.abspath(__file__))
double each character in string _A_	re.sub('(.)', '\\1\\1', _A_, 0, re.S)
concatenate strings in tuple _A_ into a single string	""""""""""""".join(_A_)"
get full path of current directory	os.path.dirname(os.path.abspath(__file__))
variable number of digits _A_ in variable _B_ in format string _C_	"""""_C_"""".format(_B_, _A_)"
get current requested url	self.request.url
get a random item from list _A_	random_choice = random.choice(_A_)
sum the length of all strings in a list _A_	length = sum(len(s) for s in _A_)
sort a list _A_ by first and second attributes	_A_ = sorted(_A_, key=lambda x: (x[1], x[2]))
sort a list of lists _A_ by second and third element in each list.	_A_.sort(key=operator.itemgetter(1, 2))
Mysql commit current transaction	con.commit()
filtering out strings that contain _A_ from a list of strings _B_	[k for k in _B_ if _A_ in k]
find the first letter of each element in string _A_	output = ''.join(item[0].upper() for item in _A_.split())
get name of primary field _A_ of django model _B_	_B_._meta.pk._A_
count the number of words in a string _A_	len(_A_.split())
multiply array _A_ and array _B_respective elements then sum each row of the new array	np.einsum('ji,i->j', _A_, _B_)
check python version	sys.version
check python version	sys.version_info
format number 1000000000.0 using latex notation	print('\\num{{{0:.2g}}}'.format(1000000000.0))
Initialize a list of empty lists _A_ of size 3	_A_ = [[] for i in range(3)]
apply jinja2 filters _A_ and _B_ on variable _C_	{{_C_ | _A_ | _B_}}
zip a list of tuples _A_ into a list of tuples according to original tuple index	zip(*_A_)
split a list of tuples _A_ into sub-lists of the same tuple field using itertools	[list(group) for key, group in itertools.groupby(_A_, operator.itemgetter(1))]
Convert a string into a list	list('hello')
create new column _A_ in dataframe _B_ with row values equal to the value in column _C_ divided by the value in column _D_	_B_['__C__'] = _B_['_C_'] / _B_['_D_']
getting a list of all subdirectories in the directory _A_	os.walk(_A_)
get a list of all subdirectories in the directory _A_	[x[0] for x in os.walk(_A_)]
update all values associated with key _A_ to string _B_ if value _C_ is not equal to _D_ in dictionary _E_	{_A_: _B_ for _A_, _C_ in list(_E_.items()) if _C_ != _D_}
Filter a dictionary _A_ to remove keys with value None and replace other values with _B_	dict((k, _B_) for k, v in _A_.items() if v is None)
Filter a dictionary _A_ to remove keys with value _B_ and replace other values with _C_	dict((k, _C_) for k, v in _A_.items() if v != _B_)
count number of rows in a group _A_ in pandas groupby object _B_	_B_.groupby(_A_).size()
return list _A_ of sum of elements of each list _B_ in list of lists _C_	_A_ = [sum(_B_) for _B_ in _C_]
What's the best way to search for a Python dictionary value in a list of dictionaries?	any(d['site'] == 'Superuser' for d in data)
create a 2D array of _A_ objects with dimensions _B_ columns and _C_ rows	nodes = [[_A_() for j in range(_B_)] for i in range(_C_)]
replace extension _A_ in basename '/home/user/somefile.txt' with extension _B_	print(os.path.splitext('/home/user/somefile_A_')[0] + _B_)
Set the resolution of a monitor as _A_ in pygame	pygame.display.set_mode((0, 0), pygame._A_)
format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot _A_	_A_.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))
Get the age of directory (or file) _A_ in seconds.	print(os.path.getmtime('_A_'))
how to get month name of datetime _A_	_A_.strftime('%B')
get month name from a datetime object _A_	_A_.strftime('%B')
Convert nested list _A_ into a flat list	[j for i in _A_ for j in i]
get each value from a list of lists _A_ using itertools	print(list(itertools.chain.from_iterable(_A_)))
convert date string _A_  into day of week	datetime.datetime.strptime(_A_, '%B %d, %Y').strftime('%A')
Convert Date String to Day of Week	datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')
remove item _A_ in list _B_	_B_.remove('_A_')
remove item _A_ in list _B_	_B_.remove(_A_)
delete the element 6 from list _A_	_A_.remove(6)
delete the element 6 from list _A_	_A_.remove(6)
delete the element _A_ from list _B_	if (_A_ in _B_):<nl>    _B_.remove(_A_)
delete the element _A_ from list _B_	try:<nl>    _B_.remove(_A_)<nl>except ValueError:<nl>    pass
Get all matching patterns _A_ from a string _B_.	re.findall('(?=(_A_))', _B_)
outer product of each column of a 2d _A_ array to form a 3d array _A_	np.einsum('ij,kj->jik', _A_, _A_)
Getting the last element of list _A_	_A_[(-1)]
Getting the second to last element of list _A_	_A_[(-2)]
gets the _A_ th-to-last element in list _B_	_B_[(- _A_)]
get the last element in list _A_	_A_[(-1)]
get the last element in list _A_	_A_[(-1)]
make a list of integers from 0 to _A_ where each second element is a duplicate of the previous element	print([u for v in [[i, i] for i in range(_A_)] for u in v])
create a list of integers with duplicate values _A_	_A_
create a list of integers from 1 to 5 with each value duplicated	[(i // 2) for i in range(10)]
remove first and last lines of string _A_	_A_[s.find('\n') + 1:_A_.rfind('\n')]
create dict of squared int values in range of 100	{(x ** 2) for x in range(100)}
zip lists _A_ in a list	zip(*[_A_])
zip lists in a list [[1, 2], [3, 4], [5, 6]]	zip(*[[1, 2], [3, 4], [5, 6]])
request page _A_ with credentials of username _B_ and password _C_	requests.get(_A_, auth=(_B_, _C_))
get a new string from the 3rd character to the end of the string _A_	_A_[2:]
get a new string including the first two characters of string _A_	_A_[:2]
get a new string including all but the last character of string _A_	_A_[:(-2)]
get a new string including the last two characters of string _A_	_A_[(-2):]
get a new string with the 3rd to the second-to-last characters of string _A_	_A_[2:(-2)]
reverse a string _A_	_A_[::(-1)]
select alternate characters of _A_	'_A_'[::2]
select a substring of _A_ beginning at _B_ of length _C_	_A_ = _A_[_B_:(_B_ + _C_)]
terminate the program	sys.exit()
terminate the program	quit()
Terminating a Python script with error message _A_	sys.exit('_A_')
encode value of key _A_ in dictionary _B_ as _C_, ignoring non-ascii characters	_B_['_A_'].encode('_C_', 'ignore')
get current CPU and RAM usage	psutil.cpu_percent()<nl>psutil.virtual_memory()
get current RAM usage of current program	pid = os.getpid()<nl>py = psutil.Process(pid)<nl>memoryUse = (py.memory_info()[0] / (2.0 ** 30))
print cpu and memory usage	print((psutil.cpu_percent()))<nl>print((psutil.virtual_memory()))
read a ragged csv file _A_ using _B_ parameter in pandas	pd.read_csv('_A_', _B_=list('abcdef'))
get first non-null value per each row from dataframe _A_	_A_.stack().groupby(level=0).first()
print two numbers _A_ and _B_ using string formatting	"""""""{0} {1}"""""".format(_A_, _B_)"
replace placeholders in string _A_ with arguments _B_	"""""""_A_"""""".format_B_"
create list _A_ containing elements of list _B_ whilst converting strings containing digits to integers	_A_= [(int(f) if f.isdigit() else f) for f in _B_]
get a dictionary with keys from one list _A_ and values from other list _B_	dict(zip(_A_, zip(*_B_)))
convert string _A_ from iso-8859-1/latin1 to utf-8	_A_.decode('iso-8859-1').encode('utf8')
Exclude column names when writing dataframe _A_ to a csv file _B_	_A_.to_csv('_B_', header=False)
Escape character _A_ in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function _B_ with arguments _C_	print('{0_A_:<15_A__A_{1_A_:<15_A__A_{2_A_:<8_A__A_'._B__C_)
get dictionary with max value of key _A_ in list of dicts _B_	max(_B_, key=lambda d: d[_A_])
format parameters _A_ and _B_ into plcaeholders in string _C_	"""""_C_"""".format(_A_, _B_)"
django create a foreign key column _A_ and link it to table _B_	_A_ = models.ForeignKey(_B_, unique=True)
write a regex pattern to match even number of letter _A_	re.compile('^([^_A_]*)AA([^_A_]|AA)*$')
join Numpy array _A_ with Numpy array _B_ along axis 0	_A_ = np.concatenate((_B_, _B_), axis=0)
custom sort an alphanumeric list _A_	sorted(_A_, key=lambda x: x.replace('0', 'Z'))
plot logarithmic axes with matplotlib	ax.set_yscale('log')
Access environment variable _A_	os.environ['_A_']
get value of environment variable _A_	os.environ['_A_']
print all environment variables	print(os.environ)
get all environment variables	os.environ
get value of the environment variable _A_	print(os.environ.get(_A_))
get value of the environment variable _A_ with default value _B_	print(os.getenv(_A_, _B_))
get value of the environment variable _A_ with default value _B_	print(os.environ.get(_A_, _B_))
create a dictionary containing each string in list _A_ split by _B_ as a key/value pairs	print(dict([s.split(_B_) for s in _A_]))
find the index of element closest to number 11.5 in list _A_	min(enumerate(_A_), key=lambda x: abs(x[1] - 11.5))
find element _A_ that contains string _B_ in file _C_	e = _C_.xpath('.//_A_[contains(text(),_B_)]')
Find the_A_ tag in html _B_ which starts with the text _C_  and assign it to _D_	"_D_ = _B_.xpath('.//_A_[starts-with(text(),""_C_"")]')"
find the element that holds string _A_ in file _B_	"e = _B_.xpath('.//a[text()=""_A_""]')"
create list _A_ containing items from list _B_ whose index is in list _C_	_A_ = [_B_[i] for i in _C_]
get the dot product of two one dimensional numpy arrays	np.dot(a[:, (None)], b[(None), :])
multiplication of two 1-dimensional arrays  in numpy	np.outer(a, b)
execute a file _A_ with arguments _B_ and _C_ in python shell	subprocess.call([_A_, _B_, _C_])
Replace NaN values in  column _A_ with the mean of data in column _B_ of dataframe _C_	_C_[[_A_]].fillna(_C_.groupby(_B_).transform('mean'))
separate each character in string _A_ by _B_	re.sub('(.)(?=.)', '\\1_B_', _A_)
concatenate _A_ in between characters of string _B_	re.sub('(?<=.)(?=.)', _A_, _B_)
get the indexes of the x and y axes in Numpy array _A_ where variable _B_ is equal to variable _C_	i, j = _A_.where(_B_ == _C_)
print letter that appears most frequently in string _A_	print(collections.Counter(_A_).most_common(1)[0])
find float number proceeding sub-string _A_ in string _B_	float(re.findall('(?:^|_)' + _A_ + '(\\d+\\.\\d*)', _B_)[0])
Get all the matches from a string _A_ if it begins with a character _B_	re.findall('[^_B_]', '_A_')
get a list of variables from module 'adfix.py' in current module.	print([item for item in dir(adfix) if not item.startswith('__')])
get the first element of each tuple in a list _A_	[x[0] for x in _A_]
get a list _A_ of the first elements of each tuple in a list of tuples _B_	_A_ = [x[0] for x in _B_]
duplicate data in pandas dataframe _A_ for 5 times	pd.concat([_A_] * 5, ignore_index=True)
Get a repeated pandas data frame object _A_ by _B_ times	pd.concat([_A_] * _B_)
sort json _A_ by a key _B_	sorted_list_of_keyvalues = sorted(list(_A_.items()), key=item[1][_B_])
read json _A_ to pandas dataframe `df`	pd.read_json(_A_)
generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]	numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])
Return rows of data associated with the maximum value of column _A_ in dataframe _B_	_B_.loc[_B_[_A_].idxmax()]
find recurring patterns in a string _A_	re.findall('^(.+?)((.+)\\3+)$', _A_)[0][:-1]
convert binary string _A_ to numpy array	np.fromstring(_A_, dtype='<f4')
convert binary string to numpy array	np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')
insert variables _A_ into sql statement _B_	cursor.execute(_B_, _A_)
Execute a sql statement using variables _A_, _B_ and _C_	cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (_A_, _B_, _C_))
How to use variables in SQL statement in Python?	cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))
pandas split strings in column _A_ by _B_ into columns in dataframe _C_	_C_[_A_].str[1:-1].str.split(_B_, expand=True).astype(float)
split string in column _A_ by _B_ into separate columns in dataframe _C_	_C_[_A_].str[1:-1].str.split(_B_).apply(pd.Series).astype(float)
Unpack column _A_ in dataframe _B_ into a series of columns	_B_[_A_].apply(pd.Series)
wait for shell command _A_ evoked by  subprocess.Popen to complete	_A_.wait()
encode string _A_ to utf-8 code	_A_.encode('utf8')
parse string _A_ into a datetime object using format _B_	datetime.datetime.strptime(_A_, _B_)
copy a file from _A_ to _B_	copyfile(_A_, _B_)
copy file _A_ to _B_	shutil.copy2('_A_', '_B_')
copy file _A_ to _B_	shutil.copy2(_A_, _B_)
print a list of integers _A_ using string formatting	print(', '.join(str(x) for x in _A_))
multiply column _A_ and column _B_ by column _C_ in datafram _D_	_D_[[_A_, _B_]].multiply(_D_[_C_], axis='index')
convert string _A_ to hex	hex(ord(_A_))
Get the sum of values to the power of their indices in a list _A_	sum(j ** i for i, j in enumerate(_A_, 1))
remove extra white spaces & tabs from a string _A_	""""""" """""".join(_A_.split())"
replace comma in string _A_ with empty string _B_	_A_ = _A_.replace(',', _B_)
Resample dataframe _A_ to resolution of 1 hour _B_ for timeseries index, summing values in the column _C_ averaging those in column _D_	_A_.resample('_B_').agg({'_C_': np.sum, '_D_': np.mean})
How do I get rid of Python Tkinter root window?	root.destroy()
create a pandas dataframe _A_ from elements of a dictionary _B_	_A_ = pd.DataFrame.from_dict({k: v for k, v in list(_B_.items()) if k != 'y3'})
Flask get value of request variable _A_	first_name = request.args.get(_A_)
Flask get posted form data _A_	first_name = request.form.get(_A_)
get a list of substrings consisting of the first 5 characters of every string in list _A_	[s[:5] for s in _A_]
sort list _A_ by the length of string followed by alphabetical order	_A_.sort(key=lambda item: (-len(item), item))
Set index equal to field _A_ in dataframe _B_	_B_ = _B_.set_index([_A_])
List comprehension with an accumulator in range of 10	list(accumulate(list(range(10))))
How to convert a date string _A_ in format _B_ to different format _C_	datetime.datetime.strptime(_A_, _B_).strftime(_C_)
convert a date string _A_ in format _B_ to different format _C_	datetime.datetime.strptime(_A_, _B_).strftime(_C_)
get a dataframe _A_ that contains all the columns of dataframe _B_ that do not end in _C_	_A_ = _B_.ix[:, (~_B_.columns.str.endswith('_C_'))]
create list _A_ containing the last 10 elements of list _B_	_A_ = _B_[-10:]
get the last 10 elements from a list _A_	_A_[-10:]
convert matlab engine array _A_ to a numpy ndarray	np.array(_A_._data).reshape(_A_.size[::-1]).T
select the first row grouped per level 0 of dataframe _A_	_A_.groupby(level=0, as_index=False).nth(0)
concatenate sequence of numpy arrays  _A_ into a one dimensional array along the first axis	numpy.concatenate(_A_, axis=0)
convert and escape string _A_ to UTF-8 code	"""""_A_"""".encode('utf-8').decode('unicode_escape')"
encode string _A_ to bytes	"""""_A_"""".encode('utf-8')"
interleave the elements of two lists _A_ and _B_	[j for i in zip(_A_, _B_) for j in i]
merge two lists _A_ and _B_ into a single list	[j for i in zip(_A_, _B_) for j in i]
delete all occureces of _A_ in each string _B_ in list _C_	print([_B_.replace('_A_', '') for _B_ in _C_])
Split string _A_ into a string of letters seperated by _B_	"""""""_B_"""""".join('_A_')"
in Django, select 100 random records from the database _A_	_A_.all().order_by('?')[:100]
create a NumPy array containing elements of array _A_ as pointed to by index in array _B_	_A_[np.arange(_A_.shape[0])[:, (None)], _B_]
pivot dataframe _A_ so that values for _B_ become column headings and values for _C_ become the index	_A_.pivot_table(index='_C_', columns='_B_', aggfunc='size', fill_value=0)
match zero-or-more instances of lower case alphabet characters in a string `f233op `	re.findall('([a-z]*)', 'f233op')
match zero-or-more instances of lower case alphabet characters in a string `f233op `	re.findall('([a-z])*', 'f233op')
split string _A_ using string _B_	re.split(_B_, _A_)
Split string _A_ based on string _B_, _C_ or _D_	re.split('_(?:_D_|_C_|_B_)_', _A_)
Split a string _A_ by multiple words _B_ or _C_ or _D_	[re.split('_(?:f?_C_|_D_)_', s) _B_ s in _A_]
zip keys with individual values in lists _A_ and _B_	[dict(zip(_A_, x)) for x in _B_]
Sort a list _A_ in descending order.	sorted(_A_, reverse=True)
sort array _A_ based on column _B_, _C_ and _D_	_A_.sort(order=[_B_, _C_, _D_])
Sort a structured numpy array _A_ on multiple columns _B_, _C_ and _D_.	_A_.sort([_B_, _C_, _D_])
check if elements in list _A_ are coherent in order	return _A_ == list(range(_A_[0], _A_[-1] + 1))
group rows of pandas dataframe _A_ with same _B_	_A_.groupby(_B_).agg(lambda x: x.tolist())
encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8	'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')
parse string _A_ to float	float(_A_)
Parse String _A_ to Float or Int	try:<nl>    return int(_A_)<nl>except ValueError:<nl>    return float(_A_)
check if object _A_ has property _B_	if hasattr(_A_, _B_):<nl>    pass
check if object _A_ has property _B_	if hasattr(_A_, _B_):<nl>    pass
get the value of attribute _A_ of object _B_ with default value _C_	getattr(_B_, _A_, _C_)
delete every 8th column in a numpy array _A_.	np.delete(_A_, list(range(0, _A_.shape[1], 8)), axis=1)
convert _A_ milliseconds to a datetime object	datetime.datetime.fromtimestamp(_A_ / 1000.0)
find the magnitude (length) squared of a vector _A_ field	np.einsum('...j,...j->...', _A_, _A_)
request http url _A_	r = requests.get(_A_)
request http url _A_ with parameters _B_	r = requests.get(_A_, params=_B_)
post request url _A_ with parameters _B_	r = requests.post(_A_, data=_B_)
make an HTTP post request with data _A_	post_response = requests.post(url='http://httpbin.org/post', json=_A_)
django jinja slice list _A_ by _B_	{{(_A_ | slice): _B_}}
create dataframe _A_ with content of hdf store file _B_ with key of _C_	df1 = pd.read_hdf(_B_, _C_)
get the largest index of the last occurrence of characters _A_ in string _B_	max(_B_.rfind(i) for i in _A_)
print _A_ plus unicode character u_B_	print(_A_ + _B_)
print unicode characters in a string _A_	print('_A_')
pads string _A_ on the left with 1 zero	print('{0}'.format(_A_.zfill(2)))
Remove duplicates elements from list _A_ and sort it in ascending order	sorted(set(itertools.chain.from_iterable(_A_)))
pandas dataframe _A_ column _B_ to list	_A_[_B_].values.tolist()
Get a list of all values in column _A_ in pandas data frame _B_	_B_['_A_'].tolist()
escaping quotes in string	"replace('""', '\\""')"
check if all string elements in list _A_ are upper-cased	print(all(word[0].isupper() for word in _A_))
remove items from dictionary _A_ if the item's value _B_ is equal to 42	_A_ = {key: _B_ for key, _B_ in list(_A_.items()) if _B_ != 42}
Remove all items from a dictionary _A_ whose values are _B_	{key: val for key, val in list(_A_.items()) if val != _B_}
Determine the byte length of a utf-8 encoded string _A_	return len(_A_.encode('utf-8'))
kill a process with id _A_	os.kill(_A_, signal.SIGKILL)
get data of columns with Null values in dataframe _A_	_A_[pd.isnull(_A_).any(axis=1)]
strip everything up to and including the character _A_ from url _B_, strip the character _C_ from the remaining string and concatenate _D_ to the end	_B_.split('_A_')[-1].replace('_C_', '') + '_D_'
Parse a file _A_ using expat parsing in python 3	parser.ParseFile(open('_A_', 'rb'))
Exit script	sys.exit()
assign value in _A_ dynamically to class property _B_	setattr(self, _B_, _A_)
decode url-encoded string _A_ to its character equivalents	urllib.parse.unquote(urllib.parse.unquote(_A_))
"decode a double URL encoded string 
_A_ to
'FireShot3+(2).png'"	urllib.parse.unquote(urllib.parse.unquote(_A_))
change flask security register url to _A_	app.config['SECURITY_REGISTER_URL'] = '_A_'
open a file _A_ in binary write mode	output = open('_A_', 'wb')
remove the last element in list _A_	del _A_[(-1)]
remove the element in list _A_ with index 1	_A_.pop(1)
remove the last element in list _A_	_A_.pop()
remove the element in list _A_ at index _B_	_A_.pop(_B_)
remove the element in list _A_ at index _B_	del _A_[_B_]
print a celsius symbol on x axis of a plot _A_	_A_.set_xlabel('Temperature (\u2103)')
Print a celsius symbol with matplotlib	ax.set_xlabel('Temperature ($^\\circ$C)')
convert a list of lists _A_ into a list of strings keeping empty sub-lists as empty string _B_	[_B_.join(l) for l in _A_]
get a list of all the duplicate items in dataframe _A_ using pandas	pd.concat(g for _, g in _A_.groupby('ID') if len(g) > 1)
Delete third row in a numpy array _A_	_A_ = numpy.delete(_A_, 2, axis=1)
delete first row of array _A_	_A_ = numpy.delete(_A_, 0, axis=0)
merge rows from dataframe _A_ with rows from dataframe _B_ and calculate the mean for rows that have the same value of axis 1	pd.concat((_A_, _B_), axis=1).mean(axis=1)
Get the average values from two numpy arrays _A_ and _B_	np.mean(np.array([_A_, _B_]), axis=0)
Matplotlib change marker size to 500	scatter(x, y, s=500, color='green', marker='h')
Create new list _A_ by splitting each item in list _B_	_A_ = [item for word in _B_ for item in word.split(',')]
convert JSON string _A_ into a DateTime object using format _B_	datetime.datetime.strptime(_A_, _B_)
count `True` values associated with key _A_ in dictionary _B_	sum(item[_A_] for item in list(_B_.values()))
encode a pdf file _A_ with _B_ encoding	a = open('_A_', 'rb').read().encode('_B_')
split string _A_ using new-line character _B_ as separator	_A_.rstrip().split(_B_)
split a string _A_ with new line character	_A_.split('\n')[:-1]
return http status code 204 from a django view	return HttpResponse(status=204)
check if 7 is in _A_	(7 in _A_)
check if _A_ is in list _B_	(_A_ in _B_)
sort list _A_ by keys value _B_	sorted(_A_, key=itemgetter(_B_))
get current url in selenium webdriver _A_	print(_A_.current_url)
split string _A_ with delimiter _B_ or delimiter _C_	re.split('_B_|_C_'_C__A_)
un-escaping characters in a string with python	"""""""\\u003Cp\\u003E"""""".decode('unicode-escape')"
convert date string _A_ in format pattern _B_ into a timestamp	time.mktime(datetime.datetime.strptime(_A_, _B_).timetuple())
convert string _A_ to an integer timestamp	int(datetime.datetime.strptime(_A_, '%d/%m/%Y').strftime('%s'))
get http header of the key _A_ in flask	request.headers[_A_]
select records of dataframe _A_ where the sum of column _B_ for each value in column _C_ is 0	_A_.groupby(_C_)[_B_].filter(lambda x: x.sum() == 0)
Get data of dataframe _A_ where the sum of column _B_ grouped by column _C_ is equal to 0	_A_.loc[_A_.groupby(_C_)[_B_].transform(sum) == 0]
Get data from dataframe _A_ where column _B_ is equal to 0	_A_.groupby('User')[_B_].transform(sum) == 0
How do I find an element that contains specific text in Selenium Webdriver (Python)?	"driver.find_elements_by_xpath(""//*[contains(text(), 'My Button')]"")"
convert pandas group by object to multi-indexed dataframe with indices _A_ and _B_	df.set_index([_A_, _B_])
coalesce non-word-characters in string _A_	print(re.sub('(\\W)\\1+', '\\1', _A_))
open a file _A_ under Unix	os.system('start _A_')
Convert a Unicode string _A_ to a _B_ string	unicodedata.normalize('NFKD', _A_).encode(_B_, 'ignore')
Convert a Unicode string _A_ to a _B_ string	_A_.encode(_B_, 'ignore')
create a list _A_ containing all files in directory _B_ that starts with numbers between 0 and 9 and ends with the extension _C_	_A_ = [f for f in os.listdir(_B_) if re.match('[0-9]+.*\\_C_', f)]
adding a 1-d array _A_ to a 3-d array _B_	_B_ + np.array(_A_)[(None), :, (None)]
add array of shape _A_ to array _B_	np.zeros(_A_) + np.array(_B_).reshape((1, 9, 1))
How can I launch an instance of an application using Python?	os.system('start excel.exe <path/to/file>')
get the list with the highest sum value in list _A_	print(max(_A_, key=sum))
sum the length of lists in list _A_ that are more than 1 item in length	sum(len(y) for y in _A_ if len(y) > 1)
Enclose numbers in quotes in a string _A_	"re.sub('(\\d+)', '""\\1""', '_A_')"
multiply the columns of sparse matrix _A_ by array _B_ then multiply the rows of the resulting matrix by array _B_	numpy.dot(numpy.dot(_B_, _A_), _B_)
Django check if an object with criteria _A_ equal to 'name' and criteria _B_ equal to 'title' exists in model _C_	_C_.objects.filter(_A_='_A_', _B_='_B_').exists()
sort a nested list by the inverse of element 2, then by element 1	sorted(l, key=lambda x: (-int(x[1]), x[0]))
get domain/host name from request object in Django	request.META['HTTP_HOST']
get a string _A_ between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex	"re.findall(""api\\('(.*?)'"", ""api('_A_', 'key', 'text')"")"
invoke perl script _A_ using perl interpeter _B_ and send argument _C_ to it	subprocess.call([_B_, _A_, _C_])
print list of items _A_	print('\n'.join(str(p) for p in _A_))
update the dictionary _A_ with dynamic keys _B_ and values with key _C_ from dictionary _D_	_A_.update({_B_: _D_[_C_]})
split a _A_ encoded string _B_ into a list of characters	list(_B_.decode('_A_'))
convert utf-8 with bom string _A_ to utf-8 with no bom _B_	_B_ = _A_.decode('utf-8-sig')
Filter model _A_ where _B_ is not equal to 3 in Django	_A_.objects.filter(~Q(_B_=3))
lookup an attribute in any scope by name _A_	getattr(__builtins__, _A_)
restart a computer after _A_ seconds using subprocess	subprocess.call(['shutdown', '/r', '/t', '_A_'])
shutdown a computer using subprocess	subprocess.call(['shutdown', '/s'])
abort a computer shutdown using subprocess	subprocess.call(['shutdown', '/a '])
logoff computer having windows operating system using python	subprocess.call(['shutdown', '/l '])
shutdown and restart a computer running windows from script	subprocess.call(['shutdown', '/r'])
erase the contents of a file _A_	open('_A_', 'w').close()
How to erase the file contents of text file in Python?	open('file.txt', 'w').close()
convert dataframe _A_ to list of dictionaries including the index values	_A_.to_dict('index')
Create list of dictionaries from pandas dataframe _A_	_A_.to_dict('records')
Group a pandas data frame by monthly frequenct _A_ using groupby	df.groupby(pd.TimeGrouper(freq='_A_'))
divide the members of a list _A_ by the corresponding members of another list _B_	[(c / t) for c, t in zip(_A_, _B_)]
sort dict _A_ by value	sorted(_A_, key=_A_.get)
Sort a dictionary _A_ by its values	sorted(_A_.values())
Get a list of pairs of key-value sorted by values in dictionary _A_	sorted(list(_A_.items()), key=lambda x: x[1])
sort dict by value python	sorted(list(data.items()), key=lambda x: x[1])
display current time	now = datetime.datetime.now().strftime('%H:%M:%S')
find the index of the second occurrence of the substring _A_ in string `foo bar bar bar`	"""""""foo _A_ bar _A_"""""".replace('_A_', 'XXX', 1).find('_A_')"
check if key _A_ and key _B_ are presented in dictionary _C_	set([_A_, _B_]).issubset(_C_)
replace string _A_ in string _B_ with character _C_	_B_.replace(_A_, _C_)
Save array at index 0, index 1 and index 8 of array _A_ to tmp file _B_	_A_.savez(_B_, *[getarray[0], getarray[1], getarray[8]])
substract 1 hour and 10 minutes from current time	t = datetime.datetime.now()<nl>(t - datetime.timedelta(hours=1, minutes=10))
subtract 1 hour and 10 minutes from time object _A_	(_A_ - datetime.timedelta(hours=1, minutes=10))
add 1 hour and 2 minutes to time object _A_	dt = datetime.datetime.combine(datetime.date.today(), _A_)
subtract 5 hours from the time object _A_	_A_ -= datetime.timedelta(hours=5)
encode string _A_ using hex _B_ encoding	print(_A_.encode(_B_))
Return the decimal value for each hex character in data _A_	print(' '.join([str(ord(a)) for a in _A_]))
Get all the items from a list of tuple _A_ where second item in tuple is _B_.	[x for x in _A_ if x[_B_] == _B_]
Create array _A_ containing integers from stdin	_A_.fromlist([int(val) for val in stdin.read().split()])
place '\' infront of each non-letter char in string _A_	print(re.sub('[_%^$]', '\\\\\\g<0>', _A_))
Get all _A_ tags where the text starts with value _B_ using regex	"doc.xpath(""//_A_[starts-with(text(),'_B_')]"")"
convert a list of lists _A_ into list of tuples of appropriate elements form nested lists	zip(*_A_)
convert a list of strings _A_ to list of integers	[map(int, sublist) for sublist in _A_]
convert strings in list-of-lists _A_ to ints	[[int(x) for x in sublist] for sublist in _A_]
get index of elements in array _A_ that occur in another array _B_	np.where(np.in1d(_A_, _B_))[0]
create a list where each element is a dictionary with keys _A_ and _B_ and values corresponding to each value in the lists referenced by keys _A_ and _B_ in dictionary _C_	[{_A_: a, _B_: b} for a, b in zip(_C_[_A_], _C_[_B_])]
Split dictionary of lists into list of dictionaries	map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))
Get Last Day of the first month in 2002	calendar.monthrange(2002, 1)
Get Last Day of the second month in 2002	calendar.monthrange(2008, 2)
Get Last Day of the second month in 2100	calendar.monthrange(2100, 2)
Get Last Day of the month _A_ in year _B_	calendar.monthrange(_B_, _A_)[1]
Get Last Day of the second month in year 2012	monthrange(2012, 2)
Get Last Day of the first month in year 2000	(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))
"Calling an external command ""ls -l"""	from subprocess import call
Calling an external command _A_	os.system('_A_')
Calling an external command _A_	os.system('_A_')
Calling an external command _A_	stream = os.popen('_A_')
Calling an external command _A_	print(subprocess.Popen('_A_', shell=True, stdout=subprocess.PIPE).stdout.read())
Calling an external command _A_	print(os.popen('_A_').read())
Calling an external command _A_	return_code = subprocess.call('_A_', shell=True)
Calling an external command _A_	p = subprocess.Popen('_A_', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)<nl>for line in p.stdout.readlines():<nl>    print(line, end=' ')<nl>retval = p.wait()
"Calling an external command ""ls -l"""	call(['ls', '-l'])
decode url _A_ with utf8 and print it	print(urllib.parse.unquote(_A_).decode('utf8'))
decode a urllib escaped url string _A_ with _B_	_A_ = urllib.parse.unquote(_A_).decode('_B_')
delete letters from string _A_	""""""""""""".join(filter(str.isdigit, _A_))"
Update row values for a column _A_ using vectorized string operation in pandas	df['_A_'].str.split('-').str[0].astype(int)
sort a list of tuples _A_ by second parameter in the tuple	_A_.sort(key=lambda x: x[1])
find indexes of all occurrences of a substring _A_ in a string _B_	[m.start() for m in re.finditer('(?=_A_)', '_B_')]
find all occurrences of a substring in a string	[m.start() for m in re.finditer('test', 'test test test test')]
split string _A_ based on white spaces	re.findall('\\_A_+|\\S+', _A_)
set columns _A_ as indexes in dataframe _B_	_B_.set_index(_A_)
recursively go through all subdirectories and files in _A_	for (root, subFolders, files) in os.walk(_A_):<nl>    pass
sort a list of dictionary values by _A_ in reverse order	list.sort(key=lambda item: item[_A_], reverse=True)
display first 5 characters of string _A_	"""""""{:.5}"""""".format(_A_)"
unpack hexadecimal string _A_ to a list of integer values	struct.unpack('11B', _A_)
finding the index of an item _A_ given a list `[_A_, 'bar', 'baz']` containing it	[i for i, j in enumerate([_A_, 'bar', 'baz']) if j == _A_]
generate all permutations of list _A_ and list _B_	print(list(itertools.product(_A_, _B_)))
generate all permutations of a list _A_	itertools.permutations(_A_)
substitute occurrences of unicode regex pattern u_A_ with empty string _B_ in string _C_	return re.sub(_A_, _B_, _C_)
manually throw/raise a _A_ exception with the message _B_	raise _A_(_B_)
throw an exception _A_	raise Exception('_A_')
Manually throw an exception _A_	raise Exception('_A_')
throw a ValueError with message _A_	raise ValueError(_A_)
throw an Exception with message _A_	raise Exception(_A_)
throw a value error with message _A_, 'foo', 'bar', 'baz'	raise ValueError(_A_)
throw a runtime error with message _A_	raise RuntimeError(_A_)
throw an assertion error with message _A_, distance	raise AssertionError(_A_, distance)
if Selenium textarea element _A_ is not empty, clear the field	driver.find_element_by_id('_A_').clear()
clear text from textarea _A_ with selenium	driver.find_element_by_id(_A_).clear()
convert a number 2130706433 to ip string	socket.inet_ntoa(struct.pack('!L', 2130706433))
Rearrange the columns _A_,_B_,_C_,_D_ of pandas DataFrame _E_ in mentioned sequence _C_ ,_D_,_A_ ,_B_	_E_ = _E_[[_C_, _D_, _A_, _B_]]
call base class's __init__ method from the child class _A_	super(_A_, self).__init__(*args, **kwargs)
sum of all values in a python dict _A_	sum(_A_.values())
Sum of all values in a Python dict	sum(d.values())
convert python dictionary _A_ to json array	json.dumps(_A_, ensure_ascii=False)
assign an array of floats in range from 0 to 100 to a variable _A_	_A_ = np.array([i for i in range(100)], dtype=np.float64)
sort a list of dictionaries _A_ by values in an order _B_	sorted(_A_, key=lambda x: _B_.index(list(x.values())[0]))
change the case of the first letter in string _A_	return _A_[0].upper() + _A_[1:]
join list of numbers `[1,2,3,4] ` to string of numbers.	""""""""""""".join([1, 2, 3, 4])"
delete every non _A_ characters from a string _B_	_B_ = _B_.decode('_A_', 'ignore').encode('_A_')
execute a command `command ` in the terminal from a python script	os.system(command)
MySQL execute query _A_ with parameters _B_ and _C_	c.execute(_A_, (_B_, _C_))
Parse string _A_ into a datetime object using format pattern _B_	dateobj = datetime.datetime.strptime(_A_, _B_).date()

Concatenate elements of a list A of multiple integers to a single integer	sum(d * 10 ** i for i, d in enumerate(A[::-1]))
convert a list of integers into a single integer	r = int(''.join(map(str, x)))
convert a DateTime string back to a DateTime object of format A	datetime.strptime('2010-11-13 10:33:54.227806', A)
get the average of a list values for each key in dictionary A)	[(i, sum(j) / len(j)) for i, j in list(A.items())]
zip two lists A and B into a list of two tuples containing elements at the same index in each list	zip(A, B)
prepend string A to all items in list B	['A{0}'.format(i) for i in B]
regex for repeating words in a string A	re.sub('(?<!\\S)((\\S+)(?:\\A+\\2))(?:\\A+\\2)+(?!\\S)', '\\1', A)
normalize a pandas dataframe A by row	A.div(A.sum(axis=1), axis=0)
swap values in a tuple/list inside a list A	map(lambda t: (t[1], t[0]), A)
Swap values in a tuple/list in list A	[(t[1], t[0]) for t in A]
Find next sibling element in Python Selenium?	"driver.find_element_by_xpath(""//p[@id, 'one']/following-sibling::p"")"
find all occurrences of the pattern A within B	re.findall(A, B)
generate the combinations of 3 from a set A	print(list(itertools.combinations(A, 3)))
add multiple columns A, B, C to pandas data frame D from lambda function E	D[['A', 'B', 'C']] = D.apply(E, axis=1)
BeautifulSoup search string A inside tag B	soup.find_all(B, string=A)
Convert a datetime object A into readable format B	A.strftime('B')
parse string A to int when string contains a number	int(''.join(c for c in A if c.isdigit()))
add dictionary A to key B of dictionary C	C[B].update(A)
transforming the string A into dictionary	dict(map(int, x.split(':')) for x in A.split(','))
How to select element with Selenium Python xpath	"driver.find_element_by_xpath(""//div[@id='a']//a[@class='click']"")"
find rows matching `(0,1)` in a 2 dimensional numpy array A	np.where((A == (0, 1)).all(axis=1))
How to delete a record in Django models?	SomeModel.objects.filter(id=id).delete()
build a dictionary containing the conversion of each list in list A to a key/value pair as its items	dict(A)
convert list A to dictionary having each two adjacent elements as key/value pair	dict(zip(A[::2], A[1::2]))
assign float 9.8 to variable A	A = 9.8
"separate numbers from characters in string ""30m1000n20m"""	re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')
separate numbers and characters in string A	re.findall('([0-9]+|[A-Z])', A)
separate numbers and characters in string A	re.findall('([0-9]+)([A-Z])', A)
Get a list of  words from a string A removing punctuation	re.compile('\\w+').findall('A')
Convert string A into datetime.time object	datetime.datetime.strptime(A, '%H:%M').time()
request url A without verifying SSL certificates	requests.get(A, verify=False)
Extract values not equal to 0 from numpy array A	A[a != 0]
map two lists A and B into a dictionary	new_dict = {k: v for k, v in zip(A, B)}
map two lists A and B into a dictionary	dict((k, v) for k, v in zip(A, B))
map two lists A and B into a dictionary	dict([(k, v) for k, v in zip(A, B)])
find the string matches within parenthesis from a string A using regex	m = re.search('\\[(\\w+)\\]', A)
Enable the SO_REUSEADDR socket option in socket object A to fix the error `only one usage of each socket address is normally permitted`	A.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
append the sum of each tuple pair in the grouped list A and list B elements to list C	C = [(a + b) for a, b in zip(A, B)]
converting hex string A to its integer representations	[ord(c) for c in A.decode('hex')]
sort list A by second element of each tuple in ascending and third element of each tuple in descending	print(sorted(A, key=lambda t: (-t[2], t[0])))
get list of duplicated elements in range of 3	[y for x in range(3) for y in [x, x]]
read the contents of the file A into B	B = open(A).read()
divide each element in list A by integer B	A[:] = [(x / B) for x in A]
python: dots in the name of variable in a format string	"""""""Name: {0[person.name]}"""""".format({'person.name': 'Joe'})"
replace white spaces in dataframe A with B	A.replace(' ', B, regex=True)
convert date A to datetime	datetime.datetime.combine(A, datetime.time.min)
convert tuple A to string B	B = str(A)
get modified time of file A	time.ctime(os.path.getmtime(A))
get creation time of file A	time.ctime(os.path.getctime(A))
get modification time of file A	t = os.path.getmtime(A)
get modification time of file A	os.A.getmtime(A)
get modified time of file A	print(('last modified: %s' % time.ctime(os.path.getmtime(A))))
get the creation time of file A	print(('created: %s' % time.ctime(os.path.getctime(A))))
get the creation time of file A	return os.path.getctime(A)
execute os command ATASKKILL /F /IM firefox.exeA	BAB BABoBABsBAB.BABsBAByBABsBABtBABeBABmBAB(BAB'BABTBABABABSBABKBABKBABIBABLBABLBAB BAB/BABFBAB BAB/BABIBABMBAB BABfBABiBABrBABeBABfBABoBABxBAB.BABeBABxBABeBAB'BAB)BAB BAB
split string A on whitespaces using a generator	"return (x.group(0) for x in re.finditer(""[A-Za-z']+"", A))"
Unpack each value in list A to its placeholder B in string '%.2f'	""""""", """""".join(['B.2f'] * len(A))"
match regex pattern A with string B	print(re.match(A, B).group(1))
replace parentheses and all data within it with empty string A in column B of dataframe C	C[B].str.replace('\\(.*\\)', A)
create a list A containing elements form list B if first element of list B is in list C	A = [x for x in B if x[0] in C]
generate all possible string permutations of each two elements in list A	print([''.join(a) for a in combinations(A, 2)])
get a list of items form nested list A where third element of each item contains string B	[x for x in A if B in x[2]]
Sort lists in the list A by the element at index 3 of each list	A.sort(key=lambda x: x[3])
Log message A on the root logger.	logging.info(A)
Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib	fig.add_subplot(1, 1, 1)
Sort dictionary A by value in ascending order	sorted(list(A.items()), key=operator.itemgetter(1))
Sort dictionary A by value in ascending order	sorted(A, key=A.get)
Sort dictionary A by value in descending order	sorted(A, key=A.get, reverse=True)
Sort dictionary A by value in ascending order	sorted(list(A.items()), key=(lambda x: x[1]))
elementwise product of 3d arrays A and B	np.einsum('ijk,ikl->ijl', A, B)
Print a string A with string formatting	print('I have: {0.price}'.format(A))
Write a comment A to a file object B	B.write('A')
move the last item in list A to the beginning	A = A[-1:] + A[:-1]
Parse DateTime object A using format B	A.strftime(B)
Normalize line ends in a string A	A.replace('\r\n', '\n').replace('\r', '\n')
find the real user home directory using python	os.path.expanduser('~user')
index a list A with another list B	T = [A[i] for i in B]
get a list of words A of a file B	A = open(B).read().split()
Get a list of lists with summing the values of the second element from each list of lists A	[[sum([x[1] for x in i])] for i in A]
summing the second item in a list of lists of lists	[sum([x[1] for x in i]) for i in data]
sort objects in `Articles` in descending order of counts of A	Article.objects.annotate(like_count=Count('A')).order_by('-like_count')
return a DateTime object with the current UTC date	today = datetime.datetime.utcnow().date()
create a list containing the multiplication of each elements at the same index of list A and list B	[(a * b) for a, b in zip(A, B)]
fetch smilies matching regex pattern A in string B	re.findall(A, B)
match the pattern A to the string B	re.match(A, B)
convert a list of objects A to json string B	B = json.dumps([ob.__dict__ for ob in A])
create a list A of B zeros	A = [0] * B
decode the string A  to UTF-8	A.decode('utf-8', 'ignore')
Match regex pattern A on string B	re.findall(A, B)
Create a key A if it does not exist in dict B and append element C to value.	B.setdefault(A, []).append(C)
Get the value of the minimum element in the second column of array A	A[np.argmin(A[:, (1)])]
extend dictionary A with key/value pairs of dictionary B	A.update(B)
removing key values pairs with key A from a list of dictionaries B	[{k: v for k, v in d.items() if k != A} for d in B]
Removing key values pairs from a list of dictionaries	[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]
create 3 by 3 matrix of random numbers	numpy.random.random((3, 3))
make new column A in panda dataframe by adding values from other columns B and C	df[A] = df[B] + df[C]
create a list of values from the dictionary A that have a key with a case insensitive match to B	[value for key, value in list(A.items()) if B in key.lower()]
append a path A in system path	sys.path.append('A')
get all digits in a string A after a B character	re.findall('\\d+(?=B^B]+$)', A)
python pickle/unpickle a list to/from a file A	pickle.load(open(A, 'rb'))
Clicking a link using selenium using python	driver.find_element_by_xpath('xpath').click()
count unique index values in column A in pandas dataframe B	B.groupby(level=A).agg(lambda x: x.index.get_level_values(1).nunique())
Create a pandas dataframe of values from a dictionary A which contains dictionaries of dictionaries	pd.concat(map(pd.DataFrame, iter(A.values())), keys=list(A.keys())).stack().unstack(0)
find out the number of non-matched elements at the same index of list A and list B	sum(1 for i, j in zip(A, B) if i != j)
make all keys lowercase in dictionary A	A = {(a.lower(), b): v for (a, b), v in list(A.items())}
sort list A based on first element of each tuple and by the length of the second element of each tuple	A.sort(key=lambda x: [x[0], len(x[1]), x[1]])
trim whitespace in string A	A.strip()
trim whitespace (including tabs) in A on the left side	A = A.lstrip()
trim whitespace (including tabs) in A on the right side	A = A.rstrip()
trim characters A in B	B = B.strip(A)
trim whitespaces (including tabs) in string A	print(re.sub('[\\A+]', '', A))
In Django, filter A based on all entities in [B, C, D]	A.exclude(prerequisites__status__in=[B, C, D])
Change background color in Tkinter	root.configure(background='black')
convert dict A to numpy structured array	numpy.array([(key, val) for key, val in A.items()], dtype)
Concatenate dataframe A to dataframe B sorted by values of the column C	pd.concat([A, B.sort_values(C)])
replace the last occurence of an expression A with B in a string C	re.sub('(.*)A', '\\1B', C)
get the maximum of A and B values in a dictionary	print(max(d, key=lambda x: (d[x][A], d[x][B])))
Filter Django objects by A with ids B and C	Book.objects.filter(A__id=B).filter(A__id=C)
split string A based on case-insensitive matching using string B	re.compile(B, re.IGNORECASE).split(A)
get list of sums of neighboring integers in string A	[sum(map(int, s)) for s in A.split()]
Get all the keys from dictionary A whose value is B	[i for i in A if A[i] == B]
converting byte string A in unicode string	A.decode('unicode_escape')
unpivot first 2 columns into new columns A and B from a pandas dataframe C	pd.melt(C, id_vars=['farm', 'fruit'], var_name=A, value_name=B)
add key A and value B to dictionary `default_data `	default_data['A'] = B
add key A and value B to dictionary `default_data `	default_data.update({'A': B, })
add key value pairs A , 4 and B , 5 to dictionary C	C.update({A: 4, B: 5, })
Get the first and last 3 elements of list A	A[:3] + A[-3:]
reset index to default in dataframe A	A = A.reset_index(drop=True)
For each index A from 0 to 3, append the element at index A of list B to the list at index A of list a.	[a[A].append(B[A]) for A in range(3)]
get canonical path of the filename A	os.A.realpath(A)
check if dictionary A is in dictionary B	set(A).issubset(set(B))
find all the indexes in a Numpy 2D array where the value is 1	zip(*np.where(a == 1))
How to find the index of a value in 2d array in Python?	np.where(a == 1)
Collapse hierarchical column index to level 0 in dataframe A	A.columns = A.columns.get_level_values(0)
create a matrix from a list A	x = scipy.matrix(A).transpose()
add character A after word B in string C	C = re.sub('(\\bget\\b)', '\\1A', C)
get a numpy array that contains the element wise minimum of three 3x1 arrays	np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)
add a column A to dataframe B for index in range	B[A] = list(range(1, len(B) + 1))
set environment variable A equal to 1	os.environ[A] = '1'
Get a environment variable A	print(os.environ['A'])
set environment variable A to B	os.environ[A] = B
update dictionary A, overwriting values where keys are identical, with contents of dictionary B	A.update(B)
get all the values in column A from pandas data frame B	B['A']
make a line plot with errorbars, A, from data `x, y, err` and set color of the errorbars to B (yellow)	A = plt.errorbar(x, B, yerr=err, ecolor='B')
find all files with extension A in directory B	results += [each for each in os.listdir(B) if each.endswith(A)]
add unicode string A to UTF-8 decoded string B	print(B.decode('utf8') + A)
lower-case the string obtained by replacing the occurrences of regex pattern A in string B with eplacement C	re.sub(A, C, B).lower()
Setting stacksize in a python script	os.system('ulimit -s unlimited; some_executable')
format a string A using string formatting	"""""""{0:.3g}"""""".format(A)"
append the first element of array A to array A	numpy.append(A, A[0])
return the column for value 38.15 in dataframe A	A.ix[:, (A.loc[0] == 38.15)].columns
merge 2 dataframes A and B with same values in a column C with and index D	B[C] = B.CET.map(A.set_index(D)[C])
load a json data A into variable B	B = json.loads(A)
convert radians 1 to degrees	math.cos(math.radians(1))
count the number of integers in list A	sum(isinstance(x, int) for x in A)
replacing  A with B in a string  using regular expressions	'used\u200b'.replace(A, B)
run function A simultaneously	threading.Thread(target=A).start()
sum of squares values in a list A	sum(i * i for i in A)
calculate the sum of the squares of each value in list A	sum(map(lambda x: x * x, A))
Create a dictionary A from list B	A = dict(((key, value) for (key, value) in B))
Create a dictionary A from list B	A = {key: value for (key, value) in B}
Create a dictionary A from list of key value pairs B	A = {k: v for (k, v) in B}
round off entries in dataframe A column B to two decimal places, and entries in column C to three decimal places	A.round({'B': 2, 'C': 3})
Make function A output nothing in curl B	B.setopt(pycurl.A, lambda x: None)
return a random word from a word list A	print(random.choice(A))
Find a max value of the key A in a nested dictionary B	max(B, key=lambda x: B[x]['A'])
get list of string elements in string A delimited by commas, putting B in place of empty strings	[(int(x) if x else B) for x in A.split(',')]
split string A into a list of strings based on B then replace empty strings with zero	""""""","""""".join(x or '0' for x in A.split(B))"
regular expression match nothing	re.compile('$^')
regular expression syntax for not to match anything	re.compile('.\\A|.\\A*|.\\A+')
create a regular expression object with a pattern that will match nothing	re.compile('a^')
drop all columns in dataframe A that holds a maximum value bigger than 0	A.columns[A.max() > 0]
check if date A is equal to today's date	A.date() == datetime.today().date()
print bold text A	print('\x1b[1m' + A)
remove 20 symbols in front of A in string 'unique12345678901234567890.mkv'	reAsub('A{20}(Amkv)', '\\1', 'unique12345678901234567890Amkv')
Define a list with string values A	A
substitute multiple whitespace with single whitespace in string A	""""""" """""".join(A.split())"
print a floating point number 2.345e-67 without any truncation	print('{:.100f}'.format(2.345e-67))
Check if key A in B	(A in B)
Check if key A in B	(A in B)
Check if key A in B	(A in B)
Check if a given key A exists in dictionary B	if (A in B):<nl>    pass
Check if a given key A exists in dictionary B	if (A in B):<nl>    pass
create a django query for a list of values A	Blog.objects.filter(pk__in=[A])
read a binary file A	f = open(A, 'rb')
insert A between every three digit before B and replace C with B in 12345678.46	format(12345678D46, C)Dreplace(C, A)Dreplace(B, C)
Join pandas data frame A and B with left join by C and right join by D	pd.merge(A, B, left_on='C', right_on='D')
calculate ratio of sparsity in a numpy array A	np.isnan(A).sum() / np.prod(A.shape)
reverse sort items in default dictionary A by the third item in each key's list of values	sorted(iter(A.items()), key=lambda k_v: k_v[1][2], reverse=True)
Sort dictionary A in ascending order based on second elements of its values	sorted(list(A.items()), key=lambda v: v[1])
reverse sort dictionary A based on its values	sorted(list(A.items()), key=lambda k_v: k_v[1], reverse=True)
sorting a defaultdict A by value	sorted(list(A.items()), key=lambda k_v: k_v[1])
open a file A in the same directory as a python script	f = open(os.path.join(__location__, A))
open the file A in B mode	f = open(A, B)
divide the values with same keys of two dictionary A and B	{k: (float(B[k]) / A[k]) for k in B}
divide the value for each key A in dict B by the value for the same key A in dict D	{A: (B[A] / D[A]) for A in list(D.keys()) & B}
divide values associated with each key in dictionary A from values associated with the same key in dictionary B	dict((k, float(B[k]) / A[k]) for k in B)
write dataframe A to csv file B with dates formatted as yearmonthday  C	A.to_csv(B, date_format='C')
remove a key A from a dictionary B	B.pop(A, None)
replace NaN values in array A with zeros	b = np.where(np.isnan(A), 0, A)
subprocess run command A through the shell	subprocess.call(A, shell=True)
run command A on command line tools as separate processes	subprocess.call(A, shell=True)
replace percent-encoded code in request A to their single-character equivalent	A = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))
remove white spaces from the end of string A	"""""A"""".rstrip()"
Replace special characters in utf-8 encoded string A using the %xx escape	urllib.parse.quote(A.encode('utf-8'))
URL encoding in python	urllib.parse.quote_plus('a b')
Create an array containing the conversion of string A into separate elements	np.array(map(int, A))
convert a string A to numpy array of integer values	print(np.array(list(A), dtype=int))
convert an rgb image A into grayscale B	B = cv2.imread(A, 0)
sort list A in descending order based on the second item of each tuple in it	A.sort(key=lambda x: x[2], reverse=True)
How to find all occurrences of an element in a list?	indices = [i for i, x in enumerate(my_list) if x == 'whatever']
execute shell command A with a | pipe in it	subprocess.call(A, shell=True)
count the number of trailing question marks in string A	len(A) - len(A.rstrip('?'))
remove dollar sign A from second to last column data in dataframe B and convert the data into floats	B[df.columns[1:]].replace('[\\A,]', '', regex=True).astype(float)
Merge column  A in dataframe B with column A on dataframe C	C.merge(B, how='left', on=A)
switch positions of each two adjacent characters in string A	print(''.join(''.join(i) for i in zip(a2, a1)) + A[-1] if len(A) % 2 else '')
make a window A jump to the front	A.attributes('-topmost', True)
make a window A jump to the front	A.lift()
Convert list of booleans A into a hex string	hex(int(''.join([str(int(b)) for b in A]), 2))
convert the sum of list A into a hex presentation	hex(sum(b << i for i, b in enumerate(reversed(A))))
print the string A, the value of the variable B, the string C and the value of the variable D in one print call.	print(('A', B, 'C', D))
print multiple arguments A and B.	print('Total B for {} is {}'.format(A, B))
print a string using multiple strings A and B	print('Total B for %s is %s  ' % (A, B))
print string including multiple variables A and B	print(('Total B for', A, 'is', B))
serve a static html page A at the root of a django project	url('^$', TemplateView.as_view(template_name=A))
use a list of values `[3,6]` to select rows from a pandas dataframe A's column 'A'	A[df['A'].isin([3, 6])]
How to get the concrete class name as a string?	instance.__class__.__name__
execute python code A in a virtualenv B from matlab	system('B/bin/python A')
django return a QuerySet list containing the values of field A in model B	B.objects.values_list(A, flat=True)
find all digits in string A and put them to a list	re.findall('\\d|\\d,\\d\\)', A)
prompt string A to the console	input(A)
print string A as hex literal	"""""""A"""""".encode('hex')"
insert a new field A on an existing document  B using pymongo	db.Doc.update({'_id': B['_id']}, {'$set': {A: myGeolocCountry}})
Write a regex statement to match A to 'lolllll'.	re.sub('l+', 'l', 'lollll')
BeautifulSoup find all A elements in HTML string B at the five stride starting from the fourth element	rows = B.findAll(A)[4::5]
reverse all x-axis points in pyplot	plt.gca().invert_xaxis()
reverse y-axis in pyplot	plt.gca().invert_yaxis()
stack two dataframes next to each other in pandas	pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)
create a json response A	return HttpResponse(json.dumps(A), content_type='application/json')
decode escape sequences in string A	A.decode('string_escape')
calculate the md5 checksum of a file named  A	hashlib.md5(open(A, 'rb').read()).hexdigest()
Find all keys from a dictionary A whose values are B	[k for k, v in A.items() if v == B]
create a set containing all keys' names from dictionary A	{k for d in A for k in list(d.keys())}
create a set containing all keys names from list of dictionaries A	set([i for s in [list(d.keys()) for d in A] for i in s])
extract all keys from a list of dictionaries A	[i for s in [list(d.keys()) for d in A] for i in s]
unpack keys and values of a dictionary A into two lists	keys, values = zip(*list(A.items()))
convert a string A containing a decimal to an integer	int(Decimal(A))
Convert a string to integer with decimal in Python	int(s.split('.')[0])
check if array A contains all elements of array B	numpy.in1d(A, B).all()
numpy:  check if array A contains all the numbers in array B.	numpy.array([(x in A) for x in B])
Draw node labels A on networkx graph `G ` at position B	networkx.draw_networkx_A(G, B, A)
make a row-by-row copy A of array B	A = [row[:] for row in B]
Create 2D numpy array from the data provided in A with each row in the file having same number of values	X = numpy.loadtxt(A, delimiter=',')
get a list of items from the list A that contain string B	matching = [s for s in A if B in s]
export a pandas data frame A to a file B and retain the indices	A.to_csv('B', sep='\t')
How do I create a LIST of unique random numbers?	random.sample(list(range(100)), 10)
split a string A on last delimiter	A.rsplit(',', 1)
Check if all elements in list A are tupples of long and int	all(isinstance(x, int) for x in A)
check if all elements in a list A are the same type B	all(isinstance(x, B) for x in A)
strip a string A of all carriage returns and newlines	A.strip()
scroll to the bottom of a web page using selenium webdriver	driver.execute_script('window.scrollTo(0, Y)')
scroll a to the bottom of a web page using selenium webdriver	driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')
convert Date object A into a DateTime object	datetime.datetime.combine(A, datetime.time())
check if any item from list A is in list B	print(any(x in B for x in A))
save a numpy array A as an image B	scipy.misc.imsave(B, A)
Remove anything in parenthesis from string A with a regex	A = re.sub(' ?\\([^)]+\\)', '', A)
Remove word characters in parenthesis from string A with a regex	A = re.sub(' ?\\(\\w+\\)', '', A)
Remove all data inside parenthesis in string A	A = re.sub(' \\(\\w+\\)', '', A)
check if any elements in one list A are in another list B	len(set(A).intersection(B)) > 0
convert hex string A to decimal	i = int(A, 16)
convert hex string A to decimal	int('A', 16)
convert hex string A to decimal	int('A', 16)
convert hex string A to decimal	ast.literal_eval(A)
convert hex string A to decimal	int(A, 16)
take screenshot A on mac os x	os.system('screencapture A')
Set a window size to A using selenium webdriver	driver.set_window_size(A)
replace non-ascii chars from a unicode string uA	unicodedata.normalize('NFKD', A).encode('ascii', 'ignore')
concatenate dataframe A with B whilst removing duplicates	pandas.concat([A, B]).drop_duplicates().reset_index(drop=True)
Construct an array with data type float32 A from data in binary file B	A = numpy.fromfile(B, dtype=numpy.float32)
execute a mv command A in subprocess	subprocess.call('A', shell=True)
How to use the mv command in Python with subprocess	subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)
print a character that has unicode value A	print('A'.encode('utf-8'))
compare contents  at filehandles A and B using difflib	difflib.SequenceMatcher(None, A.read(), B.read())
Create a dictionary from string A separated by B and C	dict((kC int(v)) for kC v in (A.split(' B ') for A in s.split('C')))
check if all elements in a tuple A are in another B	all(i in B for i in A)
extract unique dates from time series A in dataframe B	B[A].map(lambda t: t.date()).unique()
right align string A with a width of 7	"""""""{:>7s}"""""".format(A)"
read an excel file A	open(A, 'rb').read(200)
sort dataframe A based on column B in ascending and column C in descending	A.sort_values([B, C], ascending=[True, False], inplace=True)
sort dataframe A based on column B in ascending and column C in descending	A.sort_values([B, C], ascending=[True, False])
sort a pandas data frame with column A in ascending and B in descending order	df1.sort(['A', 'B'], ascending=[True, False], inplace=True)
sort a pandas data frame by column A in ascending, and by column B in descending order	df.sort(['A', 'B'], ascending=[True, False])
django redirect to view A	redirect(A)
remove all values within one list A from another list B	[x for x in B if x not in A]
remove the punctuation A, B, C from a string D	out = ''.join(c for c in D if c not in (A, B, C))
BeautifulSoup get value associated with attribute A where attribute B is equal to C in tag D in HTML parsed string E	E.find(D, {B: C})[A]
unquote a urlencoded unicode string A	urllib.parse.unquote(A)
decode url A from UTF-16 code to UTF-8 code	urllib.parse.unquote(A).decode('utf8')
empty a list A	del A[:]
empty a list A	del lst1[:]
empty a list A	A[:] = []
empty a list A	A[:] = []
reset index of series A	A.reset_index(0).reset_index(drop=True)
convert unicode text from list A with index 0 to normal text B	A[0].getText().encode(B)
create a list containing the subtraction of each item in list A from the item prior to it	[(y - x) for x, y in zip(A, A[1:])]
get value in string A matched by regex pattern B	print(re.search(B, A).group(1))
import all classes from module A	globals().update(importlib.import_module('A').__dict__)
convert a list of characters A into a string	""""""""""""".join(A)"
"Slice A with B as delimiter  to get  ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234"" from url ""http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"""	A.split(B)
sort dictionary A by key	od = collections.OrderedDict(sorted(A.items()))
sort a dictionary A by key	OrderedDict(sorted(list(A.items()), key=(lambda t: t[0])))
Execute a put request to the url A	response = requests.put(A, data=json.dumps(data), headers=headers)
replace everything that is not an alphabet or a digit with A in B.	re.sub('[\\W_]+', A, B)
create a list of aggregation of each element from list A to all elements of list B	[(x + y) for x in A for y in B]
convert string `x'  to dictionary splitted by `=` using list comprehension	dict([x.split('=') for x in s.split()])
remove index 2 element from a list A	A.pop(2)
Delete character A from a string B using python	B = B.replace('A', '')
How to delete a character from a string using python?	newstr = oldstr.replace('M', '')
get the sum of the products of each pair of corresponding elements in lists A and B	sum(x * y for x, y in zip(A, B))
sum the products of each two elements at the same index of list A and list B	list(x * y for x, y in list(zip(A, B)))
sum the product of each two items at the same index of list A and list B	sum(i * j for i, j in zip(A, B))
sum the product of elements of two lists named A and B	sum(x * y for x, y in list(zip(A, B)))
write the content of file A to file B	B.write(open('A', 'rb').read())
Add 1 to each integer value in list A	new_list = [(x + 1) for x in A]
get a list of all items in list A with values greater than B	[x for x in A if x >= B]
set color marker styles A in matplotlib	plt.plot(list(range(10)), 'A')
set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)	plt.plot(list(range(10)), linestyle='--', marker='o', color='b')
split strings in list A on the first occurring tab B and enter only the first resulting substring in a new list	[i.split('B', 1)[0] for i in A]
Split each string in list A on the tab character	A = [i.split('\t')[0] for i in A]
Sum numbers in a list A	sum(A)
attach debugger pdb to class A	A().set_trace()
Compose keys from dictionary A with respective values in dictionary B	result = {k: B.get(v) for k, v in list(A.items())}
add one day and three hours to the present time from datetime.now()	datetime.datetime.now() + datetime.timedelta(days=1, hours=3)
Convert binary string to list of integers using Python	[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]
switch keys and values in a dictionary A	dict((v, k) for k, v in A.items())
sort a list A by number after second B	print(sorted(A, key=lambda x: int(x.split(B)[2])))
Check if the value of the key A is B in a list of dictionaries C	any(d['A'] == 'B' for d in C)
remove all instances of [1, 1] from list A	A[:] = [x for x in A if x != [1, 1]]
remove all instances of A from a list B	[x for x in B if x != A]
convert a list A to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value	b = {A[i]: A[i + 1] for i in range(0, len(A), 2)}
check whether elements in list A appear only once	len(set(A)) == len(A)
Generate MD5 checksum of file in the path A in hashlib	print(hashlib.md5(open(A, 'rb').read()).hexdigest())
How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list	sorted(list(data.items()), key=lambda x: x[1][0])
randomly switch letters' cases in string A	""""""""""""".join(x.upper() if random.randint(0, 1) else x for x in A)"
force bash interpreter A to be used instead of shell	"os.system('GREPDB=""echo 123""; A -c ""$GREPDB""')"
Run a command A in bash instead of shell	"os.system('/bin/bash -c ""A""')"
access the class variable A from a class object B	getattr(B, A)
Display a image file A	Image.open('A').show()
replace single quote character in string A with empty string B	"""""A"""".replace(""'"", B)"
sort list A based on variable B	A.sort(key=B)
remove all whitespace in a string A	A.replace(' ', '')
remove all whitespace in a string A	pattern = re.compile('\\s+')<nl>A = re.sub(pattern, '', A)
remove whitespace in string A from beginning and end	A.strip()
remove all whitespaces in string A	A = re.sub('\\s+', '', A, flags=re.UNICODE)
remove all whitespaces in a string A	A = ''.join(A.split())
sum all the values in a counter variable A	sum(A.values())
find the euclidean distance between two 3-d arrays A and B	np.sqrt(((A - B) ** 2).sum(-1))
create list A containing 3 empty dictionaries	A = [{}, {}, {}]
find the sums of length 7 subsets of a list A	weekly = [sum(visitors[x:x + 7]) for x in range(0, len(A), 7)]
Delete an element A from a dictionary B	del B[A]
Delete an element 0 from a dictionary A	{i: A[i] for i in A if (i != 0)}
Delete an element A from a dictionary B	B.pop('A')
Delete an element with key A dictionary B	del B[A]
solve for the least squares' solution of matrices A and B	np.linalg.solve(np.dot(A.T, A), np.dot(A.T, B))
split dictionary/list inside a pandas column A into separate columns in dataframe B	pd.concat([B.drop(A, axis=1), pd.DataFrame(B[A].tolist())], axis=1)
loop through 0 to 10 with step 2	for i in range(0, 10, 2):<nl>    pass
loop through A with step 2	for i in A[::2]:<nl>    pass
lowercase string values with key A in a list of dictionaries B	[{A: x[A].lower()} for x in B]
convert a list A into string with values separated by spaces	""""""" """""".join(A)"
replace each occurrence of the pattern A within B with C	re.sub(A, C, B)
check if string A is palindrome	A(n) == A(n)[::-1]
upload binary file A with ftplib	ftp.storbinary('STOR A', open('A', 'rb'))
remove all characters from string A upto character B	re.sub('.*I', B, A)
parse a comma-separated string number A into int	int(A.replace(',', ''))
combine  dataframe A and dataframe B by index number	pd.merge(A, B, left_index=True, right_index=True, how='outer')
Combine two Pandas dataframes with the same index	pandas.concat([df1, df2], axis=1)
check if all boolean values in a python dictionary A are true	all(A.values())
use regex pattern A to remove digit 12 if followed by 4 other digits in column B of dataframe C	C.B.str.replace(A, '')
reverse a list A	A[::(-1)]
reverse a list A	reversed(A)
reverse a list A	A.reverse()
reverse a list A	list(reversed(A))
get first element of each tuple in list A	[tup[0] for tup in A]
replace character A with character B and character C with character D in file E	newcontents = E.replace(A, B).replace(C, D)
serialise SqlAlchemy RowProxy object A to a json object	json.dumps([dict(list(A.items())) for A in rs])
get file A	config_file = os.path.expanduser(A)
get multiple parameters with same name from a url in pylons	request.params.getall('c')
Convert array A into a correlation matrix	np.corrcoef(A)
Find the greatest number in set A	print(maxA)
Retrieve parameter A from a GET request.	self.request.get(A)
Add 100 to each element of column A in dataframe B	B['A'].apply(lambda A, y: A + y, args=(100,))
Django get first 10 records of model A ordered by criteria B of model C	A.objects.order_by('-C__B')[:10]
delay for A seconds	time.sleep(A)
make a 60 seconds time delay	time.sleep(60)
make a 0.1 seconds time delay	sleep(0.1)
make a 60 seconds time delay	time.sleep(60)
make a 0.1 seconds time delay	time.sleep(0.1)
From a list of strings A, remove the values that contains numbers.	[x for x in A if not any(c.isdigit() for c in x)]
get the middle two characters of a string A in a pandas dataframe B	B[A].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])
draw a grid line on every tick of plot A	A.grid(True)
sort list A based on each element's number of occurrences	sorted(A, key=lambda x: (-1 * c[x], A.index(x)))
Get the value with the maximum length in each column in array A	[max(len(str(x)) for x in line) for line in zip(*A)]
get the count of each unique value in column A of dataframe B and store in column C	B.A.value_counts().reset_index(name='C')
calculat the difference between each row and the row previous to it in dataframe A	A.set_index('Date').diff()
append values A to a set B	B.update(A)
set every two-stride far element to -1 starting from second element in array A	A[1::2] = -1
Get rank of rows from highest to lowest of dataframe A, grouped by value in column B, according to value in column C	A.groupby('B')['C'].rank(ascending=False)
convert js date object A to python datetime	datetime.strptime(A, '%a, %d %b %Y %H:%M:%S %Z')
Convert a binary value A to string	struct.pack('<I', A)
append string A to list B	B.append('A')
insert string A at position B of list C	C.insert(B, 'A')
convert keys in dictionary A into case insensitive	theset = set(k.lower() for k in A)
pad A up to a length of 5 characters with B	"""""""{s:{c}^{n}}"""""".format(s=A, n=5, c=B)"
check if type of variable A is a string	isinstance(A, str)
check if type of a variable A is string	isinstance(A, str)
Convert list of dictionaries A into a flat dictionary	dict(pair for d in A for pair in list(d.items()))
merge a list of dictionaries in list A into a single dict	{k: v for d in A for k, v in list(d.items())}
sort a pandas data frame according to column A in ascending and B in descending order	df.sort_values(['A', 'B'], ascending=[True, False], inplace=True)
sort a pandas data frame by column A in ascending and B in descending order	df.sort(['A', 'B'], ascending=[True, False], inplace=True)
run the code contained in string A	eval(A)
creating a list of dictionaries [{A: 1, B: 4, C: 2, D: 4}, {A: 1, B: 4, C: 1, D: 5}]	[{E: 1, G: 4, F: 2, H: 4}, {E: 1, G: 4, F: 1, H: 5}]
Creating a list of dictionaries in python	[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]
get all possible combination of items from 2-dimensional list A	list(itertools.product(*A))
"Get sum of values of columns  A, B, C after group by on columns D and ""Item_code"" in dataframe E."	E.groupby(['D', 'Item_Code'])[[A, B, C]].sum()
create list A containing permutations of each element in list B with variable C as tuples	A = [(el, C) for el in B]
remove Nan values from array A	A = A[numpy.logical_not(numpy.isnan(A))]
remove first directory from path '/First/Second/Third/Fourth/Fifth'	os.path.join(*x.split(os.path.sep)[2:])
Replace A with B in a string C	C = C.replace('A', 'B')
call bash command A with pipe	subprocess.call(A, shell=True)
Convert a hex string `437c2123 ` according to ascii value.	"""""""437c2123"""""".decode('hex')"
Get a list of all fields in class A that are marked B	[k for k, v in A._fields.items() if v.B]
remove column by index A in dataframe B	B = B.ixA
change a string of integers A separated by spaces to a list of int	A = map(int, A.split())
convert a string of integers A separated by spaces to a list of integers	A = [int(i) for i in A.split()]
find element by css selector A	driver.find_element_by_css_selector(A)
Python / Remove special character from string	re.sub('[^a-zA-Z0-9-_*.]', '', my_string)
display a pdf  file that has been downloaded as A	webbrowser.open('file:///A')
replace backslashes in string A with empty string B	A = A.replace('\\', B)
remove backslashes from string A	A.replace('\\', '')
replace value A in any column of pandas dataframe to B	df.replace(A, 'B')
convert datetime object to date object in python	datetime.datetime.now().date()
How do I convert datetime to date (in Python)?	datetime.datetime.now().date()
get all sub-elements of an element A in an elementtree	[elem.tag for elem in A.iter()]
get all sub-elements of an element tree A excluding the root element	[elem.tag for elem in A.iter() if elem is not A]
How can I split and parse a string in Python?	"""""""2.7.0_bf4fda703454"""""".split('_')"
move dictionaries in list A to the end of the list if value of key B in each dictionary is not equal to C	sorted(A, key=lambda x: x[B] != C)
check if all values of a dictionary A are zero B	all(value == B for value in list(A.values()))
produce a pivot table as dataframe using column A in datafram B to form the axes of the resulting dataframe	B.pivot_table(A, rows='X', cols='X2')
call A in a try-except without handling the exception	try:<nl>    A<nl>except:<nl>    pass
call A in a try-except without handling the exception	try:<nl>    A<nl>except Exception:<nl>    pass
get a sum of 4d array A	A.sum(axis=0).sum(axis=0)
Convert a datetime object A to microtime	time.mktime(A.timetuple()) + A.microsecond / 1000000.0
select all rows in dataframe A where the values of column B is bigger than or equal to C and smaller than or equal to D	A[(C <= A[B]) & (A[B] <= D)]
sort a list of lists A by index 2 of the inner list	sorted(A, key=itemgetter(2))
sort a list of lists A by index 2 of the inner list	A.sort(key=(lambda x: x[2]))
sort list A by index 2 of the item	sorted(A, key=(lambda x: x[2]))
sort a list of lists A by indices 2,0,1 of the inner list	sorted_list = sorted(A, key=itemgetter(2, 0, 1))
find rows of 2d array in 3d numpy array A if the row has value B	np.argwhere(np.all(A == B, axis=(1, 2)))
From multiIndexed dataframe A select columns B and C within each higher order column D and E	A.loc[:, (list(itertools.product(['D', 'E'], ['B', 'C'])))]
select only specific columns A and B from a dataframe C with multiindex columns	C.loc[:, ([('one', A), ('one', B), ('two', A), ('two', B)])]
match a sharp, followed by letters (including accent characters) in string A using a regex	hashtags = re.findall('#(\\w+)', A, re.UNICODE)
Rename file from A to B	os.rename(A, B)
Get all texts and tags from a tag A from etree tag B using lxml	print(etree.tostring(B.find('A')))
Serialize dictionary A and its keys to a JSON formatted string	json.dumps({str(k): v for k, v in A.items()})
parse UTF-8 encoded HTML response A to BeautifulSoup object	soup = BeautifulSoup(A.read().decode('utf-8'))
delete file A	os.remove(A)
get the next value greatest to A from a list of numbers B	min([x for x in B if x > A])
Replace each value in column A of dataframe B with string C	B[A] = C
sort list A with positives coming before negatives with values sorted respectively	sorted(A, key=lambda x: (x < 0, x))
get the date 6 months from today	six_months = (date.today() + relativedelta(months=(+ 6)))
get the date 1 month from today	(date(2010, 12, 31) + relativedelta(months=(+ 1)))
get the date 2 months from today	(date(2010, 12, 31) + relativedelta(months=(+ 2)))
calculate the date six months from the current date	print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())
get a list of keys of dictionary A sorted by the value of nested dictionary key B	sorted(list(A.keys()), key=lambda x: A[x][B], reverse=True)
get all the values from a numpy array A excluding index 3	A[np.arange(len(A)) != 3]
delete all elements from a list A if a function B taking value as parameter returns C	[A for A in lst if B(A) != C]
set dataframe A index using column B	A.set_index(B)
read lines from a csv file A into a list of lists B	B = [line.split(',') for line in open('A')]
list comprehension that produces integers between 11 and 19	[i for i in range(100) if i > 10 if i < 20]
Get only digits from a string A	""""""""""""".join([c for c in A if c.isdigit()])"
split a string A based on tab B	re.split('\\t+', A.rstrip(B))
scalar multiply matrix A by B	(A.T * B).T
remove trailing newline in string A	'A'.rstrip()
remove trailing newline in string A	A.rstrip('\n')
remove newline in string A	A.strip()
remove newline in string A on the right side	A.rstrip()
remove newline in string A on the left side	A.lstrip()
remove newline in string A	A.rstrip('\r\n')
remove newline in string A on the right side	A.rstrip('\r\n')
remove newline in string A on the right side	A.rstrip('\r\n')
remove newline in string A on the right side	'A'.rstrip('\n')
split string A into chunks of 16 characters each	re.findall('.{,16}\\b', A)
Get a list comprehension in list of lists A	[[A[i][j] for j in range(len(A[i]))] for i in range(len(A))]
convert unicode string A to byte string	A.encode('latin-1')
split dataframe A where the value of column B is equal to C	A.groupby((A.B == C).shift(1).fillna(0).cumsum())
save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2	urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')
Find indices of elements equal to zero from numpy array A	numpy.where((A == 0))[0]
flush output of python print	sys.stdout.flush()
convert A to string	str(A)
convert A to string	A.__str__()
convert A to string	str(A)
sort list of lists A by the second item in each list	A.sort(key=operator.itemgetter(1))
Print variable A and variable B with space string C in between	print(str(A) + C + str(B))
change NaN values in dataframe A using preceding values in the frame	A.fillna(method='ffill', inplace=True)
change the state of the Tkinter `Text` widget to read only i.e. `disabled`	text.config(state=DISABLED)
python sum of ascii values of all characters in a string A	sum(map(ord, A))
apply itertools.product to elements of a list of lists A	list(itertools.product(*A))
print number A as thousands separators	'{:,}'.format(A)
print number 1255000 as thousands separators	locale.setlocale(locale.LC_ALL, 'en_US')<nl>locale.format('%d', 1255000, grouping=True)
get rows of dataframe A where column B has values C	A[df.B.isin(C)]
get the value at index 1 for each tuple in the list of tuples A	[x[1] for x in A]
"split unicode string ""раз два три"" into words"	'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()
sort query set by number of characters in a field A in django model B	B.objects.extra(select={'A': 'Length(name)'}).order_by('A')
get a dictionary in list A which key B is closer to a global value 1.77672955975	min(A, key=lambda x: (abs(1.77672955975 - x[B]), -x['pixels']))
get the non-masked values of array A	A[~A.mask]
Find all words containing letters between A and Z in string A	re.findall('\\b[A-Z]', A)
create a list A containing 5 lists, each of 5 items  all set to 0	A = [([0] * 5) for i in range(5)]
creating a numpy array of 3d coordinates from three 1d arrays A, B and C	np.vstack(np.meshgrid(A, B, C)).reshape(3, -1).T
find the minimum value in a numpy array A excluding 0	A[arr != 0].min()
get the text of multiple elements found by xpath A	browser.find_elements_by_xpath(A).text
find all the values in attribute A for the tags whose B attribute is C in selenium	"browser.find_elements_by_xpath(""//*[@B='C']"").get_attribute('A')"
parse a YAML file A	with open('A', 'r') as stream:<nl>    try:<nl>        print((yaml.load(stream)))<nl>    except yaml.YAMLError as exc:<nl>        print(exc)
parse a YAML file A	with open('A') as stream:<nl>    try:<nl>        print((yaml.load(stream)))<nl>    except yaml.YAMLError as exc:<nl>        print(exc)
Sort the values of the dataframe A and align the columns accordingly based on the obtained indices after np.argsort.	pd.DataFrame(A.columns[np.argsort(A.values)], A.index, np.unique(A.values))
Getting today's date in YYYY-MM-DD	datetime.datetime.today().strftime('%Y-%m-%d')
urlencode a querystring A in python 2	urllib.parse.quote_plus(A)
sort a dictionary A by length of its values and print as string	print(' '.join(sorted(A, key=lambda k: len(A[k]), reverse=True)))
convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists	map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
convert list of tuples to multiple lists in Python	map(list, zip(*[(1, 2), (3, 4), (5, 6)]))
convert list of tuples to multiple lists in Python	zip(*[(1, 2), (3, 4), (5, 6)])
create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list A	[(x, y) for x, y in zip(A, A[1:]) if y == 9]
navigate to webpage given by url `http://www.python.org` using Selenium	driver.get('http://www.google.com.br')
reverse a UTF-8 string A	b = A.decode('utf8')[::-1].encode('utf8')
extract date from a string A	dparser.parse(A, fuzzy=True)
extract date from a string A	dparser.parse(A, fuzzy=True)
extract date from a string A	dparser.parse('A', fuzzy=True)
Convert a list A to dictionary	dict(map(lambda s: s.split(':'), A))
check if string A contains any upper or lower-case ASCII letters	re.search('[a-zA-Z]', A)
convert a pandas A groupby object to dataframe	DataFrame({'count': A.groupby(['Name', 'City']).size()}).reset_index()
remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `	re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')
get items from list A that don't appear in list B	[y for y in A if y not in B]
extract the first four rows of the column A from a pandas dataframe B	B.groupby('A').head(4)
Unzip a list of tuples A into a list of lists	zip(*A)
combine two lists A and B into a dictionary	dict(zip(A, B))
combine two lists A and B into a dictionary	dict(zip(A, B))
retrieve the path from a Flask request	request.url
replace carriage return in string A with empty string B	A.replace('\\r', B)
serialize dictionary A as a JSON formatted string with each key formatted to pattern '%d,%d'	simplejson.dumps(dict([('%A,%A' % k, v) for k, v in list(A.items())]))
parse string A into datetime by format B	datetime.strptime('A', 'B')
parse string A into datetime	parser.parse('A')
Get absolute folder path and filename for file `existGDBPath `	os.path.split(os.path.abspath(existGDBPath))
extract folder path from file path	os.path.dirname(os.path.abspath(existGDBPath))
Execute a post request to url A with json data B	requests.post('A', json=B)
remove dictionary from list A if the value associated with its key B is in list C	A = [x for x in A if x[B] not in C]
get a request parameter A in jinja2	{{request.args.get('A')}}
create a list of integers between 2 values A and B	list(range(A, B))
Change data type of data in column A of dataframe B into float and then to int	B[A] = B[A].astype(float).astype(int)
Find the list in a list of lists A with the max value of the second element.	max(A, key=lambda x: x[1])
remove leading and trailing zeros in the string 'your_Strip'	your_string.strip('0')
generate a list of all unique pairs of integers in A	list(permutations(list(A), 2))
create a regular expression that matches the pattern A over multiple lines of text	re.compile(A, re.MULTILINE)
regular expression A matching a multiline block of text	re.compile('A', re.MULTILINE)
Run A file with python location B and arguments C as a subprocess	call([B, A, C])
sort a multidimensional list A by second and third column	A.sort(key=operator.itemgetter(2, 3))
Add a tuple with value A to a tuple B	final_choices = ((A,) + B)
Add a tuple with value A to a tuple B	final_choices = ((A,) + B)
find the current directory	os.getcwd()
find the current directory	os.path.realpath(__file__)
get the directory name of A	os.A.dirname(A)
get the canonical path of file A	os.A.realpath(A)
Find name of current directory	dir_path = os.path.dirname(os.path.realpath(__file__))
Find current directory	cwd = os.getcwd()
Find the full path of current directory	full_path = os.path.realpath(__file__)
sort array A in ascending order by values of the 3rd column	A[arr[:, (2)].argsort()]
sort rows of numpy matrix A in ascending order according to all column values	numpy.sort(A, axis=0)
split string A on space B and dot character C	BreCsplit('[BC]',BA)B
copy the content of file A to file B	shutil.copy(A, B)
generate random upper-case ascii string of 12 characters length	print(''.join(choice(ascii_uppercase) for i in range(12)))
merge the elements in a list A sequentially	[''.join(seq) for seq in zip(A, A[1:])]
rename column A in dataframe B to C	B.rename(columns={A: C}, inplace=True)
convert a beautiful soup html A to text	print(A.get_text())
Sort list A in descending order based on the second element of each list inside listA	sorted(A, key=operator.itemgetter(1), reverse=True)
replace value 0 with A and value 1 with B in column C of dataframe D	D[C].replace([0, 1], [A, B], inplace=True)
split string A on punctuation	re.split('\\W+', A)
Extract first two substrings in string A that end in B, C or D	reBmatch('(B*C[BCD](C:\\s+B*C[BCD]){0,1})', A)Bgroup(1)
split string A into strings of repeating elements	print([a for a, b in re.findall('((\\w)\\2*)', A)])
Create new string with unique characters from A seperated by B	print(B.join(OrderedDict.fromkeys(A)))
create a set from string A to remove duplicate characters	print(' '.join(set(A)))
list folders in zip file A that ends with B	[x for x in A.namelist() if x.endswith(B)]
find the count of a word A in a string B	B.count(A)
reduce the first element of list of strings A to a string, separated by B	print(B.join([item[0] for item in A]))
Move the cursor of file pointer A at the end of the file.	A.seek(2)
convert a flat list into a list of tuples of every two items in the list, in order	print(zip(my_list[0::2], my_list[1::2]))
group a list of ints into a list of tuples of each 2 elements	my_new_list = zip(my_list[0::2], my_list[1::2])
set the default encoding to 'utf-8'	sys.setdefaultencoding('utf8')
Formate current date and time to a string using pattern A	datetime.datetime.now().strftime(A)
retrieve arabic texts from string A	print(re.findall('[\\u0600-\\u06FF]+', A))
group dataframe A based on minute interval	A.groupby(A.index.map(lambda t: t.minute))
access value associated with key A of key B from dictionary C	C[B][A]
remove all null values from columns A, B and C of dataframe D	D.dropna(subset=[A, B, C], how='all')
insert a list A at the front of list B	B.insert(0, A)
insert elements of list A into list B at position C	B = B[:C] + A + B[C:]
calculate the mean of the nonzero values' indices of dataframe `df`	np.flatnonzero(x).mean()
get date from dataframe A column B to column C	A[C] = A[B].dt.date
remove elements in list A from list B	[x for x in B if x not in A]
join elements of each tuple in list A into one string	[''.join(x) for x in A]
join items of each tuple in list of tuples A into a list of strings	list(map(''.join, A))
match blank lines in A with regular expressions	re.split('\n\\A*\n', A)
merge a list of integers A into a single integer	from functools import reduce<nl>reduce(lambda x, y: 10 * x + y, A)
Convert float 24322.34 to comma-separated string	"""""""{0:,.2f}"""""".format(24322.34)"
pass dictionary items A as keyword arguments in function B	B(**A)
get line count of file A	sum((1 for line in open(A)))
get line count of file A	def bufcount(A):<nl>    f = open(A)<nl>    lines = 0<nl>    buf_size = (1024 * 1024)<nl>    read_f = f.read<nl>    buf = read_f(buf_size)<nl>    while buf:<nl>        lines += buf.count('\n')<nl>        buf = read_f(buf_size)<nl>    return lines
round 1123.456789 to be an integer	print(round(1123.456789, -1))
sort list A based on values from another list B	[x for y, x in sorted(zip(B, A))]
sorting list A based on values from another list B	[x for y, x in sorted(zip(B, A))]
get equivalent week number from a date `2010/6/16` using  isocalendar	datetime.date(2010, 6, 16).isocalendar()[1]
select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe A	A.iloc[:, (np.r_[1:10, (15), (17), 50:100])]
apply two different aggregating functions A and B to the same column C in pandas data frame D	D.groupby('C').agg({'returns': [np.A, np.B]})
convert string A to lowercase	A.lower()
convert utf-8 string A to lowercase	A.decode('utf-8').lower()
How to download a file via FTP with Python ftplib	ftp.retrbinary('RETR %s' % filename, file.write)
handle the `urlfetch_errors ` exception for imaplib request to url A	urlfetch.fetch(A, deadline=10 * 60)
output first 100 characters in a string A	print(A[0:100])
make matplotlib plot legend put marker in legend only once	legend(numpoints=1)
get set intersection between dictionaries A and B	dict((x, set(y) & set(A.get(x, ()))) for x, y in B.items())
convert csv file A into two-dimensional matrix	numpy.loadtxt(open(A, 'rb'), delimiter=',', skiprows=1)
filter the objects in django model A between date range B and C	A.objects.filter(date__range=['B', 'C'])
filter objects month wise in django model A for year B	A.objects.filter(date__year='B', date__month='01')
create a dictionary A into another dictionary B field C	B[C] = A
apply A to each row of a matrix B	numpy.apply_along_axis(A, 1, B)
merge dictionaries form array A in a single expression	dict((k, v) for d in A for k, v in list(d.items()))
Convert escaped utf string to utf string in A	print('A'.decode('string_escape'))
counting the number of true booleans in a python list A	sum(A)
set the size of figure A in inches to width height of B, C	A.set_size_inches(B, C, forward=True)
format string with dict A with integer keys	'hello there %(5)s' % A
Convert a string of numbers A separated by B into a list of integers	map(intB A.split('B'))
Convert a string of numbers A separated by comma into a list of numbers	[int(s) for s in A.split(',')]
Flatten list A	A = [i[0] for i in A]
convert list A into a flat list	y = map(operator.itemgetter(0), A)
get a list A of the first element of every tuple in list B	A = [i[0] for i in B]
extract all the values of a specific key named 'values' from a list of dictionaries	results = [item['value'] for item in test_data]
get current datetime in ISO format	datetime.datetime.now().isoformat()
get UTC datetime in ISO format	datetime.datetime.utcnow().isoformat()
Merge all columns in dataframe A into one column	A.apply(' '.join, axis=0)
pandas subtract a row from dataframe A from dataframe B	pd.DataFrame(B.values - A.values, columns=B.columns)
read file A using universal newline mode B	print(open(A, B).read())
print line A from text file with B format	print(A.decode(B).split())
open a text file A in io module with encoding B	file = io.open('A', 'r', encoding='B')
Join data of dataframe A with data in dataframe B based on similar values of column C in both dataframes	s1 = pd.merge(A, B, how='inner', on=[C])
check if string A is UTF-8 encoded	A.decode('utf8').encode('utf8')
get the dimensions of numpy array A	A.shape
get the dimensions of numpy array A	N.shape(A)
get the dimensions of array A	N.shape(A)
get the dimensions of numpy array A	A.shape
get the indices of tuples in list of tuples A where the first value is 53	[i for i, v in enumerate(A) if v[0] == 53]
convert string of bytes A into an int	struct.unpack('<L', 'A')[0]
get the first row, second column; second row, first column, and first row third column values of numpy array A	A[[0, 1, 1], [1, 0, 2]]
create a list with permutations of string A	list(powerset(A))
Convert string to boolean from defined set of strings	s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']
replace special characters in url A using the '%xx' escape	urllib.parse.quote(A)
Save plot A as svg file B	A.savefig(B)
count the number of elements in array A	len(A)
insert directory A to current directory	sys.path.insert(0, A)
How to plot with x-axis at the top of the figure?	ax.xaxis.set_ticks_position('top')
Insert records in bulk from A of B DB to A of  sqlite3 C object	C.execute('INSERT OR REPLACE INTO B.A SELECT * FROM A')
Match regex A on string B	re.match(A, B)
match regex A on string B	re.match(A, B)
Convert hex string A to integer	int('A', 16)
Convert hex string A to integer	int('A', 16)
Convert hex string A to integer	int('A', 16)
Convert hex string A to integer	int(A, 16)
Convert hex string A to int	int(A, 16)
print variable `value ` without spaces	"print('Value is ""' + str(value) + '""')"
Print a string A with string formatting	"print('Value is ""{}""'.format(A))"
Jinja join elements of array A with space string B	{{A | join(B)}}
get a list of locally installed Python modules	help('modules')
Get only first element in each of the innermost of the multidimensional list A	[[[x[0]] for x in A[i]] for i in range(len(A))]
Sort a string A in lexicographic order	sorted(A, key=str.upper)
sort string A in lexicographic order	sorted(sorted(A), key=str.upper)
get a sorted list of the characters of string A in lexicographic order, with lowercase letters first	sorted(A, key=str.lower)
find all the rows in Dataframe A that are also present in Dataframe B, for the columns C, D, E and F.	pd.merge(B, A, on=[C, D, E, F], how='inner')
Reverse key-value pairs in a dictionary A	dict((v, k) for k, v in A.items())
decode unicode string A into a readable unicode literal	A.decode('unicode_escape')
convert list of strings A into list of integers	[int(i) for i in A]
convert a list with string A into list with integers	map(int, A)
convert list with str into list with int	list(map(int, ['1', '2', '3']))
find all anchor tags in html A whose url begins with `http://www.iwashere.com`	A.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))
find all anchors with a hyperlink that matches the pattern A	soup.find_all('a', href=re.compile(A))
execute a jar file A using subprocess	subprocess.call(['java', '-jar', A])
insert row into mysql database with column A set to the value B	cursor.execute('INSERT INTO table (`A`) VALUES (%s)', (B,))
remove a substring A from the end of string B	if B.endswith('A'):<nl>    B = B[:(-4)]
remove a substring A from the end of string B	B = re.sub('\\A$', '', B)
remove a substring A from the end of string B	print(B.replace('A', ''))
remove a substring A from the end of string B	if (not B.endswith(A)):<nl>    return B<nl>return B[:(len(B) - len(A))]
print each first value from a list of tuples A with string formatting	print(', ,'.join([str(i[0]) for i in A]))
clamping floating number A to be between B and C	max(min(A, C), B)
split a unicode string A into a list of words and punctuation characters with a regex	re.findall('\\w+|[^\\w\\s]', A, re.UNICODE)
execute raw sql queue A in database B in sqlalchemy-flask app	result = B.engine.execute(A)
quit program	sys.exit(0)
get digits in string A	""""""""""""".join(c for c in A if c.isdigit())"
split string A on one or more spaces with a regular expression	re.split(' +', A)
python split string based on regular expression	re.findall('\\S+', str1)
Evaluate a nested dictionary `myobject.id.number` to get A if B is present with getattr	getattr(getattr(B, 'id', None), 'A', None)
convert generator object to a dictionary	{i: (i * 2) for i in range(10)}
convert generator object to a dictionary	dict((i, i * 2) for i in range(10))
Matplotlib clear the current axes.	plt.cla()
split string A into float values and write sum to B	B = sum(float(item) for item in A.split(','))
Convert ascii value A to binary	bin(ord(A))
print a string after a specific substring A in string `my_string `	print(my_string.split(A, 1)[1])
get value of key A associated with first index of key B of dictionary C	print(C['B'][0]['A'])
remove colon character surrounded by vowels letters in string A	A = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\1\\2', A)
extract data field A from json object	"json.loads('{""foo"": 42, ""bar"": ""baz""}')[A]"
Convert JSON array A to Python object	data = json.loads(A)
Convert JSON array A to Python object	data = json.loads(A)
pars a string A to extract hashtags into an array	re.findall('#(\\w+)', A)
do a boolean check if a string A contains any of the items in list B	any(e in A for e in B)
How to plot two columns of a pandas data frame using points?	df.plot(x='col_name_1', y='col_name_2', style='o')
Parsing HTML string A using BeautifulSoup	parsed_A = BeautifulSoup(A)<nl>print(parsed_A.body.find('div', attrs={'class': 'container', }).text)
Parsing webpage A using BeautifulSoup	page = urllib.request.urlopen(A)<nl>soup = BeautifulSoup(page)
change figure size to 3 by 4 in matplotlib	plt.figure(figsize=(3, 4))
Strip punctuation from string A	A.translate(None, string.punctuation)
django urlsafe base64 decode string A with decryption	base64.urlsafe_b64decode(A.encode('ascii'))
get the number of all keys in the nested dictionary `dict_list`	len(dict_test) + sum(len(v) for v in dict_test.values())
return the conversion of decimal A to hex without the '0x' prefix	hex(A).split('x')[1]
create a list containing digits of number 123 as its elements	list(str(123))
converting integer A to list	[int(x) for x in str(A)]
select a first form with no name in mechanize	br.select_form(nr=0)
Open file A in read mode with encoding of B	json.load(codecs.open(A, 'r', B))
load json file A with utf-8 bom header	json.loads(open(A).read().decode('utf-8-sig'))
setup a smtp mail server to A with port B	server = smtplib.SMTP('A', B)
revers correlating bits of integer A	int('{:08b}'.format(A)[::-1], 2)
add column A to index of dataframe B	B.set_index(['A'], append=True)
Iterating over a dictionary A using for loops	for (key, value) in A.items():<nl>    pass
Iterating over a dictionary A using for loops	for (key, value) in list(A.items()):<nl>    pass
Iterating key and items over dictionary A	for (letter, number) in list(A.items()):<nl>    pass
Iterating key and items over dictionary A	for (k, v) in list(A.items()):<nl>    pass
get keys and items of dictionary A	list(A.items())
get keys and items of dictionary A as a list	list(A.items())
Iterating key and items over dictionary A	for (k, v) in list(A.items()):<nl>    pass
Iterating key and items over dictionary A	for (letter, number) in list(A.items()):<nl>    pass
Iterating key and items over dictionary A	for (letter, number) in list(A.items()):<nl>    pass
query all data from table A where the value of column B is bigger than 3 hours	session.query(A).filter(A.B > timedelta(hours=3)).all()
compile Visual Studio project A from the command line through python	os.system('msbuild A /p:Configuration=Debug')
get max key in dictionary A	max(list(A.keys()), key=int)
execute command A from python script	os.system(A)
get a name of function A as a string	A.__name__
How to get a function name as a string in Python?	my_function.__name__
check if all values in the columns of a numpy matrix A are same	np.all(A == A[(0), :], axis=0)
sort list A in ascending order based on the addition of the second and third elements of each tuple in it	sorted(A, key=lambda x: (sum(x[1:3]), x[0]))
sort a list of tuples A by the sum of second and third element of each tuple	sorted(A, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)
sorting a list of tuples A by the sum of the second elements onwards, and third element of the tuple	sorted(A, key=lambda x: (sum(x[1:]), x[0]))
sort the list of tuples A by the sum of every value except the first and by the first value in reverse order	sorted(A, key=lambda x: (sum(x[1:]), x[0]), reverse=True)
add header 'WWWAuthenticate' in a flask app with value A	response.headers['WWW-Authenticate'] = A
clear session key A	del request.session[A]
convert date string A to date object in format B	datetime.datetime.strptime(A, B).date()
Replace non-ASCII characters in string A with a single space	re.sub('[^\\x00-\\x7F]+', ' ', A)
List of lists into numpy array	numpy.array([[1, 2], [3, 4]])
Get a list A from 1 to 10	A = [i for i in range(10)]
use regex pattern A to split string B	[m[0] for m in re.compile(A).findall(B)]
use regular expression A to split string B	[i[0] for i in re.findall(A, B)]
remove the space between subplots in matplotlib.pyplot	fig.subplots_adjust(wspace=0, hspace=0)
Reverse list A	A[::-1]
Python JSON encoding	json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})
write a list of strings A to csv object B	B.writerow(A)
Jinja2 formate date A accorto pattern B	{{(A | date): B}}
Split a string A with comma, question mark or exclamation by non-consuming regex using look-behind	re.split('(?<=[\\.\\?!]) ', A)
create a regular expression object with the pattern A	re.compile(A)
declare an array A	A = []
declare an array with element A	intarray = array(A)
given list A, reverse the all sublists and the list itself	[sublist[::-1] for sublist in A[::-1]]
Replace all non-alphanumeric characters in a string	re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')
unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`	""""""""""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])"
disable logging while running unit tests in python django	logging.disable(logging.CRITICAL)
adding url A to mysql row	cursor.execute('INSERT INTO index(A) VALUES(%s)', (A,))
convert column of date objects A in pandas dataframe B to strings in new column C	B[C] = B[A].dt.strftime('%d%m%Y')
split string A by B and get the first element	A.split(B)[0]
drop rows of dataframe A whose index is smaller than the value of B or bigger than the value ofC	A.query('index < @B or index > @C')
Drop the rows in pandas timeseries A from the row containing index B to the row containing index C	A.loc[(A.index < B) | (A.index > C)]
Get the number of NaN values in each column of dataframe A	A.isnull().sum()
reset index of dataframe Aso that existing index values are transferred into Aas columns	A.reset_index(inplace=True)
generate a list containing values associated with the key A of each dictionary inside list B	[x[A] for x in B]
python getting a list of value from list of dict	[d['value'] for d in l]
python getting a list of value from list of dict	[d['value'] for d in l if 'value' in d]
convert numpy array into python list structure	np.array([[1, 2, 3], [4, 5, 6]]).tolist()
converting string A to a tuple	ast.literal_eval(A)
keep a list A of lists sorted as it is created by second element	A.sort(key=lambda x: x[1])
remove duplicated items from list of lists A	list(map(list, set(map(lambda i: tuple(i), A))))
uniqueness for list of lists A	[list(i) for i in set(tuple(i) for i in A)]
in django, check if a user is in a group A	return user.groups.filter(name=A).exists()
check if a user A is in a group from list of groups B	return A.groups.filter(name__in=B).exists()
Change log level dynamically to A without restarting the application	logging.getLogger().setLevel(logging.A)
Concat each values in a tuple A to get a string	""""""""""""".join(str(i) for i in A)"
swap each pair of characters in string A	""""""""""""".join([A[x:x + 2][::-1] for x in range(0, len(A), 2)])"
save current figure to file A with resolution of 1000 dpi	plt.savefig(A, dpi=1000)
delete items from list A if the item exist in list `to_dell`	A = [[x for x in sublist if x not in to_del] for sublist in A]
find all the elements that consists value A in a list of tuples B	[item for item in B if A in item]
find all elements in a list of tuples A where the first element of each tuple equals 1	[item for item in A if item[0] == 1]
Get the index value in list A using enumerate in list comprehension	{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(A)}
how to uniqify a list of dict in python	[dict(y) for y in set(tuple(x.items()) for x in d)]
load a file A into the python console	exec(compile(open('A').read(), 'A', 'exec'))
SQLAlchemy count the number of rows in table A	rows = session.query(A).count()
Execute Shell Script from python with variable	subprocess.call(['test.sh', str(domid)])
read excel file A using pandas	dfs = pd.read_excel(A, sheetname=None)
unpack the binary data represented by the hexadecimal string A to a float	struct.unpack('d', binascii.unhexlify(A))
Get index of numpy array A with another numpy array B	A[tuple(B)]
find all possible sequences of elements in a list A	map(list, permutations(A))
sort a list A based on another sorted list B	sorted(A, key=B.index)
How to get yesterday in python	datetime.datetime.now() - datetime.timedelta(days=1)
create a dataframe A filled with zeros with indices from 0 to length of B and column names from C	A = pd.DataFrame(0, index=np.arange(len(B)), columns=C)
find the index of sub string A in B	B.find(A)
find the index of sub string A in B	B.find(A)
find the index of sub string A in string B	B.index(A)
find the index of sub string A in string B	B.index(A)
find the index of sub string A in string B	B.find(A)
find the index of sub string A in string B	B.find(A)
find the index of sub string A in string B starting from index 11	B.find(A, 11)
find the index of sub string A in string B starting from index 15	B.find(A, 15)
find the index of sub string A in string B starting from index 16	B.find(A, 16)
find the index of sub string A in string B starting from index 11 and ending at index 14	B.find(A, 11, 14)
sort list of date strings A	sorted(A, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))
Get all the sentences from a string A using regex	re.split('\\.\\s', A)
Regular expression in Python sentence extractor	re.split('\\.\\s', re.sub('\\.\\s*$', '', text))
get all characters in string A up to the fourth index	"""""""A""""""[:4]"
cut a string by delimiter A	s.rfind(A)
cut a string using delimiter A	s[:s.rfind(A)]
find a tag A whose B attribute is C in selenium	"driver.find_element_by_xpath(""//A[@B='"" + C + ""']"").click()"
append line A to file B	with open('B', 'a') as myfile:<nl>    myfile.write('A')
append line A to file B	with open('B', 'a') as f:<nl>    f.write('A')
append to file A content 'koko'	with open(A, 'ab') as f:<nl>    pass
append to file A content B	open(A, 'a+b').write(B)
split string A into tokens	print([i for i in re.split('([\\d.]+|\\W+)', A) if i])
Find all Chinese characters in string A	re.findall('[\u4e00-\u9fff]+', A)
split string A by letter B	A.split('A')
run shell command 'rm -r some.file' in the background	subprocess.Popen(['rm', '-r', 'some.file'])
convert a list of dictionaries `listofdict into a dictionary of dictionaries	dict((d['name'], d) for d in listofdict)
print current date and time in a regular format	datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
print current date and time in a regular format	time.strftime('%Y-%m-%d %H:%M')
find consecutive consonants in a word `CONCENTRATION` using regex	re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)
get a list of indices of non zero elements in a list A	[i for i, e in enumerate(A) if e != 0]
get multiple integer values from a string A	map(int, re.findall('\\d+', A))
get the path of Python executable under windows	os.path.dirname(sys.executable)
move an x-axis label to the top of a plot A in matplotlib	A.xaxis.set_label_position('top')
move x-axis to the top of a plot A	A.xaxis.tick_top()
Move x-axis of the pyplot object A to the top of a plot in matplotlib	A.xaxis.set_ticks_position('top')
parse string A to DateTime object using format B	datetime.strptime(A, B)
Open image A	img = Image.open(A)<nl>img.show()
Open image A	img = Image.open('A')<nl>Img.show
terminate the script using status value 0	sys.exit(0)
abort the execution of the script using message A	sys.exit(A)
abort the execution of a python script	sys.exit()
find maximum with lookahead = 4 in a list A	[max(abs(x) for x in A[i:i + 4]) for i in range(0, len(A), 4)]
set the current working directory to A	os.chdir(A)
set the current working directory to path A	os.chdir(A)
get a list A of all the items in list B that are not of type C	A = [x for x in B if not isinstance(x, C)]
match contents of an element to A in xpath (lxml)	"tree.xpath("".//a[text()=A]"")[0].tag"
concatenate key/value pairs in dictionary A with string B into a single string	"""""""B"""""".join([(str(k) + ' ' + str(v)) for kBv in list(A.items())])"
Strip all non-ASCII characters from a unicode string, A	print(set(re.sub('[\x00-\x7f]', '', 'A')))
Get all non-ascii characters in a unicode string A	print(re.sub('[\x00-\x7f]', '', 'A'))
build a dict of key:value pairs from a string representation of a dict, A	"ast.literal_eval(""A"")"
Print string A with proper unicode representations	print(A.decode('unicode_escape'))
Normalize string A from B code to C code	print(A.encode(B).decode(C).encode(B).decode(C))
merge lists A and B into a list of tuples	zip(A, B)
merge lists A and A into a list of tuples	list(zip(A, b))
convert pandas DataFrame A to a dictionary using B field as the key	A.set_index('B').to_dict()
convert pandas dataframe A with fields B, C to dictionary	A.set_index(B)[C].to_dict()
Can I sort text by its numeric value in Python?	sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))
remove parentheses and text within it in string A	re.sub('\\([^)]*\\)', '', A)
Check if string A only contains letters and spaces	"""""""A"""""".replace(' ', '').isalpha()"
sum each element A in list B with element C at the same index in list D.	[(A + C) for A, C in zip(B, D)]
sort a python dictionary A by element B of the value	sorted(list(A.items()), key=lambda item: item[B][B])
How to exclude a character from a regex group?	re.compile('[^a-zA-Z0-9-]+')
get index of the biggest 2 values of a list A	sorted(list(range(len(A))), key=lambda i: A[i])[-2:]
get indexes of the largest A values from a list B using itemgetter	zip(*sorted(enumerate(B), key=operator.itemgetter(1)))[0][-A:]
get the indexes of the largest A values from a list of integers B	sorted(list(range(len(B))), key=lambda i: B[i], reverse=True)[:A]
get index of key A in dictionary B	list(B.keys()).index(A)
Print +1 using format A	print(A.format(score))
remove adjacent duplicate elements from a list A	[k for k, g in itertools.groupby(A)]
split string A based on delimiter B	"""""A"""".split(B)"
convert the string A to a list of integers	[int(x) for x in A.split(',')]
convert list of key-value tuples A into dictionary	dict(A)
save numpy array A into text file B	np.savetxt(B, A)
store the output of command A in variable B	B = subprocess.check_output(A, shell=True)
get all column name of dataframe A except for column B	A[df.columns - [B]]
get count of values in numpy array A that are between values B and C	((B < A) & (A < C)).sum()
Get day name from a datetime object	date.today().strftime('%A')
Python regular expression match whole word	re.search('\\bis\\b', your_string)
Jinja parse datetime object A to use format pattern B	{{A | B}}
Get the date object A of object B in string  format C	{{B.A.strftime(C)}}
make a flat list from list of lists A	[item for A in l for item in A]
make a flat list from list of lists A	list(itertools.chain(*A))
make a flat list from list of lists A	list(itertools.chain.from_iterable(A))
convert ascii value A to int	ord(A)
replace white spaces in string A with empty string B	re.sub('(?m)^[^\\S\\n]+', B, A)
remove white spaces from all the lines using a regular expression in string A	re.sub('(?m)^\\s+', '', A)
destruct elements of list A to variables B, C and D	B, C, D = A
split list A into a list of lists whose elements have the same first five characters	[list(v) for k, v in itertools.groupby(A, key=lambda x: x[:5])]
remove all instances of parenthesesis containing text beginning with A from string B	B = re.sub('\\(+A.*?\\) ', '', B)
skip the newline while printing A	print(A.rstrip('\n'))
get index values of pandas dataframe A as list	A.index.values.tolist()
check if list A is empty	if (not A):<nl>    pass
check if list A is empty	if (not A):<nl>    pass
check if list A is empty	if (len(A) == 0):<nl>    pass
create a list containing the indices of elements greater than 4 in list A	[i for i, v in enumerate(A) if v > 4]
reverse list A	sorted(A, reverse=True)
sort list of nested dictionaries A in reverse based on values associated with each dictionary's key 'subkey'	sorted(A, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)
sort list of nested dictionaries A in reverse order of B and C	A.sort(key=lambda e: e[B][C], reverse=True)
remove decimal points in pandas data frame using round	df.round()
Get data from matplotlib plot	gca().get_lines()[n].get_xydata()
get the maximum 2 values per row in array A	A[:, -2:]
Get value for  A parameter in GET request  in Django	request.GET.get('A', '')
pretty-print ordered dictionary A	pprint(dict(list(A.items())))
Confirm urls in Django properly	url('^$', include('sms.urls')),
Configure url in django properly	url('^', include('sms.urls')),
get the tuple in list A that has the largest item in the second index	max_item = max(A, key=operator.itemgetter(1))
find tuple in list of tuples A with the largest second element	max(A, key=operator.itemgetter(1))
resample series A into 3 months bins and sum each bin	A.resample('3M', how='sum')
extract elements at indices (1, 2, 5) from a list A	[A[i] for i in (1, 2, 5)]
filter lines from a text file A which contain a word B	[line for line in open(A) if B in line]
convert a date string A to a datetime object	datetime.datetime.strptime(A, '%Y-%m-%dT%H:%M:%SZ')
reading tab-delimited csv file A with pandas on mac	pandas.read_csv(A, sep='\t', lineterminator='\r')
replace only first occurence of string A from a string B	'B'.replace('A', '?', 1)
zip file A using its basename as directory name	archive.write(A, os.path.basename(A))
create a dictionary of pairs from a list of tuples A	dict(x[1:] for x in reversed(A))
subtract elements of list A from elements of list B	[(x1 - x2) for x1, x2 in zip(A, B)]
check if string A starts with a number	A[0].isdigit()
Check if string A starts with any of the elements in list (B, C, D, E, F, G, H, I, J, K)	A.startswith((B, C, D, E, F, G, H, I, J, K))
print script's directory	print(os.path.dirname(os.path.realpath(__file__)))
split string A by the occurrences of regex pattern B	re.split(B, A)
Make a scatter plot using unpacked values of list A	plt.scatter(*zip(*A))
rearrange tuple of tuples A	tuple(zip(*A))
Get average for every three columns in A dataframe	A.groupby(np.arange(len(A.columns)) // 3, axis=1).mean()
convert a list A of ascii values to a string	""""""""""""".join(chr(i) for i in A)"
count the number of pairs in dictionary A whose value equal to B	sum(x == B for x in list(A.values()))
count the number of values in A dictionary that are predicate to function B	sum(1 for x in list(A.values()) if B(x))
convert double 0.00582811585976 to float	struct.unpack('f', struct.pack('f', 0.00582811585976))
convert datetime.date A to utc timestamp	timestamp = (A - datetime(1970, 1, 1)).total_seconds()
sort column A in panda dataframe B	B.sort('A')
Sort a data A in descending order based on the B attribute of elements using lambda function	A = sorted(A, key=lambda x: x.B, reverse=True)
print the truth value of A	print(bool(A))
rename A row index label in dataframe B to C	B = B.rename(index={A: 'C'})
Fit Kmeans function to a one-dimensional array A by reshaping it to be a multidimensional array of single values	km.fit(A.reshape(-1, 1))
Sort a list of strings A such that items starting with B come first.	sorted(A, key=lambda x: 'a' + x if x.startswith(B) else 'b' + x)
open the login site A in the browser	webbrowser.open(A)
fetch all elements in a dictionary A, falling between two keys 2 and 4	dict((k, v) for k, v in A.items() if 2 < k < 4)
fetch all elements in a dictionary A where the key is between the range of 2 to 4	dict((k, v) for k, v in A.items() if k > 2 and k < 4)
sort two lists A and B together using lambda function	[list(x) for x in zip(*sorted(zip(A, B), key=lambda pair: pair[0]))]
get the number of values in list A that is greater than 5	sum(((i > 5) for i in A))
get the number of values in list A that is greater than 5	len([1 for i in A if (i > 5)])
get the number of values in list A that is greater than B	A = np.array(A)<nl>sum((A > B))
zip list A, B, C into a list of tuples	[(x + tuple(y)) for x, y in zip(zip(A, B), C)]
changing permission of file A to B	os.chmod(A, B)
argparse associate zero or more arguments with flag A	parser.add_argument(A, nargs='*')
get a list of booleans A that shows wether the corresponding items in list B and C are equal	A = [(i == j) for i, j in zip(B, C)]
create a list which indicates whether each element in A and B is identical	[(A[i] == B[i]) for i in range(len(A))]
Python: Extract numbers from a string	"[int(s) for s in re.findall('\\b\\d+\\b', ""he33llo 42 I'm a 32 string 30"")]"
create an empty data frame A with index from another data frame B	A = pd.DataFrame(index=B.index)
unpack first and second bytes of byte string A into integer	struct.unpack('h', A[0:2])
print list A into a table-like shape	print('\n'.join('  '.join(map(str, row)) for row in A))
Sort Pandas Dataframe by Date	df.sort_values(by='Date')
check if a checkbox is checked in selenium python webdriver	driver.find_element_by_name('<check_box_name>').is_selected()
determine if checkbox with id A is checked in selenium python webdriver	driver.find_element_by_id(A).is_selected()
replace A with B in the list `[0, 1, 0, 3]`	[(a if a else B) for a in [A, 1, A, 3]]
Produce a string that is suitable as Unicode literal from string A	A.encode().decode('unicode-escape')
Parse a unicode string A	'A'.decode('unicode-escape')
convert Unicode codepoint to utf8 hex	chr(int('fd9b', 16)).encode('utf-8')
use upper case letters to print hex value A	print('0x%X' % A)
get a list A that contains all non-empty elements in list B	A = [x for x in B if x]
create a slice object using string A	slice(*[(int(i.strip()) if i else None) for i in A.split(':')])
Find all the tags A and B from Beautiful Soup object C	C.find_all(['A', 'B'])
get the name of function A as a string	print(A.__name__)
convert dictionary A into string	""""""""""""".join('{}{}'.format(key, val) for key, val in sorted(A.items()))"
convert dictionary A into string	""""""""""""".join('{}{}'.format(key, val) for key, val in list(A.items()))"
copy list A as B	B = A[:]
copy list A as B	B = list(A)
copy list A as B	B = copy.copy(A)
deep copy list A as B	B = copy.deepcopy(A)
make a copy of list A	[i for i in A]
remove frame of legend in plot A	A.legend(frameon=False)
Print a emoji from a string A having surrogate pairs	"""""""A"""""".encode('utf-16', 'surrogatepass').decode('utf-16')"
calling a function named A in the module	globals()[A]()
Check the status code of url A	urllib.request.urlopen('A').getcode()
Check the status code of url A	conn = httplib.HTTPConnection('A')<nl>conn.request('HEAD', '/')<nl>r1 = conn.getresponse()<nl>print(r1.status, r1.reason)
Check the status code of url A	r = requests.head(A)<nl>return (r.status_code == 200)
Checking if website A is up	print(urllib.request.urlopen('A').getcode())
Selenium A click a hyperlink with the pattern B	A.find_element_by_css_selector(B).click()
store data frame A to file B using pandas, python	A.to_pickle(B)
calculate the mean of columns with same name in dataframe A	A.groupby(by=A.columns, axis=1).mean()
sort list A by each element's attribute B and attribute C in reverse order	A.sort(key=lambda x: (x.B, x.C), reverse=True)
get alpha value A of a png image B	A = B.split()[-1]
How to get the length of words in a sentence?	[len(x) for x in s.split()]
BeautifulSoup find tag A with styling B in HTML string C	C.findAll(A, style=B)
Execute SQL statement A with values of dictionary B as parameters	cursor.execute(A, list(B.values()))
Convert CSV file A to Pandas dataframe using separator B	df.to_csv('A', index=False, sep=B)
update the A dictionary with the contents of the B dictionary	A.update(B)
find all substrings in A beginning and ending with square brackets	re.findall('\\[(.*?)\\]', A)
Format all floating variables A, B, C, A to print to two decimal places.	print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (A, B, C, var4))
Remove all items from a dictionary A where the values are less than `1`	A = dict((k, v) for k, v in A.items() if v > 0)
Filter dictionary A to have items with value greater than 0	A = {k: v for k, v in list(A.items()) if v > 0}
convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe	pd.to_datetime(pd.Series(date_stngs))
get  value at index A in dataframe B	B.ilocA
change the font size on plot A to 22	A.rcParams.update({'font.size': 22})
converting dictionary A into a dataframe B with keys as data for column C and the corresponding values as data for column D	B.DataFrame(list(A.items()), columns=[C, D])
create a dataframe containing the multiplication of element-wise in dataframe A and dataframe B using index name and column labels of dataframe A	pd.DataFrame(A.values * B.values, columns=A.columns, index=A.index)
extract floating number from string A	re.findall('\\d+\\.\\d+', A)
extract floating point numbers from a string A	re.findall('[-+]?\\d*\\.\\d+|\\d+', A)
pair each element in list A 3 times into a tuple	zip(A, A, A)
lowercase a python dataframe string in column A if it has missing values in dataframe B	B[A].str.lower()
append dict A to value of key B in dict C	C['B'].append(A)
Concat a list of strings A using string formatting	""""""""""""".join(A)"
sum values greater than 0 in dictionary A	sum(v for v in list(A.values()) if v > 0)
run flask application A in debug mode.	A.run(debug=True)
drop rows whose index value in list A in dataframe B	B.drop(B.index[A], inplace=True)
replace nan values in a pandas data frame with the average of columns	df.apply(lambda x: x.fillna(x.mean()), axis=0)
extract attribute A from each object in list B	[o.A for o in B]
python get time stamp on file A in B format	time.strftime(B, time.gmtime(os.path.getmtime(A)))
check if dictionary A is a subset of dictionary B	all(item in list(B.items()) for item in list(A.items()))
Convert integer elements in list A to strings	[str(wi) for wi in A]
Reset the indexes of a pandas data frame	df2 = df.reset_index()
format datetime in A as string in format B	A.strftime(B')
format floating point number  A to be rounded off to two decimal places and have a comma thousands' seperator	print('Total cost is: ${:,.2f}'.format(A))
sum the values in each row of every two adjacent columns in dataframe A	A.groupby(np.arange(len(A.columns)) // 2 + 1, axis=1).sum().add_prefix('s')
create list A with 10 random floating point numbers between 0.0 and 1.0	A = [random.random() for _ in range(10)]
find href value that has string 'follow?page' inside it	print(soup.find('a', href=re.compile('.*follow\\?page.*')))
immediately see output of print statement that doesn't end in a newline	sys.stdout.flush()
get a random key A and value B form a dictionary C	A, B = random.choice(list(C.items()))
split string A into a list of characters	list('A')
Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'	[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]
Validate IP address using Regex	pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')
execute file A	exec(compile(open(A).read(), A, 'exec'))
SQLAlchemy count the number of rows with distinct values in column A of table B	session.query(B).distinct(B.A).group_by(B.A).count()
remove null columns in a dataframe A	A = A.dropna(axis=1, how='all')
check if all lists in list A have three elements of integer 1	all(x.count(1) == 3 for x in A)
Get a list comparing two lists of tuples A and B if any first value in A matches with first value in B	[x[0] for x in A if any(x[0] == y[0] for y in B)]
clear the textbox `text` in tkinter	tex.delete('1.0', END)
Convert long int A into date and time represented in the the string format B	datetime.datetime.fromtimestamp(A).strftime(B)
Spawn a process to run python script A in C++	system('python A')
sort a list A of class objects by their values for the attribute B	A.sort(key=operator.attrgetter('B'))
sort list A by the B attribute of each object	A.sort(key=lambda x: x.B)
convert a tensor with list of constants A into a numpy array in tensorflow	print(type(tf.Session().run(tf.constant(A))))
convert list A from being consecutive sequences of tuples into a single sequence of elements	list(itertools.chain(*A))
Set value for key A in dict B to C if key A does not exist or if value is `none`	B.setdefault('A', C)
Do group by on A column in B and get its mean	B.groupby(['A']).mean()
get number in list A closest in value to number B	min(A, key=lambda x: abs(x - B))
check if any of the items in  A appear in B	any(x in B for x in A)
search for occurrences of regex pattern A in string B	print(A.search(B).group(1))
factorize all string values in dataframe A into floats	(A.factorize()[0] + 1).astype('float')
Get a list A by subtracting values in one list B from corresponding values in another list C	C = [(a - b) for a, b in zip(C, B)]
derive the week start for the given week number and year ‘2011, 4, 0’	datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')
convert a list of strings A to a list of numbers	map(int, A)
"create datetime object from ""16sep2012"""	datetime.datetime.strptime('16Sep2012', '%d%b%Y')
update fields in Django model A with arguments in dictionary B where primary key is equal to C	A.objects.filter(C=pk).update(**B)
update the fields in django model A using dictionary B	A.objects.create(**B)
print a digit A with exactly 2 digits after decimal	print('{0:.2f}'.format(A))
generate a 12-digit random number	random.randint(100000000000, 999999999999)
generate a random 12-digit number	int(''.join(str(random.randint(0, 9)) for _ in range(12)))
generate a random 12-digit number	""""""""""""".join(str(random.randint(0, 9)) for _ in range(12))"
generate a 12-digit random number	'%0.12d' % random.randint(0, 999999999999)
remove specific elements in a numpy array A	numpy.delete(A, index)
sort list A based on values of dictionary `trail_dict`	sorted(A, key=lambda x: trial_dict[x])
read a single character from stdin	sys.stdin.read(1)
get a list of characters in string A matching regex pattern B	print(re.findall(B, A))
get the context of a search by keyword A in beautifulsoup B	k = B.find(text=re.compile(A)).parent.text
convert rows in pandas data frame A into list	A.apply(lambda x: x.tolist(), axis=1)
convert a 1d A array to a 2d array B	B = np.reshape(A, (-1, 2))
run app A on host B and port 9000 in Flask	A.run(host=B, port=9000, debug=False)
encode unicode string A to utf-8 code	print(A.encode('UTF8'))
get the first element of each tuple from a list of tuples A	[x[0] for x in A]
regular expression matching all but A and B for string C	re.findall('-(?!A-|B-)([^-]+)', C)
regular expression matching all but A and B	re.findall('-(?!A|B)([^-]+)', string)
remove false entries from a dictionary A	{k: v for k, v in list(A.items()) if v}
Get a dictionary from a dictionary A where the values are present	dict((k, v) for k, v in A.items() if v)
sort list A based on the value of variable B for each object in list A	sorted(A, key=operator.itemgetter(B))
sort a list of objects A by a member variable B	A.sort(key=operator.attrgetter(B))
sort a list of objects A where the object has member number variable B	A.sort(key=lambda x: x.B)
join multiple dataframes `d1`, `d2`, and `d3` on column A	df1.merge(df2, on=A).merge(df3, on=A)
generate random Decimal	decimal.Decimal(random.randrange(10000)) / 100
list all files of a directory A	onlyfiles = [f for f in listdir(A) if isfile(join(A, f))]
list all files of a directory A	f = []<nl>for (dirpath, dirnames, filenames) in walk(A):<nl>    f.extend(filenames)<nl>    break
list all A files of a directory B	print(glob.glob('B*A'))
list all files of a directory A	os.listdir('A')
execute sql query A with all parameters in list B	cur.executemany(A, B)
get keys with same value in dictionary A	print([key for key in A if A[key] == 1])
get keys with same value in dictionary A	print([key for key, value in A.items() if value == 1])
Get keys from a dictionary A where the value is B.	print([key for key, value in list(A.items()) if value == B])
create list of A empty strings	strs = ['' for x in range(A)]
generate pdf file A from markdown file B	with open(B, 'r') as f:<nl>    html_text = markdown(f.read(), output_format='html4')<nl>pdfkit.from_string(html_text, A)
remove duplicate dict in list A	[dict(t) for t in set([tuple(d.items()) for d in A])]
Set time zone A in Django	TIME_ZONE = 'A'
append A to list value of B in dictionary C, or create key B with value A in a list if it does not exist	C.setdefault(B, []).append(A)
Group the values from django model A with group by value B and annotate by C	A.objects.values('B').annotate(article_count=Count('C'))
clear Tkinter Canvas A	A.delete('all')
Initialize a pandas series object A with columns B	A = pd.Series(B)
None	datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')
sort list A using the first dimension of the element as the key to list B	A.sort(key=lambda x: B.index(x[0]))
How to sort a list according to another list?	a.sort(key=lambda x_y: b.index(x_y[0]))
Save plot A as png file B	A.savefig(B)
Save matplotlib graph to image file A at a resolution of `300 dpi`	plt.savefig('A', dpi=300)
get output from process A	A.communicate()[0]
How to get output of exe in python script?	output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]
searche in HTML string for elements that have text A	soup.body.findAll(text=A)
BeautifulSoup find string A in HTML body B	soup.B.findAll(text=A)
Sort items in dictionary A  using the first part of the key after splitting the key	sorted(list(A.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))
create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]	set([1, 2, 3]) ^ set([3, 4, 5])
Get a list values of a dictionary item A from post requests in django	request.POST.getlist('A')
Filter duplicate entries w.r.t. value in A from a list of dictionaries B	list(dict((x[A], x) for x in B).values())
Get pandas GroupBy object with sum over the rows with same column names within  dataframe A	A.groupby(A.columns, axis=1).sum()
convert the zip of range A and range B into a dictionary	dict(zip(list(rangeA), list(rangeB)))
Get all indexes of boolean numpy array where boolean value A is True	numpy.where(A)
case insensitive comparison of strings A and B	if (A.lower() == B.lower()):<nl>    print('The strings are the same (case insensitive)')<nl>else:<nl>    print('The strings are not the same (case insensitive)')
case insensitive string comparison between A and B	if (A.lower() == B.lower()):<nl>    pass
case insensitive string comparison between A and B	(A.lower() == B.lower())
case insensitive string comparison between A and B	(A.lower() == B.lower())
case insensitive comparison between strings A and B	(A.upper() == B.upper())
Taking the results of a bash command A	os.system(A)
remove multiple values from a list A at the same time with index starting at B and ending just before C.	del A[B:C]
convert a string A to its base-10 representation	int(A.encode('hex'), 16)
match regex pattern A on string B	re.findall(A, B)
sort a set A by numerical value	sorted(A, key=float)
convert an int 65 to hex string	hex(65)
append a pandas series A to the series B and get a continuous index	B.append(A).reset_index(drop=True)
simple way to append a pandas series A and B with same index	pd.concat([A, B], ignore_index=True)
Get a list of tuples with multiple iterators using list comprehension	[(i, j) for i in range(1, 3) for j in range(1, 5)]
reverse sort items in dictionary A by value	sorted(iter(A.items()), key=itemgetter(1), reverse=True)
select the last business day of the month for each month in 2014 in pandas	pd.date_range('1/1/2014', periods=12, freq='BM')
disable the certificate check in https requests for url A	requests.get('A', verify=False)
return dataframe A with last row dropped	A.ix[:-1]
check if A is in string B	if ('A' not in B):<nl>    pass
check if string A is in B	if (A in B):<nl>    pass
check if string A is in string	string.find('A')
check if string A contains B	"if (A.find('B') == (-1)):<nl>    print(""No 'B' here!"")<nl>else:<nl>    print(""Found 'B' in the string."")"
extract first and last row of a dataframe A	pd.concat([A.head(1), A.tail(1)])
filter a Django model A to have charfield length of max `255`	A.objects.extra(where=['CHAR_LENGTH(text) > 254'])
Filter queryset for all objects in Django model A where texts length are greater than B	A.objects.filter(text__regex='^.{B}.*')
count the number of rows with missing values in a pandas dataframe A	sum(A.apply(lambda x: sum(x.isnull().values), axis=1) > 0)
Sorting while preserving order in python	sorted(enumerate(a), key=lambda x: x[1])
set the font A of size 12 for a canvas' text item B	canvas.create_text(x, y, font=(A, 12), text=B)
create a list containing all values associated with key A in dictionaries of list B using list comprehension	[y[A] for x in B for y in x['bar']]
read pandas data frame csv A with extra commas in column specifying string delimiter B	"df = pd.read_csv(BAB, quotechar=""B"")"
replace string A with B in dataframe C column D	C[D] = C[D].str.replace(A, B)
Get all indexes of a list A where each value is greater than B	[i for i in range(len(A)) if A[i] > B]
check if a local variable A exists	('A' in locals())
check if a global variable A exists	('A' in globals())
check if object A has attribute B	hasattr(A, B)
check if a local variable A exists	if (A in locals()):<nl>    pass
check if a global variable A exists	if (A in globals()):<nl>    pass
lambda function that adds two operands	lambda x, y: x + y
count the number of items in a generator/iterator A	sum(1 for i in A)
get tuples of the corresponding elements from lists A and B	[(x, B[i]) for i, x in enumerate(A)]
create tuples containing elements that are at the same index of list A and list B	[(i, j) for i, j in zip(A, B)]
get tuples from lists A and B using list comprehension in python 2	[(A[i], B[i]) for i in range(len(A))]
convert hex triplet string A to rgb tuple	struct.unpack('BBB', A.decode('hex'))
Check if 3 is not in a list [2, 3, 4]	(3 not in [2, 3, 4])
Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]	((2, 3) not in [(2, 3), (5, 6), (9, 1)])
Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), A]	((2, 3) not in [(2, 7), (7, 3), 'A'])
Check if 3 is not in the list [4,5,6]	(3 not in [4, 5, 6])
create a list by appending components from list A and reversed list B interchangeably	[value for pair in zip(A, B[::-1]) for value in pair]
delete the last column of numpy array A and assign resulting array to B	B = np.delete(A, -1, 1)
commit all the changes after executing a query.	dbb.commit()
join two dataframes based on values in selected columns	pd.merge(a, b, on=['A', 'B'], how='outer')
set text color as A and background color as B in qpushbutton	setStyleSheet('QPushButton {background-color: B; color: A;}')
find the mean of elements in list A	sum(A) / float(len(A))
Find all the items from a dictionary A if the key contains the string B	[(k, v) for k, v in A.items() if 'B' in k]
Get a md5 hash from string A	k = hashlib.md5('A').hexdigest()
How to get only the last part of a path in Python?	os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
sort datetime objects A by B and C	A.sort(key=lambda d: (d.B, d.C))
extract table data from table A using beautifulsoup	[[td.findNext(text=True) for td in tr.findAll('td')] for tr in A]
strip the string A from anywhere in the string `Boat.txt.txt`	"""""""BoatAA"""""".replace('A', '')"
get a list of the row names from index of a pandas data frame	list(df.index)
get the row names from index in a pandas data frame	df.index
create a list of all unique characters in string A	""""""""""""".join(list(OrderedDict.fromkeys(A).keys()))"
get list of all unique characters in a string A	list(set(A))
List of all unique characters in a string?	""""""""""""".join(set('aaabcabccd'))"
find rows with non zero values in a subset of columns where A is not equal to B in pandas dataframe	df.loc[(df.loc[:, (A != B)] != 0).any(1)]
upload file with Python Mechanize	br.form.add_file(open(filename), 'text/plain', filename)
check if  dictionary A contains all keys in list B	all(word in A for word in B)
hide output of subprocess A	subprocess.check_output(A, stderr=subprocess.STDOUT)
replace nans by preceding values in pandas dataframe A	A.fillna(method='ffill', inplace=True)
create 4 numbers in range between 1 and 3	print(np.linspace(1, 3, num=4, endpoint=False))
Create numpy array of A numbers starting from B with interval of C	print(np.linspace(B, C, num=A))
create a symlink directory A for directory B with unicode support using ctypes library	kdll.CreateSymbolicLinkW('A', 'B', 1)
get a list A of array slices of the first two rows and columns from array B	A = [B[i][0:2] for i in range(0, 2)]
upload uploaded file from path A to Google cloud storage B bucket	upload_url = blobstore.create_upload_url(A, gs_bucket_name=B)
change directory to the directory of a python script	os.chdir(os.path.dirname(__file__))
call a function with argument list A	func(*A)
split column A in dataframe B into two columns by first whitespace C	B[A].str.split(C, 1, expand=True)
pandas dataframe, how do i split a column A into two B and C on delimiter D	df[B], df[C] = df[A].str.split(D, 1).str
sort list A based on the length of its elements	print(sorted(A, key=len))
sort list A in ascending order of length of elements	A.sort(lambda x, y: cmp(len(x), len(y)))
sort list of strings A by the length of string	A.sort(key=lambda s: len(s))
plot point marker A on series B	B.plot(marker=A)
get all combination of n binary values	lst = list(itertools.product([0, 1], repeat=n))
get all combination of n binary values	lst = map(list, itertools.product([0, 1], repeat=n))
get all combination of 3 binary values	bin = [0, 1]<nl>[(x, y, z) for x in bin for y in bin for z in bin]
get all combination of 3 binary values	lst = list(itertools.product([0, 1], repeat=3))
append string A at the beginning of each value in column B of dataframe C	C[B] = A + C[B].astype(str)
get a dict of variable names A as a string and their values	dict((name, eval(name)) for name in A)
add a colorbar to plot A using image B on axes C	A.colorbar(B, C=ax)
convert nested list A into a flat list	[a for c in A for b in c for a in b]
create a list containing keys of dictionary A and sort it alphabetically	sorted(A, key=A.get)
print the number of occurences of not `none` in a list A in Python 2	print(len([x for x in A if x is not None]))
lookup dictionary key A in Django template B	{{B.A}}
remove duplicates from list A	mynewlist = list(A)
get unique values from the list A	set(A)
set size of A to landscape A4 i.e. B inches	A(figsize=(B))
get every thing after last A	url.rsplit('A', 1)
get everything after last slash in a url stored in variable A	A.rsplit('/', 1)[-1]
open file A in directory B	x_file = open(os.path.join(B, A), 'r')
create a list with the characters of a string A	list('A')
concatenate a list of numpy arrays A together into a flattened list of values	np.concatenate(A).ravel().tolist()
convert dictionary A into a flat list	print([y for x in list(A.items()) for y in x])
Convert a dictionary A into a list with key and values as list items.	[y for x in list(A.items()) for y in x]
get a random record from model A using django's orm	A.objects.order_by('?').first()
change current working directory to directory A	os.chdir(A)
change current working directory	os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')
change current working directory	os.chdir('.\\chapter3')
create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`	dict((key, sum(d[key] for d in dictList)) for key in dictList[0])
sort pandas data frame A using values from columns B and C in ascending order	A.sort(['B', 'C'], ascending=[True, True])
Converting string lists A to float list	floats = [float(x) for x in A.split()]
Converting string lists A to float list	floats = map(float, A.split())
set labels A on axis X in plot B	B.xticks(A)
read line by line from stdin	for line in fileinput.input():<nl>    pass
read line by line from stdin	for line in sys.stdin:<nl>    pass
check if string A exists in the values of dictionary B	'A' in list(B.values())
Check if value A is among the values of dictionary B	A in iter(B.values())
call parent class A of child class constructor	super(A, self).__init__(name, year)
create a dictionary using two listsA and B	dict(zip(A, B))
sort a list of dictionaries A by dictionary values in descending order	sorted(A, key=lambda i: list(i.values())[0], reverse=True)
sorting a list of dictionary A by values in descending order	sorted(A, key=dict.values, reverse=True)
Use multiple groupby and agg operations A, B, C for pandas data frame D	D.groupby(level=0).agg(['A', 'B', 'C'])
for a dictionary A, set default value for key B as list and append value C  in that key	A.setdefault('B', []).append('C')
sum values in list of dictionaries A with key B	sum(item[B] for item in A)
get a sum of all values from key A in a list of dictionary B	sum([item['A'] for item in B])
Get all the values in key A summed from a list of dictionary B	sum(item['A'] for item in B)
writing string A to file B	B.write(A)
Write a string A to a file B including new line character	B.write('A\n')
find consecutive segments from a column A in a pandas data frame B	B.reset_index().groupby(A)['index'].apply(np.array)
get a relative path of file A into variable B	B = os.path.join(os.path.dirname(__file__), A)
retrieve an element from a set A without removing it	e = next(iter(A))
execute a command in the command prompt to list directory contents of the c drive `c:\\'	os.system('dir c:\\')
Make a auto scrolled window to the end of the list in gtk	self.treeview.connect('size-allocate', self.treeview_changed)
check if 3 is inside list A	3 in A
Represent DateTime object A with format B into format C	datetime.datetime.strptime(A, B).strftime(C)
convert a string literal A with values `\\` to raw string literal	A = A.replace('\\', '\\\\')
get output of script A	print(A.communicate()[0])
create a pandas data frame from list of nested dictionaries A	pd.concat([pd.DataFrame(l) for l in A], axis=1).T
delete all columns in  DataFrame A that do not hold a non-zero value in its records	A.loc[:, ((A != 0).any(axis=0))]
sort a multidimensional array A by column with index 1	sorted(A, key=lambda x: x[1])
split string A to list conversion by B	[x.strip() for x in A.split(B)]
Get a list of items in the list A with attribute equal to B	items = [item for item in A if item.attribute == B]
create a file A with each tuple in the list B written to a line	open(A, 'w').write('\n'.join('%s %s' % x for x in B))
Get multiple matched strings using regex pattern A	pattern = re.compile('A', re.IGNORECASE)
read a text file A into a string variable B	B = open(A, 'r').read()
Return values for column A after group by on column B and C in dataframe D	D.groupby(['C', 'C'])['C'].unique()
read file A line by line into a list B	with open(A) as f:<nl>    B = f.readlines()
read file A line by line into a list B	with open(A) as f:<nl>    B = f.readlines()
read file A line by line into a list B	B = [line.rstrip('\n') for line in open(A)]
read file A line by line into a list B	with open('A', 'r') as ins:<nl>    B = []<nl>    for line in ins:<nl>        B.append(line)
convert the dataframe column A from string types to datetime types	df[A] = pd.to_datetime(df[A])
get a list of the keys in each dictionary in a dictionary of dictionaries A	[k for d in list(A.values()) for k in d]
get user input using message A and insert it to the first placeholder in string B	print(B.format(input(A)))
create pandas data frame A from txt file B with column C and separator D	A = pd.read_csv('B', sep='D', names=['C'])
Pandas: How can I use the apply() function for a single column?	df['a'] = df['a'].apply(lambda x: x + 1)
get the platform OS name	platform.system()
sort list A in ascending order based on its elements' float values	A = sorted(A, key=lambda x: float(x))
finding words in string A after keyword B	re.search('B (.*)', A)
Find all records from collection A without extracting mongo id B	db.A.find({}, {'B': False})
Get all the second values from a list of lists A	[row[1] for row in A]
extract first column from a multi-dimensional array A	[row[0] for row in A]
sort list A in ascending order based on the integer value of its elements	sorted(A, key=int)
check if file A is descendant of directory B	os.path.commonprefix([B, os.path.realpath(A)]) == B
check if any element of list A are in string B	any(substring in B for substring in A)
construct pandas dataframe from a list of tuples	df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])
find and replace 2nd occurrence of word A by B in a sentence C	re.sub('^((?:(?!A).)*A(?:(?!A).)*)A', '\\1Bull', C)
find and replace 2nd occurrence of word A by B in a sentence C	re.sub('^((.*?A.*?){1})A', '\\1Bull', C)
sort list of strings in list A by integer suffix	sorted(A, key=lambda k: int(k.split('_')[1]))
sort list of strings A by integer suffix before B	sorted(A, key=lambda x: int(x.split('B')[1]))
make a list of lists in which each list A are the elements from list B which have the same characters up to the first C character	[list(A) for C, A in itertools.groupby(B, lambda x: x.split('C')[0])]
How to group similar items in a list?	[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]
Load the url A in selenium webdriver B	B.get('A')
using python's datetime module, get the year that utc-11 is currently in	(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
Get the difference between two lists A and B that may have duplicate values	Counter(A) - Counter(B)
remove tags from a string A	re.sub('<[^>]*>', '', A)
encode string A as B	A.encode('B')
filter `Users` by field A with level greater than or equal to B	User.objects.filter(A__level__gte=B)
BeautifulSoup find a tag whose id ends with string A	soup.findAll(id=re.compile('A$'))
select A tags whose Bs begin with C	"soup.select('A[B^=""C""]')"
delete an item A in a list B if it exists	cleaned_list = [x for x in B if x is not A]
print A to console, and read user input to B	B = input('A')
append 4 to list A	A.append(4)
append a list [8, 7] to list A	A.append([8, 7])
insert 77 to index 2 of list A	A.insert(2, 77)
remove white space padding around a saved image A in matplotlib	plt.savefig('A', bbox_inches='tight')
concatenate lists A and B	(A + B)
iterate items in lists A and B	for item in itertools.chain(A, B):<nl>    pass
create dataframe A containing data of dataframe B where column C is equal to D and column E is equal to 2014	A = B[(B[C] == D) & (B[E] == 2014)]
print backslash	print('\\')
replace A in pandas dataframe B with C	B.replace(A, C)
delete column A from dataframe B	B = B.drop(A, 1)
delete 1st, 2nd and 4th columns from dataframe A	A.drop(A.columns[[0, 1, 3]], axis=1)
delete a column A without having to reassign from pandas data frame B	B.drop('A', axis=1, inplace=True)
disable abbreviation in argparse	parser = argparse.ArgumentParser(allow_abbrev=False)
extract dictionary values by key A from data frame B	feature3 = [d.get(A) for d in B.dic]
get data of column A and column B in dataframe C where column A is equal to E	C.loc[gb.groups[E], (D, B)]
print '[1, 2, 3]'	print('[%s, %s, %s]' % (1, 2, 3))
Display `1 2 3` as a list of string	print('[{0}, {1}, {2}]'.format(1, 2, 3))
get values from a dictionary A whose key contains the string B	[v for k, v in list(A.items()) if 'B' in k]
Python date string formatting	"""""""{0.month}/{0.day}/{0.year}"""""".format(my_date)"
drop a single subcolumn A in column B from a dataframe C	C.drop((B, A), axis=1)
dropping all columns named A from a multiindex B, across all level.	B.drop(A, level=1, axis=1)
build dictionary with keys of dictionary A as keys and values of returned value of function B with correlating key as parameter	{_key: B(_key) for _key in A}
click on the text button A using selenium python	browser.find_element_by_class_name(A).click()
combine two dictionaries `d ` and A, concatenate string values with identical B	dict((k, d.get(k, '') + A.get(k, '')) for k in B)
generate unique equal hash for equal dictionaries A and B	hash(pformat(A)) == hash(pformat(B))
convert nested list of lists A into a list of tuples	list(map(tuple, A))
sum the column A along the  other columns B, C, D in a pandas data frame E	E.groupby(['B', 'C', 'D'], as_index=False)['A'].sum()
Summing across rows of Pandas Dataframe	df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()
change string A to upper case	A.upper()
split a string A by B and convert to a dictionary	dict(item.split('=') for item in A.split(B))
Add header A to mechanize browser B	B.addheaders = [A]
set data in column A of dataframe B equal to first element of each list	B[A] = B[A].str[0]
get element at index 0 of each list in column A of dataframe B	B[A] = B[A].str.get(0)
remove square bracket A from pandas dataframe B column C	B[C] = B[C].str.strip(A)
Get a string with string formatting from dictionary A	""""""", """""".join(['{}_{}'.format(k, v) for k, v in A.items()])"
Sum of sums of each list, in a list of lists named A.	sum(sum(x) for x in A)
Check whether a numpy array A contains a given row B	any(np.equal(A, B).all(1))
check if all elements in list A are the same	len(set(A)) == 1
split a string A at line breaks B	[map(int, x.split('\t')) for x in A.rstrip().split('B')]
sort a dictionary A by values that are list type	t = sorted(list(A.items()), key=lambda x: x[1])
Search for string A in txt file B	if (A in open(B).read()):<nl>    pass
Search for string A in txt file B	f = open(B)<nl>s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)<nl>if (s.find(A) != (-1)):<nl>    pass
Search for string A in txt file B	datafile = file(B)<nl>found = False<nl>for line in datafile:<nl>    if (A in line):<nl>        return True<nl>return False
insert string A after each character of B	B.replace('', A)[len(A):-len(A)]
getting every possible combination of two elements in a list	list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))
get a utf-8 string literal representation of byte string A	"""""""A = {}"""""".format(A.decode('utf8')).encode('utf8')"
check if A is an integer	isinstance(A, int)
check if A is an integer	(type(A) == int)
play the wav file A	winsound.PlaySound(A, winsound.SND_FILENAME)
create a list containing the A next values of generator B	[next(B) for _ in range(A)]
get list of n next values of a generator A	list(itertools.islice(A, 0, n, 1))
compare two lists in python A and B and return matches	set(A).intersection(B)
How can I compare two lists in python and return matches	[i for i, j in zip(a, b) if i == j]
convert list A into a string of its elements	print(''.join(map(str, A)))
match regex pattern A on string B	re.match(A, B)
import a nested module `c.py` within A within B with importlib	importlib.import_module('.c', 'B.A')
import a module A with importlib.import_module in python 2	importlib.import_module(A)
Convert array A to numpy array	A = np.array(A)
Find all A tags whose classes has the value B in a beautiful soup object C	C.find_all('A', class_=re.compile('B'))
a sequence of empty lists of length A	[[] for _ in range(A)]
create dictionary from list of variables A and B already defined	dict((k, globals()[k]) for k in (A, B))
get two random records from model A in Django	A.objects.order_by('?')[:2]
Print a dictionary A with string formatting	"""""""Hello {user[name]}"""""".format(**A)"
create a dictionary A containing each tuple in list B as values and the tuple's first element as the corresponding key	A = {t[0]: t for t in B}
Generate a random integer between 0 and 9	randint(0, 9)
Generate a random integer between A and B	random.randint(A, B)
Generate random integers between 0 and 9	print((random.randint(0, 9)))
reverse a string A by 2 characters at a time	""""""""""""".join(reversed([A[i:i + 2] for i in range(0, len(A), 2)]))"
transform time series A into a pivot table aggregated by column B using column `df.index.date` as index and values of column `df.index.time` as columns	pd.pivot_table(A, index=A.index.date, columns=A.index.time, values=B)
check if the third element of all the lists in a list A is equal to zero.	any(item[2] == 0 for item in A)
Find all the lists from a lists of list A if third element in all sub-lists is B	[x for x in A if x[2] == B]
sort dictionary of dictionaries A according to the key B	sorted(list(A.items()), key=lambda x: x[1][B], reverse=True)
plot a data logarithmically in y axis	plt.yscale('log', nonposy='clip')
extract digits in a simple way from a python string	map(int, re.findall('\\d+', s))
list the contents of a directory A	os.listdir(A)
list all the contents of the directory A.	os.listdir(A)
merge a pandas data frame A and column B in pandas data frame C into single	pd.concat([A, C.B], axis=1)
get value of first index of each element in list A	[x[0] for x in A]
python how to get every first element in 2 dimensional list A	[i[0] for i in A]
remove line breaks from string A using regex	re.sub('(?<=[a-z])\\r?\\n', ' ', A)
Open gzip-compressed file encoded as utf-8 A in text mode	gzip.open(A, 'rt', encoding='utf-8')
test if either of strings A or B are members of the set of strings, `['b', 'a', 'foo', 'bar']`	set(['A', 'B']).issubset(['B', 'A', 'foo', 'bar'])
Check if all the values in a list A are present in another list B	all(x in B for x in A)
Remove characters A from a string B	B.translate(None, 'A')
Remove characters A from a string B	B = re.sub('[A]', '', B)
Remove string A from string B	B.replace('A', '')
Remove character A from a string B	B = B.replace(A, '')
Remove characters in `b` from a string A	A = A.replace(char, '')
Remove characters in A from a string B	B = B.translate(string.maketrans('', ''), A)
binarize the values in columns of list A in a pandas data frame	pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[A]
store integer 3, 4, 1 and 2 in a list	[3, 4, 1, 2]
define global variable A with value B	globals()['A'] = 'B'
insert spaces before capital letters in string A	re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', A)
print unicode string A in uppercase	print('A'.upper())
get last element of string splitted by '\\' from list of strings A	[l.split('\\')[-1] for l in A]
combine two sequences into a dictionary	dict(zip(keys, values))
customize the time format in python logging	formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')
Replace comma with dot in a string A using regex	"new_string = re.sub('""(\\d+),(\\d+)""', '\\1.\\2', A)"
call a function A inside a bash script B using subprocess	subprocess.call('B A')
Can a python script execute a function inside a bash script?	subprocess.Popen(['bash', '-c', '. foo.sh; go'])
remove multiple spaces in a string A	""""""" """""".join(A.split())"
convert decimal 8 to a list of its binary values	list('{0:0b}'.format(8))
convert decimal integer 8 to a list of its binary values as elements	[int(x) for x in list('{0:0b}'.format(8))]
convert decimal A to binary list	[int(x) for x in bin(A)[2:]]
get key-value pairs in dictionary A for all keys in list B in the order they appear in B	dict(zip(B, map(A.get, B)))
cartesian product of A and B array points into single array of 2d points	numpy.dstack(numpy.meshgrid(A, B)).reshape(-1, 2)
selenium wait for driver A 60 seconds before throwing a NoSuchElementExceptions exception	A.implicitly_wait(60)
selenium webdriver switch to frame A	driver.switch_to_frame(A)
format current date to pattern A	time.strftime(A)
sort list A	sorted(A)
find all occurrences of regex pattern A in string B	re.findall(A, B)
remove duplicate rows from dataframe A and calculate their frequency	A.groupby(['key', 'year']).size().reset_index()
sort dictionary A in ascending order by its values	sorted(list(A.items()), key=operator.itemgetter(1))
Iterate over dictionary A in ascending order of values	sorted(iter(A.items()), key=lambda x: x[1])
iterate over a python dictionary, ordered by values	sorted(list(dictionary.items()), key=lambda x: x[1])
split 1d array A into 2d array at the last element	np.split(A, [-1])
convert dataframe A into a pivot table using column B as index and values of column C as columns	A.pivot(index=B, columns=C)
select all rows from pandas DataFrame A where the value in column B is greater than 1 or less than -1 in column C.	A[(A[B] > 1) | (A[C] < -1)]
Get the zip output as list from the lists A, B, C	[list(a) for a in zip(A, B, C)]
select rows of dataframe A whose value for column B is C	print(B.loc[B['B'] == 'C'])
select rows whose column value in column A does not equal B in pandas data frame	df.loc[df['A'] != B]
select rows from a dataframe A whose value for column B is not in C	A.loc[~A['B'].isin(C)]
select all rows whose values in a column A equals a scalar B in pandas data frame object C	C.loc[C['A'] == B]
Select rows whose value of the A column is B or C in the DataFrame D	print(D.loc[D['A'].isin(['B', 'C'])])
repeat every character for 7 times in string A	""""""""""""".join(map(lambda x: x * 7, A))"
delete an empty directory	os.rmdir()
recursively delete all contents in directory A	shutil.rmtree(A, ignore_errors=False, onerror=None)
recursively remove folder A	os.removedirs(A)
Add row A to dataframe B	B.loc[len(B)] = A
list all files in a current directory	glob.glob('*')
List all the files that doesn't contain the name A	glob.glob('[!A]*.txt')
List all the files that matches the pattern A	glob.glob('A')
evaluate the expression A	eval(A)
Copy list A and name it B	B = [x[:] for x in A]
convert scientific notation of variable A to decimal	"""""""{:.50f}"""""".format(float(A[0] / A[1]))"
convert dataframe A to integer-type sparse object	A.to_sparse(0)
display attribute A for each object B in list C	print([B.A for B in C])
count the number of True values associated with key A in dictionary B	sum(1 if B[A] else 0 for B in s)
get the sum of values associated with the key ‘success’ for a list of dictionaries A	sum(d['success'] for d in A)
get complete path of a module named A	imp.find_module('A')[1]
get logical xor of A and B	(bool(A) != bool(B))
get logical xor of A and B	((A and (not B)) or ((not A) and B))
get logical xor of A and B	(bool(A) ^ bool(B))
get logical xor of A and B	xor(bool(A), bool(B))
get the logical xor of two variables A and B	return (bool(A) ^ bool(B))
Sort list A in alphabetical order based on the values associated with key B of each dictionary in the list	A.sort(key=operator.itemgetter(B))
split a string A  using both commas and semicolons as delimeters	re.split('\\s*,\\s*|\\s*;\\s*', 'A')
Split a string A by multiple separators B and C	[t.strip() for s in A.split('B') for t in s.split('C')]
make a function A that calculates the sum of two integer variables B and C	A = lambda B, C: B + C
Create list A containing 29 objects of type MyClass	A = [MyClass() for i in range(29)]
"Make a dictionary from list A which is in the format of four sets of  ""val, key, val"""	{A[i + 1]: [A[i], A[i + 2]] for i in range(0, len(A), 3)}
convert bytes string A  to an unsigned integer	struct.unpack('>q', A)[0]
concatenate a series A onto a dataframe B with pandas	pd.concat([A, pd.DataFrame(B)], axis=1)
Sort list A in ascending order based on each of its elements' attribute B	A.sort(key=lambda x: x.B)
BeautifulSoup select A elements with an id attribute value ending with sub-string B in HTML parsed string C	C.select('A[id$=B]')
sympy solve matrix of linear equations A with variables B	linsolve(MatrixA, B)
best way to extract subset of key-value pairs with keys matching A, B, or C from python dictionary object	{k: bigdict[k] for k in list(bigdict.keys()) & {A, B, C}}
extract subset of key-value pairs with keys as A from dictionary object B	dict((k, B[k]) for k in A)
Get items from a dictionary A where the keys are present in B	{k: A.get(k, None) for k in B}
Extract subset of key value pair for keys A, B, C from D in python 3	{k: D[k] for k in (A, B, C)}
Selenium get the entire A page text	A.page_source
extracting column A and B from array C	C[:, ([A, B])]
remove all square brackets from string A	re.sub('\\[.*?\\]', '', A)
How can I resize the root window in Tkinter?	root.geometry('500x500')
find all substrings in string A composed only of letters B and C where each B is directly preceded and succeeded by C	re.findall('\\C(?:C+B)+C+\\C', A)
convert list A of tuples of floats to list B of tuples of strings of floats in scientific notation with eight decimal point precision	B = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in A]
convert list of sublists A of floats to a list of sublists B of strings of integers in scientific notation with 8 decimal points	B = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in A]
Create a tuple A containing first element of each tuple in tuple B	A = tuple(x[0] for x in B)
obtain the current day of the week in a 3 letter format from a datetime object	datetime.datetime.now().strftime('%a')
get the ASCII value of a character A as an int	ord(A)
get the ASCII value of a character u'あ' as an int	ord('\u3042')
get the ASCII value of a character as an int	ord()
decode JSON string A to a dictionary	json.load(A)
Delete mulitple columns A, B in pandas data frame C	C.drop(['A', 'B'], axis=1, inplace=True)
get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string A	[A.strip() for A in input().split(',')]
create a list containing the digits values from binary string A as elements	[int(d) for d in str(bin(A))[2:]]
get the max string length in list A	max(len(word) for word in A)
get the maximum string length in nested list A	len(max(A, key=len))
execute os command A	os.system(A)
sort list A alphabetically	A.sort(key=lambda x: x.lower())
sort list A in alphabetical order	A.sort(key=str.lower)
sort a list of strings A.	A.sort()
sort a list of strings A	A.sort()
Set multi index on columns A and B of data frame C in pandas.	C.set_index([A, B], inplace=True)
get the attribute A from object B	getattr(B, A)
remove first word in string A	A.split(' ', 1)[1]
save xlsxwriter file in A path and assign to variable B	B = xlsxwriter.Workbook(A)
save xlsxwriter file to A path	workbook = xlsxwriter.Workbook(A)
change legend size to A in upper-left location	pyplot.legend(loc=2, fontsize=A)
change legend font size with matplotlib.pyplot to 6	plot.legend(loc=2, prop={'size': 6})
split list A into B sized lists	[A[i:i + B] for i in range(0, len(A), B)]
split a list A into evenly sized chunks B	[A[i:i + B] for i in range(0, len(A), B)]
check if character A exists in a dataframe B cell C	B[C].str.contains(A)
remove all non -word, -whitespace, or -apostrophe characters from string A	"re.sub(""[^\\w' ]"", '', ""A"")"
find all digits between two characters A and Bin a string C	print(re.findall('\\d+', '\n'.join(re.findall('A([\\s\\S]*?)B', C))))
plot data of column A versus column B of dataframe C after resetting its index	C.reset_index().plot(x=A, y=B)
get the output of a subprocess command A in command line	subprocess.check_output('A', shell=True)
Encode each value to A in the list B	[x.encode(A) for x in B]
combine two columns A and B in a pandas data frame	pandas.concat([df['A'].dropna(), df['B'].dropna()]).reindex_like(df)
generate a list of consecutive integers from 0 to 8	list(range(9))
convert list A into a unicode string	""""""""""""".join(chr(i) for i in A)"
inherit from class A	super(A, self).__init__(*args)
Remove the string value A from a list of strings B	[A for A in B if A != 'A']
randomly select an item from list A	random.choice(A)
check if all of the following items in list A are in a list B	set(A).issubset(B)
Check if all the items in a list A exists in another list B	set(A).issubset(set(B))
set the stdin of the process 'grep f' to be bA	p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)<nl>grep_stdout = p.communicate(input=A)[0]
set the stdin of the process 'grep f' to be A	p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)<nl>p.stdin.write(A)<nl>p.communicate()[0]<nl>p.stdin.close()
to convert a list of tuples A into list of lists	[list(t) for t in zip(*A)]
group a list A of tuples by values	zip(*A)
merge pandas dataframe A with columns B and C and dataframe D with column 'y'	pd.merge(D, A, on='k')[[B, C, 'D']]
Split string with comma (,) and remove whitespace from a string A	[item.strip() for item in A.split(',')]
Get all object attributes of object A	print((A.__dict__))
Get all object attributes of an object	dir()
Get all object attributes of an object	dir()
pygobject center window A	A.set_position(Gtk.WindowPosition.CENTER)
change the size of the sci notation to A above the y axis in matplotlib B	B.rc('font', **{'size': A})
check if datafram A has any NaN vlaues	A.isnull().values.any()
unpack the arguments out of list A to function B	B(*A)
decode encodeuricomponent in GAE	urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')
get proportion of rows in dataframe A whose values for column B are greater than 0	(A['B'] > 0).mean()
convert a set of tuples A to a string B	B = '\n'.join(item[0] for item in A)
convert a set of tuples A to a list of strings	[item[0] for item in A]
convert a list of tuples A to a string from the first indexes.	emaillist = '\n'.join([item[0] for item in A])
get the widget which has currently the focus in tkinter instance A	print(('focus object class:', A.focus_get().__class__))
Initialize a list A with B items and each item's value C	A = [C] * B
Keep only unique words in list of words A and join into string	print(' '.join(sorted(set(A), key=A.index)))
generate 6 random numbers between 1 and 50	random.sample(range(1, 50), 6)
generate six unique random numbers in the range of 1 to 49.	random.sample(range(1, 50), 6)
lowercase keys and values in dictionary A	{k.lower(): v.lower() for k, v in list(A.items())}
lowercase all keys and values in dictionary A	dict((k.lower(), v) for k, v in A.items())
Convert each key,value pair in a dictionary A to lowercase	dict((k.lower(), v.lower()) for k, v in A.items())
sorting the lists in list of lists A	[sorted(item) for item in A]
SQLite get a list of column names from cursor object A	names = list(map(lambda x: x[0], A.description))
get the absolute path of a running python script	os.path.abspath(__file__)
sort 2d array A by row with index 1	sorted(A, key=itemgetter(1))
Get all indexes of a letter A from a string B	[index for index, letter in enumerate(B) if letter == 'A']
decode utf-8 code A into a raw unicode literal	print(str(A).decode('raw_unicode_escape'))
split string A into a list of characters	re.findall('\\w', A)
check whether a file A exists	os.path.isfile(A)
check whether file A exists	my_file = Path('A')<nl>if my_file.is_file():<nl>    pass
check whether file A exists	os.path.exists(A)
check whether a file A exists	print(os.path.isfile('A'))
check whether a file A exists	print(os.path.isfile('A'))
check whether a path A exists	print(os.path.exists('A'))
check whether a file A exists	print(os.path.isfile('A'))
check whether a path A exists	print(os.path.exists('A'))
check whether a path A exists	print(os.path.exists('A'))
split string A on delimiters B and C	"""""A"""".replace(B, ' ').replace(C, ' ').split()"
get a list each value A in the implicit tuple B	list(A for A in B)
add field names as headers in csv constructor A	A.writeheader()
flatten a tuple A	[(a, b, c) for a, (b, c) in A]
convert 3652458 to string represent a 32bit hex number	"""""""0x{0:08X}"""""".format(3652458)"
convert a python dictionary A to a list of tuples	[(v, k) for k, v in list(A.items())]
convert dictionary of pairs A to a list of tuples	[(v, k) for k, v in A.items()]
convert python 2 dictionary A to a list of tuples where the value is the first tuple element and the key is the second tuple element	[(v, k) for k, v in A.items()]
convert a python dictionary A to a list of tuples	[(k, v) for k, v in A.items()]
convert a list of hex byte strings A to a list of hex integers	[int(x, 16) for x in A]
convert the elements of list A from hex byte strings to hex integers	[int(x, 16) for x in A]
assign values to two variables, A and B from user input response to C split on whitespace	A, B = input(C').split()
Filter a json from a key-value pair as A in Django	Test.objects.filter(actions__contains=[A])
create a list containing a four elements long tuples of permutations of binary values	itertools.product(list(range(2)), repeat=4)
get yesterday's date as a string in `YYYY-MM-DD` format using timedelta	(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')
Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`	np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])
convert date strings in pandas dataframe columnA to pandas timestamps using the format B	A = pd.to_datetime(A, format=B)
Importing file A from folder B	sys.path.insert(0, B)<nl>import A
do a A merge of dataframes B and C on the column D and sort by E	B.reset_E().merge(C, how='A', on='D', sort=False).sort('E')
Create a default empty json object if no json is available in request parameter A	json.loads(request.POST.get('A', '{}'))
get a list of tuples of every three consecutive items in list A	list(zip(*((iter(A),) * 3)))
slice list A into lists of two elements each	list(grouper(2, A))
Slicing a list into a list of sub-lists	[input[i:i + n] for i in range(0, len(input), n)]
Sort list A based on its elements' dot-seperated numbers	A.sort(key=lambda x: map(int, x.split('.')))
Sort a list of integers A where each value is in string format	A.sort(key=lambda x: [int(y) for y in x.split('.')])
convert a 3d array A of dimensions 4x2x3 to a 2d array   of dimensions 3x8	A.transpose(2, 0, 1).reshape(3, -1)
replacing A and B values in column C of dataframe D with E	D[C].replace([A, B], E)
replace values A in a column B of  pandas dataframe C with another value D	C[B] = C[B].replace(A, D)
Subtract the mean of each row in dataframe A from the corresponding row's elements	A.sub(A.mean(axis=1), axis=0)
remove all non-alphabet chars from string A	""""""""""""".join([i for i in A if i.isalpha()])"
split a string A into integers	l = (int(x) for x in A.split())
split a string A by white spaces.	"""""""A"""""".split()"
How to split a string into integers in Python?	map(int, '42 0'.split())
get indexes of all true boolean values from a list A	[i for i, elem in enumerate(A, 1) if elem]
group dataframe A entries by year value of the date in column B	A.groupby(A[B].map(lambda x: x.year))
Get the indices in array A of each element appearing in array B	np.in1d(A, B).nonzero()[0]
display current time in readable format	time.strftime('%l:%M%p %z on %b %d, %Y')
rotate x-axis text labels of plot A 45 degrees	A.set_xticklabels(A.xaxis.get_majorticklabels(), rotation=45)
append array of strings A into one string	""""""""""""".join(A)"
retrieve all items in an numpy array A except the item of the index 1	A[(np.arange(A.shape[0]) != 1), :, :]
pull a value with key A from a json object B	print(B[A])
read a file from redirected stdin and save to variable A	A = sys.stdin.read()
Get all the texts without tags from beautiful soup object A	""""""""""""".join(A.findAll(text=True))"
extract all rows from dataframe A where the value of column B is True	A[data[B] == True]
removing duplicate characters from a string variable A	""""""""""""".join(set(A))"
sort objects in model A based on Theirs B attribute	sorted(A.objects.all(), key=lambda p: p.B)
flatten a dataframe df to a list	df.values.flatten()
sort list A using values associated with key B according to elements in list C	A.sort(key=lambda x: C.index(x[B]))
sort a python list of dictionaries A by a given list B of ids C with the desired order	A.sort(key=lambda x: B.index(x[C]))
request URI A and pass authorization token B to the header	r = requests.get(A, headers={'Authorization': B})
un-escape a backslash-escaped string in A	"print('""A""'.decode('string_escape'))"
match regex pattern A on string B with DOTALL enabled	re.findall(A, B, re.DOTALL)
get second array column length of array A	A.shape[1]
use operations like max/min within a row to a dataframe A in pandas	A.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)
count number of occurrences of a substring A in a string B	"""""B"""".count(A)"
get a list of values with key A from a list of dictionaries B	[d[A] for d in B if A in d]
get a list of values for key A from a list of dictionaries B	[d[A] for d in B]
get a list of values for key A from a list of dictionaries in B	[d['A'] for d in B]
order a list of lists A by the first value	A.sort(key=lambda x: int(x[0]))
order a list of lists A by the first value of individual list	sorted(A)
replace a string A in case sensitive way using maketrans	"""""""A"""""".translate(maketrans('abcABC', 'defDEF'))"
dictionary A to string, custom format	"""""""<br/>"""""".join([('%s:: %s' % (key, value)) for key, value in list(A.items())])"
how to write a unicode csv in Python 2.7	self.writer.writerow([str(s).encode('utf-8') for s in row])
clear terminal screen on windows	os.system('cls')
clear the terminal screen in Linux	os.system('clear')
execute external commands/script A with csh instead of bash	os.system('tcsh A')
execute command A in Z shell	"os.system(""zsh -c A"")"
update a list A dictionaries with a key B and value from list C	[dict(d, B=n) for d, n in zip(A, C)]
create a list with the sum of respective elements of the tuples of list A	[sum(x) for x in zip(*A)]
sum each value in a list A of tuples	map(sum, zip(*A))
count the number of non-nan elements in a numpy ndarray matrix A	np.count_nonzero(~np.isnan(A))
Convert each list in list A into a tuple	map(list, zip(*A))
django get the value of key A from POST request B if exists, else return empty string C	B.POST.get(A, C)
check if string A ends with one of the strings from a tuple B	"""""""A"""""".endswith(B)"
split a string A by space while ignoring spaces within square braces and quotes.	"re.findall('\\[[^\\]]*\\]|""[^""]*""|\\S+', A)"
get biggest 3 values from each column of the pandas dataframe A	A.apply(lambda x: sorted(x, 3))
permanently set the current directory to the A	os.chdir(A)
get all characters between two A characters in string B	re.findall('\\A([^A]*)\\A', B)
getting the string between 2 A characters in '$sin (x)$ is an function of x'	re.findall('\\A(.*?)\\A', 'Asin (x)A is an function of x')
Format a date object `str_data` into iso fomrat	datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
get element at index 0 of first row and element at index 1 of second row in array A	A[[0, 1], [0, 1]]
subset numpy array A by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.	A[np.arange(3), (0, 1, 0)]
Get a list of all keys from dictionary A where the number of occurrences of value B in that key is more than C	[k for k, v in A.items() if v.count('B') > C]
Create sub matrix of a list of lists A (without numpy)	A
get an element at index `[1,1]`in a numpy array A	print(A[1, 1])
Set colorbar range from A to B for pyplot object C in matplotlib	C.set_clim(vmin=A, vmax=B)
read csv file A into numpy array	my_data = genfromtxt(A, delimiter=',')
read csv file A into array	df = pd.read_csv(A, sep=',', header=None)
read csv file A into array	np.genfromtxt(A, delimiter=',')
read csv file A into array	np.genfromtxt(A, delimiter=',', dtype=None)
read the first line of a string A	A.splitlines()[0]
How do I read the first line of a string?	my_string.split('\n', 1)[0]
generate a list from a pandas dataframe A with the column name and column values	A.values.tolist()
Replace repeated instances of a character A with a single instance in a string B	re.sub('\\*\\*+', A, B)
replace repeated instances of A with a single instance of A	re.sub('\\A+', 'A', text)
multiply values of dictionary A with their respective values in dictionary B	A((k, v * B[k]) for k, v in list(dict1.items()) if k in B)
Get a random string of length A	return ''.join(random.choice(string.lowercase) for i in range(A))
Get total number of values in a nested dictionary A	sum(len(x) for x in list(A.values()))
count all elements in a nested dictionary A	sum(len(v) for v in A.values())
apply logical operator 'AND' to all elements in list A	all(A)
removing vowel characters A from string B	""""""""""""".join(c for c in B if c not in A)"
Divide elements in list A from elements at the same index in list B	[(x / y) for x, y in zip(A, B)]
match regex A on string B	re.findall(A, B)
apply function A to the grouped values by B in dataframe C	C.groupby(B).apply(lambda x: np.mean(np.A(x['v'])))
get geys of dictionary A that contain any values from list B	[key for key, value in list(A.items()) if set(value).intersection(B)]
get list of keys in dictionary A whose values contain values from list B	[key for item in B for key, value in list(A.items()) if item in value]
Sum elements of tuple A to their respective elements of each tuple in list B	c = [[(i + j) for i, j in zip(e, A)] for e in B]
get the common prefix from comparing two absolute paths A and B	os.path.commonprefix([A, B])
get relative path of path A regarding path B	print(os.path.relpath(B, A))
filter dataframe A where the length of each group B is bigger than 1	A.filter(lambda B: len(B) > 1)
sort dictionary of lists A by the third item in each list	sorted(list(A.items()), key=lambda e: e[1][2])
Format string A to be interspersed by B three times, specifying the value as C only once	"""""""A"""""".format(B='C')"
reorder indexed rows A based on a list in pandas data frame B	B.reindex(A)
check if any values in a list A is a list	any(isinstance(el, list) for el in A)
get the size of list A	len(A)
get the size of a list `[1,2,3]`	len([1, 2, 3])
get the size of object A	A.__len__()
function to get the size of object	len()
get the size of list A	len(A)
sort each row in a pandas dataframe A in descending order	A.sort(axis=1, ascending=False)
Fastest way to sort each row in a pandas dataframe	df.sort(df.columns, axis=1, ascending=False)
get count of rows in each series grouped by column A and column B of dataframe C	C.groupby([A, B]).size().groupby(level=1).max()
check if string A is  in list `[A, 'd', 'a', 's', 'd', 's']`	A in [A, 'd', 'a', 's', 'd', 's']
Delete an item with key A from B	B.pop('A', None)
Delete an item with key A from B	del B[A]
Delete an item with key A from B	try:<nl>    del B[A]<nl>except KeyError:<nl>    pass<nl>try:<nl>    del B[A]<nl>except KeyError:<nl>    pass
specify multiple positional arguments with argparse	parser.add_argument('input', nargs='+')
Plot using the color code A in matplotlib pyplot	pyplot.plot(x, y, color='A')
strip html from strings	re.sub('<[^<]+?>', '', text)
align values in array A to the order of corresponding values in array B	B[np.in1d(B, A)]
split string A on the first occurrence of delimiter B	"""""A"""".split(B, 1)"
print numbers in list A with precision of 3 decimal places	print('[%s]' % ', '.join('%.3f' % val for val in A))
format print output of list of floats A to print only up to 3 decimal points	print('[' + ', '.join('%5.3f' % v for v in A) + ']')
print a list of floating numbers A using string formatting	print([('%5.3f' % val) for val in A])
Change the current directory one level up	os.chdir('..')
print a unicode string A	print(A.encode('windows-1252'))
convert string representation A of binary string rep of integer to floating point number	struct.unpack('d', struct.pack('Q', int(A, 0)))[0]
convert a binary A to a float number	float(int(A, 0))
convert a binary A to a float number	struct.unpack('d', A)[0]
plot a bar graph from the column 'color' in the DataFrame A	A.colour.value_counts().plot(kind='bar')
plot categorical data in series A with kind B using pandas and matplotlib	A.groupby('colour').size().plot(kind='B')
strip and split each line A on white spaces	A.strip().split(' ')
apply functions A and B to each column in dataframe C	C.groupby(lambda idx: 0).agg(['A', 'B'])
sort dictionary A in reverse order by values cast to integers	sorted(list(A.items()), key=lambda x: int(x[1]), reverse=True)
find the largest integer less than A	int(math.ceil(A)) - 1
check if the string A is empty	if (not A):<nl>    pass
check if string A is empty	if (not A):<nl>    pass
check if string A is empty	if (not A):<nl>    pass
check if string `my_string` is empty	if some_string:<nl>    pass
iterate over a dictionary A in sorted order	it = iter(sorted(A.items()))
iterate over a dictionary A in sorted order	for (key, value) in sorted(A.items()):<nl>    pass
iterate over a dictionary A in sorted order	return sorted(A.items())
iterate over a dictionary A in sorted order	return iter(sorted(A.items()))
iterate over a dictionary A in sorted order	for (k, v) in sorted(A.items()):<nl>    pass
iterate over a dictionary A sorted by the key	for k in sorted(A.keys()):<nl>    pass
assign the index of the last occurence of A in list B to the variable C	C = len(B) - B[::-1].index(A) - 1
concatenating values in A to a string	str1 = ''.join(A)
concatenating values in list A to a string, separate by space	' '.join((str(x) for x in A))
concatenating values in A to a string	str1 = ''.join((str(e) for e in A))
concatenating values in list A to a string	makeitastring = ''.join(map(str, A))
remove None value from list A	[x for x in A if x is not None]
select a random element from array A	random.choice(A)
creating a 5x6 matrix filled with A and save it as B	B = [[A for _ in range(5)] for _ in range(6)]
create a new 2D array with 2 random rows from array A	A[(np.random.choice(A.shape[0], 2, replace=False)), :]
create a new 2 dimensional array containing two random rows from array A	A[(np.random.randint(A.shape[0], size=2)), :]
combining rows in pandas by adding their values	df.groupby(df.index).sum()
find all `owl:Class` tags by parsing xml with namespace	root.findall('{http://www.w3.org/2002/07/owl#}Class')
generate a random string of length A  containing lower cased ASCII letters	""""""""""""".join(random.choice(string.lowercase) for A in range(X))"
add a path A to system path	sys.path.append('A')
round number A to nearest integer	int(round(A))
round number A to nearest integer	A = int(round(A))
round number 32.268907563 up to 3 decimal points	round(32.268907563, 3)
round number A up to B decimal places	round(A, B)
round number 1.0005 up to 3 decimal places	round(1.0005, 3)
round number 2.0005 up to 3 decimal places	round(2.0005, 3)
round number 3.0005 up to 3 decimal places	round(3.0005, 3)
round number 4.0005 up to 3 decimal places	round(4.0005, 3)
round number 8.005 up to 2 decimal places	round(8.005, 2)
round number 7.005 up to 2 decimal places	round(7.005, 2)
round number 6.005 up to 2 decimal places	round(6.005, 2)
round number 1.005 up to 2 decimal places	round(1.005, 2)
fill missing value in one column A with the value of another column B	df[A].fillna(df[B])
convert the argument A with string formatting in logging	logging.info('A=%s', A)
Log message of level A with value of B in the message	logging.A('B={}'.format(B))
convert values in dictionary A into integers	{k: int(v) for k, v in A.items()}
sum elements at the same index of each list in list A	map(sum, zip(*A))
Convert a string A containing hex bytes to a hex string	A.decode('hex')
convert a string A containing hex bytes to a hex string	binascii.a2b_hex(A)
send data 'HTTP/1.0 200 OK\r\n\r\n' to socket A	A.send('HTTP/1.0 200 established\r\n\r\n')
send data A to socket B	B.send(A)
set the value of cell A equal to 10 in dataframe B	dfA = 10
normalize the dataframe A along the rows	np.sqrt(np.square(A).sum(axis=1))
remove identical items from list A and sort it alphabetically	sorted(set(A))
find the index of the element with the maximum value from a list A.	max(enumerate(A), key=lambda x: x[1])[0]
create a list where each element is a value of the key A for each dictionary B in the list C	[B[A] for B in C]
create a list of tuples with the values of keys A and B from each dictionary C in the list D	[(C[A], C[B]) for C in D]
grab one random item from a database A in django/postgresql	A.objects.all().order_by('?')[0]
run python script A from another python script, passing in 1 as an argument	os.system('A 1')
python regex for hyphenated words in A	re.findall('\\w+(?:-\\w+)+', A)
create variable key/value pairs with argparse	parser.add_argument('--conf', nargs=2, action='append')
Get A unique items from a list	random.sample(list(range(1, 16)), A)
sort list A in alphabetical order based on the letter after percent character B in each element	A.sort(key=lambda str: re.sub('.*B(.).*', '\\1', str))
sort a list of strings A based on regex match	A.sort(key=lambda str: re.sub('.*%', '', str))
Create list A containing 3 empty lists	A = [[] for i in range(3)]
sort numpy float array A column by column	A = np.array(sorted(A, key=tuple))
Get a list from two strings A and B with values as each character concatenated	[(x + y) for x in 'A' for y in 'B']
trim string A	'A'.strip()
trim string `myString `	myString.strip()
Trimming a string A	'A'.strip()
Trimming a string A	'A'.strip()
Trimming a string A	'A'.strip()
Trimming a string A	'A'.strip()
Trimming a string A	A.strip()
Trimming A from string B	B.strip('A')
left trimming A from string B	B.lstrip('A')
right trimming A from string B	B.rstrip('A')
Trimming a string A by space	'A'.strip(' ')
sort a list of tuples A based on two elements, second and third	sorted(A, key=lambda element: (element[1], element[2]))
decode string A to UTF-8 code	print(A.decode('utf8'))
find the index of the maximum value in the array A where the boolean condition in array B is true	np.ma.array(np.tile(A, 2).reshape(2, 3), mask=~B).argmax(axis=1)
convert a dataframe A's column B into datetime, after removing the first and last 3 letters	pd.to_datetime(A.B.str[1:-3])
read CSV file A into a dataframe B with datatype of float for column C considering character D as NaN value	B = pd.read_csv(A, dtype={C: np.float64}, na_values=[D])
convert nan values to ‘n/a’ while reading rows from a csv A with pandas	df = pd.A('my.csv', na_values=['n/a'])
create a list containing all cartesian products of elements in list A	list(itertools.product(*A))
remove uppercased characters in string A	re.sub('[^A-Z]', '', A)
convert string A into a DateTime object using format B	datetime.strptime(A, B)
read file A using encoding B	codecs.open(A, 'r', B).read()
create a list containing elements from list A that are predicate to function B	[B(x) for x in A]
regex matching 5-digit substrings not enclosed with digits in A	re.findall('(?<!\\d)\\d{5}(?!\\d)', A)
create a list containing elements of list A if the sum of the element is greater than 10	[item for item in A if sum(item) > 10]
convert currency string A to decimal B	B = int(round(float(A.strip('$')) * 100))
remove letters from string A if the letter exist in list B	""""""""""""".join(dropwhile(lambda x: x in B, A[::-1]))[::-1]"
Creating an empty list A	A = []
Creating an empty list A	A = list()
Creating an empty list	list()
Creating an empty list	[]
properly quit a program	sys.exit(0)
add string A in `4th` position of a string B	B[:4] + 'A' + B[4:]
append 3 lists in one list	[[] for i in range(3)]
Initialize a list of empty lists A of size 3	A = [[] for i in range(3)]
request URL A using http header B	requests.get(A, headers=B)
set the y axis range to A in subplot using pylab	pylab.ylim([A])
convert a column of list in series A to dummies	pd.get_dummies(A.apply(pd.Series).stack()).sum(level=0)
Finding the largest delta between two integers in a list in python	max(abs(x - y) for x, y in zip(values[1:], values[:-1]))
convert a hex string A to string	y = str(int(A, 16))
check if string A is an integer	A.isdigit()
function to check if a string is a number	isdigit()
check if string A is a number	A.isdigit()
pandas read comma-separated CSV file A and skip commented lines starting with B	pd.read_csv(StringIO(A), sep=',', comment=B)
pandas: change all the values of a column A into B	df[A] = df[A].apply(lambda x: B)
sum a list of numbers A	sum(A)
Get an item from a list of dictionary A which has maximum value in the key B using lambda function	max(A, key=lambda x: x['B'])
BeautifulSoup find all tags with attribute A equal to B	soup.findAll(attrs={A: B})
remove all spaces from a string converted from dictionary A	str(A).replace(': ', ':').replace(', ', ',')
convert dictionary `dict` into a string formatted object	'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'
concatenate items from list A into a string starting from the second element	""""""""""""".join(A[1:])"
insert a character A into a string in front of B character in second part of the string	"""""""A+"""""".join(c.rsplit(BA 1))"
delete all rows in a numpy array A where any value in a row is zero B	A[np.all(A != B, axis=1)]
extract only alphabetic characters from a string A	""""""" """""".join(re.split('[^a-zA-Z]*', 'A'))"
Extract only characters from a string as a list	re.split('[^a-zA-Z]*', 'your string')
get the union set from list of lists A	results_union = set().union(*A)
get the union of values in list of lists A	return list(set(itertools.chain(*A)))
check if a numpy array A contains any element of another array B	np.any(np.in1d(A, B))
removing control characters from a string A	return ''.join(ch for ch in A if unicodedata.category(ch)[0] != 'C')
Compare if each value in list A is less than respective index value in list B	all(i < j for i, j in zip(A, B))
python selenium click on button A	driver.find_element_by_css_selector(A).click()
python selenium click on button	driver.find_element_by_css_selector('.button .c_button .s_button').click()
kill a process A from python script on windows	os.system('taskkill /im A')
SQLAlchemy select records of columns of table A in addition to current date column	print(select([A, func.current_date()]).execute())
remove duplicate characters from string A	re.sub('([a-z])\\1+', '\\1', A)
remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string A using regular expressions	re.sub('(?<!\\w)([A-Z])\\.', '\\1', A)
Get a list of strings `split_text` with fixed chunk size A from a string B	split_list = [B[i:i + A] for i in range(0, len(B), A)]
"match string A with regex B
then replace it with regex C"	re.sub(B, C, A)
output data of the first 7 columns of Pandas dataframe	pandas.set_option('display.max_columns', 7)
Display maximum output data of columns in dataframe A that will fit into the screen	A.set_option('display.max_columns', None)
set the value in column A to NaN if the corresponding value in column B is equal to 0 in pandas dataframe C	C.ix[C.B == 0, B] = np.nan
Selecting Element A followed by text B with Selenium WebDriver C	"C.find_element_by_xpath(""A[contains(..,'B')]"")"
Sort a list of dictionaries A by keys B and C	A.sort(key=operator.itemgetter('B', 'C'))
ordering a list of dictionaries A by elements B and C	A.sort(key=lambda d: (d[B], d[C]))
Convert a list of lists A to a dictionary with key as second value of a list and value as list itself	{x[1]: x for x in A}
sort keys of dictionary A based on their values	sorted(A, key=lambda k: A[k][1])
round 123 to 100	int(round(123, -2))
create file A if file A does not exist	fd = os.open(A, os.O_WRONLY | os.O_CREAT | os.O_EXCL)
get a list of last trailing words from another list  of stringsA	new_list = [x.split()[-1] for x in A]
Reverse a string A	A[::(-1)]
Reverse list A	A[::(-1)]
Reverse string A	''.join(reversed(A))
Reverse a string A	''.join(reversed(A))
Reverse a string A	'A'[::(-1)]
Reverse a string A	A[::(-1)]
Reverse a string A	def reversed_string(A):<nl>    return A[::(-1)]
Reverse a string A	''.join(reversed(A))
generate a string of numbers separated by comma which is divisible by A with remainder B or C.	""""""","""""".join(str(i) for i in range(100) if i % A in (B, C))"
convert list A of key, value pairs into a dictionary	dict([(e[0], int(e[1])) for e in A])
sorting a list of tuples A where each tuple is reversed	sorted(A, key=lambda tup: tup[::-1])
sorting a list of tuples A by second key	sorted(A, key=lambda tup: tup[1])
Concatenating two one-dimensional NumPy arrays A and B.	numpy.concatenate([A, B])
writing items in list A to file B	for item in A:<nl>    B.write(('%s\n' % item))
writing items in list A to file `thefile`	for item in A:<nl>    pass
serialize A to file B	pickle.dump(A, B)
writing items in list A to file B	B.write('\n'.join(A))
Update a user's name as A having id B in SQLAlchemy	session.query(User).filter_by(id=B).update({'name': 'A'})
send cookies A in a post request to url B with the python requests library	r = requests.post(B, cookies=A)
insert directory A at the 0th index of current directory	sys.path.insert(0, A)
get current date and time	datetime.datetime.now()
get current time	datetime.datetime.now().time()
get current time in pretty format	strftime('%Y-%m-%d %H:%M:%S', gmtime())
get current time in string format	str(datetime.now())
get current time	datetime.datetime.time(datetime.datetime.now())
convert hex A to integer	ord(A)
identify duplicated rows in columns A and B with additional column in dataframe C	C.groupby([A, B]).cumcount() + 1
get current utc time	datetime.utcnow()
move last item of array A to the first position	A[-1:] + A[:-1]
Convert dataframe A to a pivot table using column B, C, and D as indexes	A.set_index([B, C, D]).unstack(level=-1)
run a pivot with a multi-index A and B in a pandas data frame	df.pivot_table(values='value', index=['A', 'B'], columns='item')
print a rational number `3/2`	print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')
What is the best way to sort list with custom sorting parameters in Python?	li1.sort(key=lambda x: not x.startswith('b.'))
iterate backwards from 10 to 0	range(10, 0, -1)
get value of first child of xml node A	A[0].firstChild.nodeValue
start a new thread for A with parameters B and 1	thread.start_new_thread(A, (B, 1))
start a new thread for A with parameters B and 1	thread.start_new_thread(A, (B, 1))
get index of the first biggest element in list A	A.index(max(A))
replace periods A that are not followed by periods or spaces with a period and a space `. `	reAsub('\\A(?=[^ A])', 'A ', para)
convert a string A of letters embedded in squared brackets into embedded lists	[i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', A)]
extract dictionary A from list B where the value associated with the key C of dictionary A is equal to D	[A for A in B if A[C] == D]
extract dictionary from list of dictionaries based on a key's value.	[d for d in a if d['name'] == 'pluto']
Retrieve list of values from dictionary A	list(A.values())
replace occurrences of two whitespaces or more with one whitespace A in string B	re.sub(' +', A, B)
Change the mode of file A to permission number 484	os.chmod(A, 484)
write pandas dataframe A to the file B without row names	A.to_csv(B, index=False)
remove all words which contains number from a string A using regex	re.sub('\\w*\\d\\w*', '', A).strip()
control the keyboard and mouse with dogtail in linux	dogtail.rawinput.click(100, 100)
parse date string A using format B	datetime.strptime(A, B)
Get the position of a regex match for word A in a string B	re.search('\\bis\\b', B).start()
Get the position of a regex match A in a string B	re.search('A', B).start()
input an integer tuple from user	tuple(map(int, input().split(',')))
input a tuple of integers from user	tuple(int(x.strip()) for x in input().split(','))
replace unicode character A in string B with C	B.decode('utf-8').replace(A, C).encode('utf-8')
replace unicode characters A\u2022' in string 'str' with '*'	A AsAtArA.AdAeAcAoAdAeA(A'AuAtAfA-A8A'A)A.ArAeApAlAaAcAeA(A'A\AuA2A0A2A2A'A,A A'A*A'A)A A
convert ndarray with shape 3x3 to array	np.zeros((3, 3)).ravel()
get os name	import platform<nl>platform.system()
get os version	import platform<nl>platform.release()
get the name of the OS	print(os.name)
What is the most pythonic way to exclude elements of a list that start with a specific character?	[x for x in my_list if not x.startswith('#')]
replace fields delimited by braces {} in string A with string B	"""""A"""".format(B)"
Get a minimum value from a list of tuples A with values of type `string` and B with nan	min(A, key=lambda x: B('inf') if math.isnan(x[1]) else x[1])
Find average of a nested list A	A = [(sum(x) / len(x)) for x in zip(*A)]
Log info message A with attributes B	logging.info(A, extra=B)
replace values of dataframe A with True if numeric	A.applymap(lambda x: isinstance(x, (int, float)))
sort list A based on its elements' digits	sorted(A, key=lambda x: int(re.search('\\d+', x).group(0)))
close the window in tkinter	self.root.destroy()
get mean of columns A for all rows in dataframe B	B.iloc[:, ([A])].mean(axis=1)
filter dataframe A by sub-level index B in pandas	A[df.index.map(lambda x: x[1].endswith(B))]
flask-sqlalchemy delete row A	db.session.delete(A)
Format a string `u'Andr\xc3\xa9'` that has unicode characters	""""""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')"
convert a unicode A to a string	""""""""""""".join(chr(ord(c)) for c in A).decode('utf8')"
list all files in directory A	for (dirname, dirnames, filenames) in osAwalk('A'):<nl>    for subdirname in dirnames:<nl>        print(osApathAjoin(dirname, subdirname))<nl>    for filename in filenames:<nl>        pass
list all files in directory A	os.listdir(A)
rename file A to A + B	os.rename(A, A + B)
Insert a character A after every two elements in a string B	"""""""A"""""".join(a + b for a, b in zip(B[::2], B[1::2]))"
printing numbers rounding up to third decimal place	print('%.3f' % 3.1415)
add variable A to key B of first element in JSON data C	C[0][B] = A
get the path of module A	print(A.__file__)
get the path of the current python module	print(os.getcwd())
get the path of the python module A	path = os.path.abspath(A.__file__)
fill list A with 4 0's	self.A.extend([0] * (4 - len(self.A)))
drop duplicate indexes in a pandas data frame A	A[~A.index.duplicated()]
unpack elements of list A as arguments into function B	B(*A)
generate list of numbers in specific format using string formatting precision.	[('%.2d' % i) for i in range(16)]
sort dictionary A in descending order based on the sum of each value in it	sorted(iter(A.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]
get top A items from a dictionary B with largest sum of values	heapq.nlargest(A, iter(B.items()), key=lambda tup: sum(tup[1]))
get index of character A in list Ba', A]'	B'a'CAD.index(A)
set font size of axis legend of plot A to B	A.setp(legend.get_title(), fontsize=B)
Python: Convert a string to an integer	int('  23  ')
extract the 2nd elements from a list of tuples	[x[1] for x in elements]
get the opposite diagonal of a numpy array A	np.diag(np.rot90(A))
flatten list of tuples A	list(chain.from_iterable(A))
substitute two or more whitespace characters with character A in string B	re.sub('\\s{2,}', A, B.strip())
print float A with two decimal points	print(('%.2f' % A))
print float A with two decimal points	print(('{0:.2f}'.format(A)))
print float A with two decimal points	print(('{0:.2f}'.format(round(A, 2))))
print float A with two decimal points	print(('%.2f' % round(A, 2)))
limit float 13.9499999 to two decimal points	('%.2f' % 13.9499999)
limit float 3.14159 to two decimal points	('%.2f' % 3.14159)
limit float 13.949999999999999 to two decimal points	float('{0:.2f}'.format(13.95))
limit float 13.949999999999999 to two decimal points	'{0:.2f}'.format(13.95)
load a tsv file A into a pandas data frame	DataFrame.from_csv('A', sep='\t')
set UTC offset by 9 hrs ahead for date A	dateutil.parser.parse('A +0900')
pass a list of parameters `((1, 2, 3),) to sql queue A	cur.mogrify(A, ((1, 2, 3),))
sum all elements of two-dimensions list A	sum([sum(x) for x in A)
Retrieve an arbitrary value from dictionary A	next(iter(A.values()))
access an arbitrary value from dictionary A	next(iter(list(A.values())))
group dataframe A by columns B and C	A.groupby([B, C]).sum().unstack(level=0)
sort list A of tuples by arbitrary key from list B	sorted(A, key=lambda x: B.index(x[1]))
sort a list of dictionary A according to the key B	sorted(A, key=lambda x: xB)
remove the fragment identifier A from a url `http://www.address.com/something#something`	urlparse.urldefrag('http://www.address.com/somethingA')
download to a directory A from source B	urllib.request.urlretrieve(B, A)
remove all duplicates from a list of sets A	list(set(frozenset(item) for item in A))
remove duplicates from a list of sets A	[set(item) for item in set(frozenset(item) for item in A)]
terminate process A	A.terminate()
delete all values in a list A	del A[:]
throw an error window in python in windows	ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)
remove empty strings from list A	A = list([_f for _f in A if _f])
remove newlines and whitespace from string A	re.sub('[\\ \\n]{2,}', '', A)
remove the last dot and all text beyond it in string A	re.sub('\\.[^.]+$', '', A)
remove elements from an array A that are in array B	A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]
Write column A of DataFrame B to csv file C	B.to_csv(C, cols=[A])
call a Python script A	exec(compile(open('A').read(), 'A', 'exec'))
call a Python script A	subprocess.call('A', shell=True)
sort a zipped list A using lambda function	sorted(A, key=lambda x: x[1])
How do I sort a zipped list in Python?	zipped.sort(key=lambda t: t[1])
sort a dictionary A by value then by key	sorted(list(A.items()), key=lambda x: (x[1], x[0]), reverse=True)
using beautifulsoup to select div blocks within html A	A.find_all('div', class_='crBlock ')
remove elements from list A the indexes of which are in array B	[element for i, element in enumerate(A) if i not in B]
list duplicated elements in two lists A and B	list(set(A) & set(B))
download A from http and save as B	testfile = urllib.request.URLopener()<nl>testfile.retrieve('A', 'B')
download file from http url A and save as B	urllib.request.urlretrieve('A', 'B')
download file from http url A	file_name = wget.download(A)
set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib A	A.set_yticklabels(['\xe9', '\xe3', '\xe2'])
get a list of all integer points in a A dimensional hypercube with coordinates from B to C for all dimensions	list(itertools.product(list(range(B, C)), repeat=A))
convert unicode string A into string literals	print(A.encode('unicode_escape'))
how to format a list of arguments A into a string	'Hello %s' % ', '.join(A)
search and split string A by delimiter B	re.split(B, A, 1)
regex search and split string A by delimiter B	re.split(B, A, 1)
convert a list of dictionaries A to pandas data frame	pd.DataFrame(A)
split string A into words that do not contain whitespaces	"""""A"""".split()"
split string A into words that does not contain whitespaces	"""""A"""".split()"
python pandas: apply a function with arguments to a series	my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)
remove all duplicate items from a list A	woduplicates = list(set(A))
sum of product of combinations in a list A	sum([(i * j) for i, j in list(itertools.combinations(A, 2))])
regular expression for validating string A containing a sequence of characters ending with B followed by any number of digits.	re.compile('{}B\\d*'.format(A))
convert all of the items in a list A to float	[float(i) for i in A]
multiply all items in a list A together	from functools import reduce<nl>reduce(lambda x, y: x * y, A)
write a tuple of tuples A to a csv file using python	writer.writerow(A)
Write all tuple of tuples A at once into csv file	writer.writerows(A)
python, format string A to have B and C in the first and second positions	"""""A"""".format(B, C)"
Truncate A from each string in a list of string B	B = [x.replace('A', '') for x in B]
split elements of a list A by B	[i.partition(B)[-1] for i in A if B in i]
search for regex pattern A in string B including new line character '\n'	re.search(A, B, re.DOTALL)
find button that is in li class A and assign it to variable A	A = driver.find_element_by_css_selector('li.A>a')
get the  size of file A	os.stat(A).st_size
return a string from a regex match with pattern A in string B	imtag = re.match(A, B).group(0)
Rename a folder A to B	os.rename('A', 'B')
find overlapping matches from a string A using regex	re.findall('(?=(\\w\\w))', 'A')
convert 173 to binary string	bin(173)
convert binary string A to integer	int(A, 2)
convert binary string A to integer	int(A, 2)
convert binary string A to integer	int(A, 2)
convert 21 to binary string	bin(21)
convert binary string A to integer	int(A, 2)
delete all digits in string A that are not directly attached to a word character	re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', A)
delete digits at the end of string A	re.sub('\\b\\d+\\b', '', A)
Delete self-contained digits from string A	A = re.sub('^\\d+\\A|\\A\\d+\\A|\\A\\d+$', ' ', A)
truncate string A up to character B	A.split(B, 1)[1]
print a string A by splitting with comma B	print(A.split('B'))
Create list  by splitting string A using B as delimiter	A.split('B')
remove parentheses only around single words in a string A using regex	re.sub('\\((\\w+)\\)', '\\1', A)
webbrowser open url A	webbrowser.open_new(A)
webbrowser open url A	webbrowser.open(A)
change the background colour of the button `pushbutton` to red	self.pushButton.setStyleSheet('background-color: red')
apply a list of functions named A over a list of values named B	[x(y) for x, y in zip(A, B)]
modify the width of a text control as A keeping default height in wxpython	wx.TextCtrl(self, -1, size=(A, -1))
display a grayscale image from array of pixels A	imshow(A, cmap='Greys_r')
replace all the nan values with 0 in a pandas dataframe A	A.fillna(0)
export a table dataframe A in pyspark to csv B	A.toPandas().to_csv(B)
Write DataFrame A to csv file B	A.write.csv(B)
get the sum of each second value from a list of tuple A	sum(x[1] for x in A)
sum the 3 largest integers in groupby by A and B	df.groupby(A)[B].agg(lambda x: x.nlargest(3).sum())
Parse string A according to format B	datetime.strptime(A, B)
get current script directory	os.path.dirname(os.path.abspath(__file__))
double each character in string A	re.sub('(.)', '\\1\\1', A, 0, re.S)
concatenate strings in tuple A into a single string	""""""""""""".join(A)"
get full path of current directory	os.path.dirname(os.path.abspath(__file__))
variable number of digits A in variable B in format string C	"""""C"""".format(B, A)"
get current requested url	self.request.url
get a random item from list A	random_choice = random.choice(A)
sum the length of all strings in a list A	length = sum(len(s) for s in A)
sort a list A by first and second attributes	A = sorted(A, key=lambda x: (x[1], x[2]))
sort a list of lists A by second and third element in each list.	A.sort(key=operator.itemgetter(1, 2))
Mysql commit current transaction	con.commit()
filtering out strings that contain A from a list of strings B	[k for k in B if A in k]
find the first letter of each element in string A	output = ''.join(item[0].upper() for item in A.split())
get name of primary field A of django model B	B._meta.pk.A
count the number of words in a string A	len(A.split())
multiply array A and array Brespective elements then sum each row of the new array	np.einsum('ji,i->j', A, B)
check python version	sys.version
check python version	sys.version_info
format number 1000000000.0 using latex notation	print('\\num{{{0:.2g}}}'.format(1000000000.0))
Initialize a list of empty lists A of size 3	A = [[] for i in range(3)]
apply jinja2 filters A and B on variable C	{{C | A | B}}
zip a list of tuples A into a list of tuples according to original tuple index	zip(*A)
split a list of tuples A into sub-lists of the same tuple field using itertools	[list(group) for key, group in itertools.groupby(A, operator.itemgetter(1))]
Convert a string into a list	list('hello')
create new column A in dataframe B with row values equal to the value in column C divided by the value in column D	B['C'] = B['C'] / B['D']
getting a list of all subdirectories in the directory A	os.walk(A)
get a list of all subdirectories in the directory A	[x[0] for x in os.walk(A)]
update all values associated with key A to string B if value C is not equal to D in dictionary E	{A: B for A, C in list(E.items()) if C != D}
Filter a dictionary A to remove keys with value None and replace other values with B	dict((k, B) for k, v in A.items() if v is None)
Filter a dictionary A to remove keys with value B and replace other values with C	dict((k, C) for k, v in A.items() if v != B)
count number of rows in a group A in pandas groupby object B	B.groupby(A).size()
return list A of sum of elements of each list B in list of lists C	A = [sum(B) for B in C]
What's the best way to search for a Python dictionary value in a list of dictionaries?	any(d['site'] == 'Superuser' for d in data)
create a 2D array of A objects with dimensions B columns and C rows	nodes = [[A() for j in range(B)] for i in range(C)]
replace extension A in basename '/home/user/somefile.txt' with extension B	print(os.path.splitext('/home/user/somefileA')[0] + B)
Set the resolution of a monitor as A in pygame	pygame.display.set_mode((0, 0), pygame.A)
format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot A	A.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))
Get the age of directory (or file) A in seconds.	print(os.path.getmtime('A'))
how to get month name of datetime A	A.strftime('%B')
get month name from a datetime object A	A.strftime('%B')
Convert nested list A into a flat list	[j for i in A for j in i]
get each value from a list of lists A using itertools	print(list(itertools.chain.from_iterable(A)))
convert date string A  into day of week	datetime.datetime.strptime(A, '%B %d, %Y').strftime('%A')
Convert Date String to Day of Week	datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')
remove item A in list B	B.remove('A')
remove item A in list B	B.remove(A)
delete the element 6 from list A	A.remove(6)
delete the element 6 from list A	A.remove(6)
delete the element A from list B	if (A in B):<nl>    B.remove(A)
delete the element A from list B	try:<nl>    B.remove(A)<nl>except ValueError:<nl>    pass
Get all matching patterns A from a string B.	re.findall('(?=(A))', B)
outer product of each column of a 2d A array to form a 3d array A	np.einsum('ij,kj->jik', A, A)
Getting the last element of list A	A[(-1)]
Getting the second to last element of list A	A[(-2)]
gets the A th-to-last element in list B	B[(- A)]
get the last element in list A	A[(-1)]
get the last element in list A	A[(-1)]
make a list of integers from 0 to A where each second element is a duplicate of the previous element	print([u for v in [[i, i] for i in range(A)] for u in v])
create a list of integers with duplicate values A	A
create a list of integers from 1 to 5 with each value duplicated	[(i // 2) for i in range(10)]
remove first and last lines of string A	A[s.find('\n') + 1:A.rfind('\n')]
create dict of squared int values in range of 100	{(x ** 2) for x in range(100)}
zip lists A in a list	zip(*[A])
zip lists in a list [[1, 2], [3, 4], [5, 6]]	zip(*[[1, 2], [3, 4], [5, 6]])
request page A with credentials of username B and password C	requests.get(A, auth=(B, C))
get a new string from the 3rd character to the end of the string A	A[2:]
get a new string including the first two characters of string A	A[:2]
get a new string including all but the last character of string A	A[:(-2)]
get a new string including the last two characters of string A	A[(-2):]
get a new string with the 3rd to the second-to-last characters of string A	A[2:(-2)]
reverse a string A	A[::(-1)]
select alternate characters of A	'A'[::2]
select a substring of A beginning at B of length C	A = A[B:(B + C)]
terminate the program	sys.exit()
terminate the program	quit()
Terminating a Python script with error message A	sys.exit('A')
encode value of key A in dictionary B as C, ignoring non-ascii characters	B['A'].encode('C', 'ignore')
get current CPU and RAM usage	psutil.cpu_percent()<nl>psutil.virtual_memory()
get current RAM usage of current program	pid = os.getpid()<nl>py = psutil.Process(pid)<nl>memoryUse = (py.memory_info()[0] / (2.0 ** 30))
print cpu and memory usage	print((psutil.cpu_percent()))<nl>print((psutil.virtual_memory()))
read a ragged csv file A using B parameter in pandas	pd.read_csv('A', B=list('abcdef'))
get first non-null value per each row from dataframe A	A.stack().groupby(level=0).first()
print two numbers A and B using string formatting	"""""""{0} {1}"""""".format(A, B)"
replace placeholders in string A with arguments B	"""""""A"""""".formatB"
create list A containing elements of list B whilst converting strings containing digits to integers	A= [(int(f) if f.isdigit() else f) for f in B]
get a dictionary with keys from one list A and values from other list B	dict(zip(A, zip(*B)))
convert string A from iso-8859-1/latin1 to utf-8	A.decode('iso-8859-1').encode('utf8')
Exclude column names when writing dataframe A to a csv file B	A.to_csv('B', header=False)
Escape character A in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function B with arguments C	print('{0A:<15AA{1A:<15AA{2A:<8AA'.BC)
get dictionary with max value of key A in list of dicts B	max(B, key=lambda d: d[A])
format parameters A and B into plcaeholders in string C	"""""C"""".format(A, B)"
django create a foreign key column A and link it to table B	A = models.ForeignKey(B, unique=True)
write a regex pattern to match even number of letter A	re.compile('^([^A]*)AA([^A]|AA)*$')
join Numpy array A with Numpy array B along axis 0	A = np.concatenate((B, B), axis=0)
custom sort an alphanumeric list A	sorted(A, key=lambda x: x.replace('0', 'Z'))
plot logarithmic axes with matplotlib	ax.set_yscale('log')
Access environment variable A	os.environ['A']
get value of environment variable A	os.environ['A']
print all environment variables	print(os.environ)
get all environment variables	os.environ
get value of the environment variable A	print(os.environ.get(A))
get value of the environment variable A with default value B	print(os.getenv(A, B))
get value of the environment variable A with default value B	print(os.environ.get(A, B))
create a dictionary containing each string in list A split by B as a key/value pairs	print(dict([s.split(B) for s in A]))
find the index of element closest to number 11.5 in list A	min(enumerate(A), key=lambda x: abs(x[1] - 11.5))
find element A that contains string B in file C	e = C.xpath('.//A[contains(text(),B)]')
Find theA tag in html B which starts with the text C  and assign it to D	"D = B.xpath('.//A[starts-with(text(),""C"")]')"
find the element that holds string A in file B	"e = B.xpath('.//a[text()=""A""]')"
create list A containing items from list B whose index is in list C	A = [B[i] for i in C]
get the dot product of two one dimensional numpy arrays	np.dot(a[:, (None)], b[(None), :])
multiplication of two 1-dimensional arrays  in numpy	np.outer(a, b)
execute a file A with arguments B and C in python shell	subprocess.call([A, B, C])
Replace NaN values in  column A with the mean of data in column B of dataframe C	C[[A]].fillna(C.groupby(B).transform('mean'))
separate each character in string A by B	re.sub('(.)(?=.)', '\\1B', A)
concatenate A in between characters of string B	re.sub('(?<=.)(?=.)', A, B)
get the indexes of the x and y axes in Numpy array A where variable B is equal to variable C	i, j = A.where(B == C)
print letter that appears most frequently in string A	print(collections.Counter(A).most_common(1)[0])
find float number proceeding sub-string A in string B	float(re.findall('(?:^|_)' + A + '(\\d+\\.\\d*)', B)[0])
Get all the matches from a string A if it begins with a character B	re.findall('[^B]', 'A')
get a list of variables from module 'adfix.py' in current module.	print([item for item in dir(adfix) if not item.startswith('__')])
get the first element of each tuple in a list A	[x[0] for x in A]
get a list A of the first elements of each tuple in a list of tuples B	A = [x[0] for x in B]
duplicate data in pandas dataframe A for 5 times	pd.concat([A] * 5, ignore_index=True)
Get a repeated pandas data frame object A by B times	pd.concat([A] * B)
sort json A by a key B	sorted_list_of_keyvalues = sorted(list(A.items()), key=item[1][B])
read json A to pandas dataframe `df`	pd.read_json(A)
generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]	numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])
Return rows of data associated with the maximum value of column A in dataframe B	B.loc[B[A].idxmax()]
find recurring patterns in a string A	re.findall('^(.+?)((.+)\\3+)$', A)[0][:-1]
convert binary string A to numpy array	np.fromstring(A, dtype='<f4')
convert binary string to numpy array	np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')
insert variables A into sql statement B	cursor.execute(B, A)
Execute a sql statement using variables A, B and C	cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (A, B, C))
How to use variables in SQL statement in Python?	cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))
pandas split strings in column A by B into columns in dataframe C	C[A].str[1:-1].str.split(B, expand=True).astype(float)
split string in column A by B into separate columns in dataframe C	C[A].str[1:-1].str.split(B).apply(pd.Series).astype(float)
Unpack column A in dataframe B into a series of columns	B[A].apply(pd.Series)
wait for shell command A evoked by  subprocess.Popen to complete	A.wait()
encode string A to utf-8 code	A.encode('utf8')
parse string A into a datetime object using format B	datetime.datetime.strptime(A, B)
copy a file from A to B	copyfile(A, B)
copy file A to B	shutil.copy2('A', 'B')
copy file A to B	shutil.copy2(A, B)
print a list of integers A using string formatting	print(', '.join(str(x) for x in A))
multiply column A and column B by column C in datafram D	D[[A, B]].multiply(D[C], axis='index')
convert string A to hex	hex(ord(A))
Get the sum of values to the power of their indices in a list A	sum(j ** i for i, j in enumerate(A, 1))
remove extra white spaces & tabs from a string A	""""""" """""".join(A.split())"
replace comma in string A with empty string B	A = A.replace(',', B)
Resample dataframe A to resolution of 1 hour B for timeseries index, summing values in the column C averaging those in column D	A.resample('B').agg({'C': np.sum, 'D': np.mean})
How do I get rid of Python Tkinter root window?	root.destroy()
create a pandas dataframe A from elements of a dictionary B	A = pd.DataFrame.from_dict({k: v for k, v in list(B.items()) if k != 'y3'})
Flask get value of request variable A	first_name = request.args.get(A)
Flask get posted form data A	first_name = request.form.get(A)
get a list of substrings consisting of the first 5 characters of every string in list A	[s[:5] for s in A]
sort list A by the length of string followed by alphabetical order	A.sort(key=lambda item: (-len(item), item))
Set index equal to field A in dataframe B	B = B.set_index([A])
List comprehension with an accumulator in range of 10	list(accumulate(list(range(10))))
How to convert a date string A in format B to different format C	datetime.datetime.strptime(A, B).strftime(C)
convert a date string A in format B to different format C	datetime.datetime.strptime(A, B).strftime(C)
get a dataframe A that contains all the columns of dataframe B that do not end in C	A = B.ix[:, (~B.columns.str.endswith('C'))]
create list A containing the last 10 elements of list B	A = B[-10:]
get the last 10 elements from a list A	A[-10:]
convert matlab engine array A to a numpy ndarray	np.array(A._data).reshape(A.size[::-1]).T
select the first row grouped per level 0 of dataframe A	A.groupby(level=0, as_index=False).nth(0)
concatenate sequence of numpy arrays  A into a one dimensional array along the first axis	numpy.concatenate(A, axis=0)
convert and escape string A to UTF-8 code	"""""A"""".encode('utf-8').decode('unicode_escape')"
encode string A to bytes	"""""A"""".encode('utf-8')"
interleave the elements of two lists A and B	[j for i in zip(A, B) for j in i]
merge two lists A and B into a single list	[j for i in zip(A, B) for j in i]
delete all occureces of A in each string B in list C	print([B.replace('A', '') for B in C])
Split string A into a string of letters seperated by B	"""""""B"""""".join('A')"
in Django, select 100 random records from the database A	A.all().order_by('?')[:100]
create a NumPy array containing elements of array A as pointed to by index in array B	A[np.arange(A.shape[0])[:, (None)], B]
pivot dataframe A so that values for B become column headings and values for C become the index	A.pivot_table(index='C', columns='B', aggfunc='size', fill_value=0)
match zero-or-more instances of lower case alphabet characters in a string `f233op `	re.findall('([a-z]*)', 'f233op')
match zero-or-more instances of lower case alphabet characters in a string `f233op `	re.findall('([a-z])*', 'f233op')
split string A using string B	re.split(B, A)
Split string A based on string B, C or D	re.split('_(?:D|C|B)_', A)
Split a string A by multiple words B or C or D	[re.split('_(?:f?C|D)_', s) B s in A]
zip keys with individual values in lists A and B	[dict(zip(A, x)) for x in B]
Sort a list A in descending order.	sorted(A, reverse=True)
sort array A based on column B, C and D	A.sort(order=[B, C, D])
Sort a structured numpy array A on multiple columns B, C and D.	A.sort([B, C, D])
check if elements in list A are coherent in order	return A == list(range(A[0], A[-1] + 1))
group rows of pandas dataframe A with same B	A.groupby(B).agg(lambda x: x.tolist())
encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8	'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')
parse string A to float	float(A)
Parse String A to Float or Int	try:<nl>    return int(A)<nl>except ValueError:<nl>    return float(A)
check if object A has property B	if hasattr(A, B):<nl>    pass
check if object A has property B	if hasattr(A, B):<nl>    pass
get the value of attribute A of object B with default value C	getattr(B, A, C)
delete every 8th column in a numpy array A.	np.delete(A, list(range(0, A.shape[1], 8)), axis=1)
convert A milliseconds to a datetime object	datetime.datetime.fromtimestamp(A / 1000.0)
find the magnitude (length) squared of a vector A field	np.einsum('...j,...j->...', A, A)
request http url A	r = requests.get(A)
request http url A with parameters B	r = requests.get(A, params=B)
post request url A with parameters B	r = requests.post(A, data=B)
make an HTTP post request with data A	post_response = requests.post(url='http://httpbin.org/post', json=A)
django jinja slice list A by B	{{(A | slice): B}}
create dataframe A with content of hdf store file B with key of C	df1 = pd.read_hdf(B, C)
get the largest index of the last occurrence of characters A in string B	max(B.rfind(i) for i in A)
print A plus unicode character uB	print(A + B)
print unicode characters in a string A	print('A')
pads string A on the left with 1 zero	print('{0}'.format(A.zfill(2)))
Remove duplicates elements from list A and sort it in ascending order	sorted(set(itertools.chain.from_iterable(A)))
pandas dataframe A column B to list	A[B].values.tolist()
Get a list of all values in column A in pandas data frame B	B['A'].tolist()
escaping quotes in string	"replace('""', '\\""')"
check if all string elements in list A are upper-cased	print(all(word[0].isupper() for word in A))
remove items from dictionary A if the item's value B is equal to 42	A = {key: B for key, B in list(A.items()) if B != 42}
Remove all items from a dictionary A whose values are B	{key: val for key, val in list(A.items()) if val != B}
Determine the byte length of a utf-8 encoded string A	return len(A.encode('utf-8'))
kill a process with id A	os.kill(A, signal.SIGKILL)
get data of columns with Null values in dataframe A	A[pd.isnull(A).any(axis=1)]
strip everything up to and including the character A from url B, strip the character C from the remaining string and concatenate D to the end	B.split('A')[-1].replace('C', '') + 'D'
Parse a file A using expat parsing in python 3	parser.ParseFile(open('A', 'rb'))
Exit script	sys.exit()
assign value in A dynamically to class property B	setattr(self, B, A)
decode url-encoded string A to its character equivalents	urllib.parse.unquote(urllib.parse.unquote(A))
"decode a double URL encoded string 
A to
'FireShot3+(2).png'"	urllib.parse.unquote(urllib.parse.unquote(A))
change flask security register url to A	app.config['SECURITY_REGISTER_URL'] = 'A'
open a file A in binary write mode	output = open('A', 'wb')
remove the last element in list A	del A[(-1)]
remove the element in list A with index 1	A.pop(1)
remove the last element in list A	A.pop()
remove the element in list A at index B	A.pop(B)
remove the element in list A at index B	del A[B]
print a celsius symbol on x axis of a plot A	A.set_xlabel('Temperature (\u2103)')
Print a celsius symbol with matplotlib	ax.set_xlabel('Temperature ($^\\circ$C)')
convert a list of lists A into a list of strings keeping empty sub-lists as empty string B	[B.join(l) for l in A]
get a list of all the duplicate items in dataframe A using pandas	pd.concat(g for _, g in A.groupby('ID') if len(g) > 1)
Delete third row in a numpy array A	A = numpy.delete(A, 2, axis=1)
delete first row of array A	A = numpy.delete(A, 0, axis=0)
merge rows from dataframe A with rows from dataframe B and calculate the mean for rows that have the same value of axis 1	pd.concat((A, B), axis=1).mean(axis=1)
Get the average values from two numpy arrays A and B	np.mean(np.array([A, B]), axis=0)
Matplotlib change marker size to 500	scatter(x, y, s=500, color='green', marker='h')
Create new list A by splitting each item in list B	A = [item for word in B for item in word.split(',')]
convert JSON string A into a DateTime object using format B	datetime.datetime.strptime(A, B)
count `True` values associated with key A in dictionary B	sum(item[A] for item in list(B.values()))
encode a pdf file A with B encoding	a = open('A', 'rb').read().encode('B')
split string A using new-line character B as separator	A.rstrip().split(B)
split a string A with new line character	A.split('\n')[:-1]
return http status code 204 from a django view	return HttpResponse(status=204)
check if 7 is in A	(7 in A)
check if A is in list B	(A in B)
sort list A by keys value B	sorted(A, key=itemgetter(B))
get current url in selenium webdriver A	print(A.current_url)
split string A with delimiter B or delimiter C	re.split('B|C'CA)
un-escaping characters in a string with python	"""""""\\u003Cp\\u003E"""""".decode('unicode-escape')"
convert date string A in format pattern B into a timestamp	time.mktime(datetime.datetime.strptime(A, B).timetuple())
convert string A to an integer timestamp	int(datetime.datetime.strptime(A, '%d/%m/%Y').strftime('%s'))
get http header of the key A in flask	request.headers[A]
select records of dataframe A where the sum of column B for each value in column C is 0	A.groupby(C)[B].filter(lambda x: x.sum() == 0)
Get data of dataframe A where the sum of column B grouped by column C is equal to 0	A.loc[A.groupby(C)[B].transform(sum) == 0]
Get data from dataframe A where column B is equal to 0	A.groupby('User')[B].transform(sum) == 0
How do I find an element that contains specific text in Selenium Webdriver (Python)?	"driver.find_elements_by_xpath(""//*[contains(text(), 'My Button')]"")"
convert pandas group by object to multi-indexed dataframe with indices A and B	df.set_index([A, B])
coalesce non-word-characters in string A	print(re.sub('(\\W)\\1+', '\\1', A))
open a file A under Unix	os.system('start A')
Convert a Unicode string A to a B string	unicodedata.normalize('NFKD', A).encode(B, 'ignore')
Convert a Unicode string A to a B string	A.encode(B, 'ignore')
create a list A containing all files in directory B that starts with numbers between 0 and 9 and ends with the extension C	A = [f for f in os.listdir(B) if re.match('[0-9]+.*\\C', f)]
adding a 1-d array A to a 3-d array B	B + np.array(A)[(None), :, (None)]
add array of shape A to array B	np.zeros(A) + np.array(B).reshape((1, 9, 1))
How can I launch an instance of an application using Python?	os.system('start excel.exe <path/to/file>')
get the list with the highest sum value in list A	print(max(A, key=sum))
sum the length of lists in list A that are more than 1 item in length	sum(len(y) for y in A if len(y) > 1)
Enclose numbers in quotes in a string A	"re.sub('(\\d+)', '""\\1""', 'A')"
multiply the columns of sparse matrix A by array B then multiply the rows of the resulting matrix by array B	numpy.dot(numpy.dot(B, A), B)
Django check if an object with criteria A equal to 'name' and criteria B equal to 'title' exists in model C	C.objects.filter(A='A', B='B').exists()
sort a nested list by the inverse of element 2, then by element 1	sorted(l, key=lambda x: (-int(x[1]), x[0]))
get domain/host name from request object in Django	request.META['HTTP_HOST']
get a string A between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex	"re.findall(""api\\('(.*?)'"", ""api('A', 'key', 'text')"")"
invoke perl script A using perl interpeter B and send argument C to it	subprocess.call([B, A, C])
print list of items A	print('\n'.join(str(p) for p in A))
update the dictionary A with dynamic keys B and values with key C from dictionary D	A.update({B: D[C]})
split a A encoded string B into a list of characters	list(B.decode('A'))
convert utf-8 with bom string A to utf-8 with no bom B	B = A.decode('utf-8-sig')
Filter model A where B is not equal to 3 in Django	A.objects.filter(~Q(B=3))
lookup an attribute in any scope by name A	getattr(__builtins__, A)
restart a computer after A seconds using subprocess	subprocess.call(['shutdown', '/r', '/t', 'A'])
shutdown a computer using subprocess	subprocess.call(['shutdown', '/s'])
abort a computer shutdown using subprocess	subprocess.call(['shutdown', '/a '])
logoff computer having windows operating system using python	subprocess.call(['shutdown', '/l '])
shutdown and restart a computer running windows from script	subprocess.call(['shutdown', '/r'])
erase the contents of a file A	open('A', 'w').close()
How to erase the file contents of text file in Python?	open('file.txt', 'w').close()
convert dataframe A to list of dictionaries including the index values	A.to_dict('index')
Create list of dictionaries from pandas dataframe A	A.to_dict('records')
Group a pandas data frame by monthly frequenct A using groupby	df.groupby(pd.TimeGrouper(freq='A'))
divide the members of a list A by the corresponding members of another list B	[(c / t) for c, t in zip(A, B)]
sort dict A by value	sorted(A, key=A.get)
Sort a dictionary A by its values	sorted(A.values())
Get a list of pairs of key-value sorted by values in dictionary A	sorted(list(A.items()), key=lambda x: x[1])
sort dict by value python	sorted(list(data.items()), key=lambda x: x[1])
display current time	now = datetime.datetime.now().strftime('%H:%M:%S')
find the index of the second occurrence of the substring A in string `foo bar bar bar`	"""""""foo A bar A"""""".replace('A', 'XXX', 1).find('A')"
check if key A and key B are presented in dictionary C	set([A, B]).issubset(C)
replace string A in string B with character C	B.replace(A, C)
Save array at index 0, index 1 and index 8 of array A to tmp file B	A.savez(B, *[getarray[0], getarray[1], getarray[8]])
substract 1 hour and 10 minutes from current time	t = datetime.datetime.now()<nl>(t - datetime.timedelta(hours=1, minutes=10))
subtract 1 hour and 10 minutes from time object A	(A - datetime.timedelta(hours=1, minutes=10))
add 1 hour and 2 minutes to time object A	dt = datetime.datetime.combine(datetime.date.today(), A)
subtract 5 hours from the time object A	A -= datetime.timedelta(hours=5)
encode string A using hex B encoding	print(A.encode(B))
Return the decimal value for each hex character in data A	print(' '.join([str(ord(a)) for a in A]))
Get all the items from a list of tuple A where second item in tuple is B.	[x for x in A if x[B] == B]
Create array A containing integers from stdin	A.fromlist([int(val) for val in stdin.read().split()])
place '\' infront of each non-letter char in string A	print(re.sub('[_%^$]', '\\\\\\g<0>', A))
Get all A tags where the text starts with value B using regex	"doc.xpath(""//A[starts-with(text(),'B')]"")"
convert a list of lists A into list of tuples of appropriate elements form nested lists	zip(*A)
convert a list of strings A to list of integers	[map(int, sublist) for sublist in A]
convert strings in list-of-lists A to ints	[[int(x) for x in sublist] for sublist in A]
get index of elements in array A that occur in another array B	np.where(np.in1d(A, B))[0]
create a list where each element is a dictionary with keys A and B and values corresponding to each value in the lists referenced by keys A and B in dictionary C	[{A: a, B: b} for a, b in zip(C[A], C[B])]
Split dictionary of lists into list of dictionaries	map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))
Get Last Day of the first month in 2002	calendar.monthrange(2002, 1)
Get Last Day of the second month in 2002	calendar.monthrange(2008, 2)
Get Last Day of the second month in 2100	calendar.monthrange(2100, 2)
Get Last Day of the month A in year B	calendar.monthrange(B, A)[1]
Get Last Day of the second month in year 2012	monthrange(2012, 2)
Get Last Day of the first month in year 2000	(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))
"Calling an external command ""ls -l"""	from subprocess import call
Calling an external command A	os.system('A')
Calling an external command A	os.system('A')
Calling an external command A	stream = os.popen('A')
Calling an external command A	print(subprocess.Popen('A', shell=True, stdout=subprocess.PIPE).stdout.read())
Calling an external command A	print(os.popen('A').read())
Calling an external command A	return_code = subprocess.call('A', shell=True)
Calling an external command A	p = subprocess.Popen('A', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)<nl>for line in p.stdout.readlines():<nl>    print(line, end=' ')<nl>retval = p.wait()
"Calling an external command ""ls -l"""	call(['ls', '-l'])
decode url A with utf8 and print it	print(urllib.parse.unquote(A).decode('utf8'))
decode a urllib escaped url string A with B	A = urllib.parse.unquote(A).decode('B')
delete letters from string A	""""""""""""".join(filter(str.isdigit, A))"
Update row values for a column A using vectorized string operation in pandas	df['A'].str.split('-').str[0].astype(int)
sort a list of tuples A by second parameter in the tuple	A.sort(key=lambda x: x[1])
find indexes of all occurrences of a substring A in a string B	[m.start() for m in re.finditer('(?=A)', 'B')]
find all occurrences of a substring in a string	[m.start() for m in re.finditer('test', 'test test test test')]
split string A based on white spaces	re.findall('\\A+|\\S+', A)
set columns A as indexes in dataframe B	B.set_index(A)
recursively go through all subdirectories and files in A	for (root, subFolders, files) in os.walk(A):<nl>    pass
sort a list of dictionary values by A in reverse order	list.sort(key=lambda item: item[A], reverse=True)
display first 5 characters of string A	"""""""{:.5}"""""".format(A)"
unpack hexadecimal string A to a list of integer values	struct.unpack('11B', A)
finding the index of an item A given a list `[A, 'bar', 'baz']` containing it	[i for i, j in enumerate([A, 'bar', 'baz']) if j == A]
generate all permutations of list A and list B	print(list(itertools.product(A, B)))
generate all permutations of a list A	itertools.permutations(A)
substitute occurrences of unicode regex pattern uA with empty string B in string C	return re.sub(A, B, C)
manually throw/raise a A exception with the message B	raise A(B)
throw an exception A	raise Exception('A')
Manually throw an exception A	raise Exception('A')
throw a ValueError with message A	raise ValueError(A)
throw an Exception with message A	raise Exception(A)
throw a value error with message A, 'foo', 'bar', 'baz'	raise ValueError(A)
throw a runtime error with message A	raise RuntimeError(A)
throw an assertion error with message A, distance	raise AssertionError(A, distance)
if Selenium textarea element A is not empty, clear the field	driver.find_element_by_id('A').clear()
clear text from textarea A with selenium	driver.find_element_by_id(A).clear()
convert a number 2130706433 to ip string	socket.inet_ntoa(struct.pack('!L', 2130706433))
Rearrange the columns A,B,C,D of pandas DataFrame E in mentioned sequence C ,D,A ,B	E = E[[C, D, A, B]]
call base class's __init__ method from the child class A	super(A, self).__init__(*args, **kwargs)
sum of all values in a python dict A	sum(A.values())
Sum of all values in a Python dict	sum(d.values())
convert python dictionary A to json array	json.dumps(A, ensure_ascii=False)
assign an array of floats in range from 0 to 100 to a variable A	A = np.array([i for i in range(100)], dtype=np.float64)
sort a list of dictionaries A by values in an order B	sorted(A, key=lambda x: B.index(list(x.values())[0]))
change the case of the first letter in string A	return A[0].upper() + A[1:]
join list of numbers `[1,2,3,4] ` to string of numbers.	""""""""""""".join([1, 2, 3, 4])"
delete every non A characters from a string B	B = B.decode('A', 'ignore').encode('A')
execute a command `command ` in the terminal from a python script	os.system(command)
MySQL execute query A with parameters B and C	c.execute(A, (B, C))
Parse string A into a datetime object using format pattern B	dateobj = datetime.datetime.strptime(A, B).date()
